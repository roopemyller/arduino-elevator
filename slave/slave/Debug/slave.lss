
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  000003e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097c  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030b  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000222d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  9e:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buzzer_play>:

volatile uint8_t melody_active = 1;

volatile uint8_t play_emergency = 0;

void buzzer_play(uint16_t frequency) {
  a6:	9c 01       	movw	r18, r24
	// Set PB3 (OC2A) as output
	DDRB |= (1 << PB3);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	84 b9       	out	0x04, r24	; 4

	// Clear previous settings
	TCCR2A = 0;
  ae:	a0 eb       	ldi	r26, 0xB0	; 176
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	1c 92       	st	X, r1
	TCCR2B = 0;
  b4:	e1 eb       	ldi	r30, 0xB1	; 177
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1

	// Set CTC mode (WGM21), toggle OC2A on compare match (COM2A0)
	TCCR2A |= (1 << WGM21) | (1 << COM2A0);
  ba:	8c 91       	ld	r24, X
  bc:	82 64       	ori	r24, 0x42	; 66
  be:	8c 93       	st	X, r24

	// Prescaler = 8, so CS21
	TCCR2B |= (1 << CS21);
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24

	// Calculate and set compare value
	// OCR2A = (F_CPU / (2 * Prescaler * Frequency)) - 1
	OCR2A = (F_CPU / (2UL * 8UL * frequency)) - 1;
  c6:	c9 01       	movw	r24, r18
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	9c 01       	movw	r18, r24
  de:	ad 01       	movw	r20, r26
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	44 1f       	adc	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	44 1f       	adc	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	74 e2       	ldi	r23, 0x24	; 36
  f4:	84 ef       	ldi	r24, 0xF4	; 244
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodsi4>
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 102:	08 95       	ret

00000104 <buzzer_stop>:
}

void buzzer_stop() {
	// Disable Timer2
	TCCR2A = 0;
 104:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 108:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Optionally pull the pin low
	PORTB &= ~(1 << PB3);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <TWI_init>:
}

void TWI_init(){
	// Init the TWI Slave
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // Enable TWI, ACK and interrupt
 114:	85 e4       	ldi	r24, 0x45	; 69
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
 11a:	8e ea       	ldi	r24, 0xAE	; 174
 11c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	sei();
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <blink>:
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	23 c0       	rjmp	.+70     	; 0x170 <blink+0x4c>
		PORTB |= (1 << led_pin); // Turn ON LED
 12a:	95 b1       	in	r25, 0x05	; 5
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	08 2e       	mov	r0, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <blink+0x14>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <blink+0x10>
 13c:	92 2b       	or	r25, r18
 13e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	e3 ec       	ldi	r30, 0xC3	; 195
 144:	f9 e0       	ldi	r31, 0x09	; 9
 146:	91 50       	subi	r25, 0x01	; 1
 148:	e0 40       	sbci	r30, 0x00	; 0
 14a:	f0 40       	sbci	r31, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <blink+0x22>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <blink+0x2c>
 150:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
 152:	95 b1       	in	r25, 0x05	; 5
 154:	20 95       	com	r18
 156:	29 23       	and	r18, r25
 158:	25 b9       	out	0x05, r18	; 5
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	33 ec       	ldi	r19, 0xC3	; 195
 15e:	99 e0       	ldi	r25, 0x09	; 9
 160:	21 50       	subi	r18, 0x01	; 1
 162:	30 40       	sbci	r19, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <blink+0x3c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <blink+0x46>
 16a:	00 00       	nop
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
	sei();
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
 16c:	4f 5f       	subi	r20, 0xFF	; 255
 16e:	5f 4f       	sbci	r21, 0xFF	; 255
 170:	46 17       	cp	r20, r22
 172:	57 07       	cpc	r21, r23
 174:	d4 f2       	brlt	.-76     	; 0x12a <blink+0x6>
		PORTB |= (1 << led_pin); // Turn ON LED
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
		_delay_ms(200);		
	}
}
 176:	08 95       	ret

00000178 <play_emergency_melody>:

void play_emergency_melody() {
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	28 97       	sbiw	r28, 0x08	; 8
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	blink(MOVEMENT_LED, 5);
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 92 00 	call	0x124	; 0x124 <blink>

	uint16_t tones[] = {1000, 800, 400, 600};
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	e0 e0       	ldi	r30, 0x00	; 0
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	de 01       	movw	r26, r28
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	8a 95       	dec	r24
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <play_emergency_melody+0x2c>
	for (int i = 0; i < 4; i++) {
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <play_emergency_melody+0x6a>
		buzzer_play(tones[i]);
 1b2:	f8 01       	movw	r30, r16
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	8c 0f       	add	r24, r28
 1be:	9d 1f       	adc	r25, r29
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	80 81       	ld	r24, Z
 1c6:	91 81       	ldd	r25, Z+1	; 0x01
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <buzzer_play>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	23 ed       	ldi	r18, 0xD3	; 211
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	20 40       	sbci	r18, 0x00	; 0
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <play_emergency_melody+0x5a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <play_emergency_melody+0x64>
 1dc:	00 00       	nop

void play_emergency_melody() {
	blink(MOVEMENT_LED, 5);

	uint16_t tones[] = {1000, 800, 400, 600};
	for (int i = 0; i < 4; i++) {
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
 1e2:	04 30       	cpi	r16, 0x04	; 4
 1e4:	11 05       	cpc	r17, r1
 1e6:	2c f3       	brlt	.-54     	; 0x1b2 <play_emergency_melody+0x3a>
		buzzer_play(tones[i]);
		_delay_ms(1000);
	}

	buzzer_stop();
 1e8:	0e 94 82 00 	call	0x104	; 0x104 <buzzer_stop>
}
 1ec:	28 96       	adiw	r28, 0x08	; 8
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <__vector_24>:

ISR(TWI_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	// Get status code
	uint8_t twi_status = (TWSR & 0xF8);
 224:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 228:	88 7f       	andi	r24, 0xF8	; 248
	
	if(twi_status == 0x60 || twi_status == 0x68) {
 22a:	80 36       	cpi	r24, 0x60	; 96
 22c:	11 f0       	breq	.+4      	; 0x232 <__vector_24+0x30>
 22e:	88 36       	cpi	r24, 0x68	; 104
 230:	21 f4       	brne	.+8      	; 0x23a <__vector_24+0x38>
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 232:	85 ec       	ldi	r24, 0xC5	; 197
 234:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 238:	45 c0       	rjmp	.+138    	; 0x2c4 <__vector_24+0xc2>
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 23a:	80 38       	cpi	r24, 0x80	; 128
 23c:	11 f0       	breq	.+4      	; 0x242 <__vector_24+0x40>
 23e:	80 39       	cpi	r24, 0x90	; 144
 240:	f1 f5       	brne	.+124    	; 0x2be <__vector_24+0xbc>
		// Data received, ACK returned
		char command = TWDR;
 242:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
		if(command == 'M'){
 246:	8d 34       	cpi	r24, 0x4D	; 77
 248:	21 f4       	brne	.+8      	; 0x252 <__vector_24+0x50>
			PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	85 b9       	out	0x05, r24	; 5
 250:	32 c0       	rjmp	.+100    	; 0x2b6 <__vector_24+0xb4>
		} else if(command == 'S'){
 252:	83 35       	cpi	r24, 0x53	; 83
 254:	21 f4       	brne	.+8      	; 0x25e <__vector_24+0x5c>
			PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	2c c0       	rjmp	.+88     	; 0x2b6 <__vector_24+0xb4>
		} else if (command == 'O') {
 25e:	8f 34       	cpi	r24, 0x4F	; 79
 260:	21 f4       	brne	.+8      	; 0x26a <__vector_24+0x68>
			PORTB |= (1 << DOOR_LED);  // Turn ON door LED
 262:	85 b1       	in	r24, 0x05	; 5
 264:	84 60       	ori	r24, 0x04	; 4
 266:	85 b9       	out	0x05, r24	; 5
 268:	26 c0       	rjmp	.+76     	; 0x2b6 <__vector_24+0xb4>
		} else if (command == 'C'){
 26a:	83 34       	cpi	r24, 0x43	; 67
 26c:	21 f4       	brne	.+8      	; 0x276 <__vector_24+0x74>
			PORTB &= ~(1 << DOOR_LED); // Turn OFF door LED
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	8b 7f       	andi	r24, 0xFB	; 251
 272:	85 b9       	out	0x05, r24	; 5
 274:	20 c0       	rjmp	.+64     	; 0x2b6 <__vector_24+0xb4>
		} else if (command == 'F'){ // Fault state, blink movement LED 3 times
 276:	86 34       	cpi	r24, 0x46	; 70
 278:	31 f4       	brne	.+12     	; 0x286 <__vector_24+0x84>
			blink(MOVEMENT_LED, 3);
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 92 00 	call	0x124	; 0x124 <blink>
 284:	18 c0       	rjmp	.+48     	; 0x2b6 <__vector_24+0xb4>
        } else if (command == 'E') { // Emergency state
 286:	85 34       	cpi	r24, 0x45	; 69
 288:	31 f4       	brne	.+12     	; 0x296 <__vector_24+0x94>
            blink(MOVEMENT_LED, 3);
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 92 00 	call	0x124	; 0x124 <blink>
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <__vector_24+0xb4>
        } else if (command == 'O') {
 296:	8f 34       	cpi	r24, 0x4F	; 79
 298:	39 f4       	brne	.+14     	; 0x2a8 <__vector_24+0xa6>
            PORTB |= (1 << DOOR_LED);  // Turn ON door LED (open door)
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	85 b9       	out	0x05, r24	; 5
			play_emergency = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <__vector_24+0xb4>
        } else if (command == 'X') {
 2a8:	88 35       	cpi	r24, 0x58	; 88
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <__vector_24+0xb4>
            play_emergency = 0; 
 2ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            PORTB &= ~(1 << DOOR_LED); // Automatically close the door
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	8b 7f       	andi	r24, 0xFB	; 251
 2b4:	85 b9       	out	0x05, r24	; 5
        }
  		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2b6:	85 ec       	ldi	r24, 0xC5	; 197
 2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	if(twi_status == 0x60 || twi_status == 0x68) {
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <__vector_24+0xc2>
  		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else {
		// Default - send ACK and continue
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 2be:	85 ec       	ldi	r24, 0xC5	; 197
 2c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <main>:

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 2e6:	84 b1       	in	r24, 0x04	; 4
 2e8:	86 60       	ori	r24, 0x06	; 6
 2ea:	84 b9       	out	0x04, r24	; 4
	
	// Init TWI, will use ISR
	TWI_init();
 2ec:	0e 94 8a 00 	call	0x114	; 0x114 <TWI_init>
	
	while (1){
		if (play_emergency) {
 2f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2f4:	88 23       	and	r24, r24
 2f6:	e1 f3       	breq	.-8      	; 0x2f0 <main+0xa>
			play_emergency_melody();
 2f8:	0e 94 bc 00 	call	0x178	; 0x178 <play_emergency_melody>
 2fc:	f9 cf       	rjmp	.-14     	; 0x2f0 <main+0xa>

000002fe <__udivmodsi4>:
 2fe:	a1 e2       	ldi	r26, 0x21	; 33
 300:	1a 2e       	mov	r1, r26
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	fd 01       	movw	r30, r26
 308:	0d c0       	rjmp	.+26     	; 0x324 <__udivmodsi4_ep>

0000030a <__udivmodsi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	ee 1f       	adc	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	a2 17       	cp	r26, r18
 314:	b3 07       	cpc	r27, r19
 316:	e4 07       	cpc	r30, r20
 318:	f5 07       	cpc	r31, r21
 31a:	20 f0       	brcs	.+8      	; 0x324 <__udivmodsi4_ep>
 31c:	a2 1b       	sub	r26, r18
 31e:	b3 0b       	sbc	r27, r19
 320:	e4 0b       	sbc	r30, r20
 322:	f5 0b       	sbc	r31, r21

00000324 <__udivmodsi4_ep>:
 324:	66 1f       	adc	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a 94       	dec	r1
 32e:	69 f7       	brne	.-38     	; 0x30a <__udivmodsi4_loop>
 330:	60 95       	com	r22
 332:	70 95       	com	r23
 334:	80 95       	com	r24
 336:	90 95       	com	r25
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	bd 01       	movw	r22, r26
 33e:	cf 01       	movw	r24, r30
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
