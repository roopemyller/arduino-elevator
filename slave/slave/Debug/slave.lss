
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b6  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_init>:
volatile uint32_t door_timer = 0;
volatile uint8_t door_active = 0;

void I2C_init(uint8_t address){
	// Init the TWI Slave
	TWAR = (address << 1); // Set slave address
  90:	88 0f       	add	r24, r24
  92:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); // Enable TWI, ACK and interrupt
  96:	85 e4       	ldi	r24, 0x45	; 69
  98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	sei();
  9c:	78 94       	sei
  9e:	08 95       	ret

000000a0 <__vector_24>:
}

ISR(TWI_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
	uint8_t status = TWSR & 0xF8;  // Get status code
  ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == 0x60 || status == 0x68) {
  b2:	80 36       	cpi	r24, 0x60	; 96
  b4:	11 f0       	breq	.+4      	; 0xba <__vector_24+0x1a>
  b6:	88 36       	cpi	r24, 0x68	; 104
  b8:	21 f4       	brne	.+8      	; 0xc2 <__vector_24+0x22>
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  ba:	85 ec       	ldi	r24, 0xC5	; 197
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c0:	27 c0       	rjmp	.+78     	; 0x110 <__vector_24+0x70>
	}
	else if(status == 0x80) {
  c2:	80 38       	cpi	r24, 0x80	; 128
  c4:	11 f5       	brne	.+68     	; 0x10a <__vector_24+0x6a>
		// Data received, ACK returned
		char command = TWDR;
  c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
		if(command == 'M'){
  ca:	8d 34       	cpi	r24, 0x4D	; 77
  cc:	21 f4       	brne	.+8      	; 0xd6 <__vector_24+0x36>
			PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	16 c0       	rjmp	.+44     	; 0x102 <__vector_24+0x62>
			} else if(command == 'S'){
  d6:	83 35       	cpi	r24, 0x53	; 83
  d8:	21 f4       	brne	.+8      	; 0xe2 <__vector_24+0x42>
			PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	85 b9       	out	0x05, r24	; 5
  e0:	10 c0       	rjmp	.+32     	; 0x102 <__vector_24+0x62>
			} else if (command == 'O') {
  e2:	8f 34       	cpi	r24, 0x4F	; 79
  e4:	71 f4       	brne	.+28     	; 0x102 <__vector_24+0x62>
			PORTB |= (1 << DOOR_LED);  // Turn on door LED
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	85 b9       	out	0x05, r24	; 5
			door_active = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			door_timer = 0;  // Reset timer
  f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <door_timer>
  f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <door_timer+0x1>
  fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <door_timer+0x2>
  fe:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <door_timer+0x3>
		}
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 102:	85 ec       	ldi	r24, 0xC5	; 197
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	03 c0       	rjmp	.+6      	; 0x110 <__vector_24+0x70>
	}
	else {
		// Default - send ACK and continue
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 10a:	85 ec       	ldi	r24, 0xC5	; 197
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
}
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

int main(void){
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED); // Set LED pins as outputs
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	84 b9       	out	0x04, r24	; 4
	I2C_init(8); // Init I2C with address 8
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	0e 94 48 00 	call	0x90	; 0x90 <I2C_init>
	
	while (1){
		// Handle door timing in the main loop
		if (door_active) {
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	88 23       	and	r24, r24
 12e:	e1 f3       	breq	.-8      	; 0x128 <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9c e9       	ldi	r25, 0x9C	; 156
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x1e>
 13a:	00 00       	nop
			_delay_ms(10);  // Small delay for counting
			door_timer += 10;
 13c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <door_timer>
 140:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <door_timer+0x1>
 144:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <door_timer+0x2>
 148:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <door_timer+0x3>
 14c:	0a 96       	adiw	r24, 0x0a	; 10
 14e:	a1 1d       	adc	r26, r1
 150:	b1 1d       	adc	r27, r1
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <door_timer>
 156:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <door_timer+0x1>
 15a:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <door_timer+0x2>
 15e:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <door_timer+0x3>
			
			if (door_timer >= 5000) {  // 5 seconds elapsed
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <door_timer>
 166:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <door_timer+0x1>
 16a:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <door_timer+0x2>
 16e:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <door_timer+0x3>
 172:	88 38       	cpi	r24, 0x88	; 136
 174:	93 41       	sbci	r25, 0x13	; 19
 176:	a1 05       	cpc	r26, r1
 178:	b1 05       	cpc	r27, r1
 17a:	b0 f2       	brcs	.-84     	; 0x128 <main+0xc>
				PORTB &= ~(1 << DOOR_LED);  // Turn off door LED
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
				door_active = 0;
 182:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	d0 cf       	rjmp	.-96     	; 0x128 <main+0xc>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
