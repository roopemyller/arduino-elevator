
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000970  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043f  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000240  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  9e:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buzzer_play>:

volatile uint8_t melody_active = 1;

volatile uint8_t play_emergency = 0;

void buzzer_play(uint16_t frequency) {
  a6:	9c 01       	movw	r18, r24
	// Set PB3 (OC2A) as output
	DDRB |= (1 << PB3);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	84 b9       	out	0x04, r24	; 4

	// Clear previous settings
	TCCR2A = 0;
  ae:	a0 eb       	ldi	r26, 0xB0	; 176
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	1c 92       	st	X, r1
	TCCR2B = 0;
  b4:	e1 eb       	ldi	r30, 0xB1	; 177
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1

	// Set CTC mode (WGM21), toggle OC2A on compare match (COM2A0)
	TCCR2A |= (1 << WGM21) | (1 << COM2A0);
  ba:	8c 91       	ld	r24, X
  bc:	82 64       	ori	r24, 0x42	; 66
  be:	8c 93       	st	X, r24

	// Prescaler = 8, so CS21
	TCCR2B |= (1 << CS21);
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24

	// Calculate and set compare value
	// OCR2A = (F_CPU / (2 * Prescaler * Frequency)) - 1
	OCR2A = (F_CPU / (2UL * 8UL * frequency)) - 1;
  c6:	c9 01       	movw	r24, r18
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	9c 01       	movw	r18, r24
  de:	ad 01       	movw	r20, r26
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	44 1f       	adc	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	44 1f       	adc	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	74 e2       	ldi	r23, 0x24	; 36
  f4:	84 ef       	ldi	r24, 0xF4	; 244
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 102:	08 95       	ret

00000104 <buzzer_stop>:
}

void buzzer_stop() {
	// Disable Timer2
	TCCR2A = 0;
 104:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 108:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Optionally pull the pin low
	PORTB &= ~(1 << PB3);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <blink>:
}


void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	23 c0       	rjmp	.+70     	; 0x160 <blink+0x4c>
		PORTB |= (1 << led_pin); // Turn ON LED
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	08 2e       	mov	r0, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <blink+0x14>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <blink+0x10>
 12c:	92 2b       	or	r25, r18
 12e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	e3 ec       	ldi	r30, 0xC3	; 195
 134:	f9 e0       	ldi	r31, 0x09	; 9
 136:	91 50       	subi	r25, 0x01	; 1
 138:	e0 40       	sbci	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <blink+0x22>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <blink+0x2c>
 140:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
 142:	95 b1       	in	r25, 0x05	; 5
 144:	20 95       	com	r18
 146:	29 23       	and	r18, r25
 148:	25 b9       	out	0x05, r18	; 5
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	33 ec       	ldi	r19, 0xC3	; 195
 14e:	99 e0       	ldi	r25, 0x09	; 9
 150:	21 50       	subi	r18, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <blink+0x3c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <blink+0x46>
 15a:	00 00       	nop
	PORTB &= ~(1 << PB3);
}


void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
 15c:	4f 5f       	subi	r20, 0xFF	; 255
 15e:	5f 4f       	sbci	r21, 0xFF	; 255
 160:	46 17       	cp	r20, r22
 162:	57 07       	cpc	r21, r23
 164:	d4 f2       	brlt	.-76     	; 0x11a <blink+0x6>
		PORTB |= (1 << led_pin); // Turn ON LED
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
		_delay_ms(200);		
	}
}
 166:	08 95       	ret

00000168 <play_emergency_melody>:

void play_emergency_melody() {
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	28 97       	sbiw	r28, 0x08	; 8
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	blink(MOVEMENT_LED, 5);
 180:	65 e0       	ldi	r22, 0x05	; 5
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 8a 00 	call	0x114	; 0x114 <blink>

	uint16_t tones[] = {1000, 800, 400, 600};
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	e0 e0       	ldi	r30, 0x00	; 0
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	de 01       	movw	r26, r28
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <play_emergency_melody+0x2c>
	for (int i = 0; i < 4; i++) {
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <play_emergency_melody+0x6a>
		buzzer_play(tones[i]);
 1a2:	f8 01       	movw	r30, r16
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	8c 0f       	add	r24, r28
 1ae:	9d 1f       	adc	r25, r29
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <buzzer_play>
 1bc:	9f ef       	ldi	r25, 0xFF	; 255
 1be:	23 ed       	ldi	r18, 0xD3	; 211
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	91 50       	subi	r25, 0x01	; 1
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <play_emergency_melody+0x5a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <play_emergency_melody+0x64>
 1cc:	00 00       	nop

void play_emergency_melody() {
	blink(MOVEMENT_LED, 5);

	uint16_t tones[] = {1000, 800, 400, 600};
	for (int i = 0; i < 4; i++) {
 1ce:	0f 5f       	subi	r16, 0xFF	; 255
 1d0:	1f 4f       	sbci	r17, 0xFF	; 255
 1d2:	04 30       	cpi	r16, 0x04	; 4
 1d4:	11 05       	cpc	r17, r1
 1d6:	2c f3       	brlt	.-54     	; 0x1a2 <play_emergency_melody+0x3a>
		buzzer_play(tones[i]);
		_delay_ms(1000);
	}

	buzzer_stop();
 1d8:	0e 94 82 00 	call	0x104	; 0x104 <buzzer_stop>
}
 1dc:	28 96       	adiw	r28, 0x08	; 8
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <TWI_poll_receive>:

void TWI_poll_receive() {
	
	if (TWCR & (1 << TWINT)) {
 1f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f6:	88 23       	and	r24, r24
 1f8:	0c f0       	brlt	.+2      	; 0x1fc <TWI_poll_receive+0xa>
 1fa:	50 c0       	rjmp	.+160    	; 0x29c <TWI_poll_receive+0xaa>
		
		uint8_t status = TWSR & 0xF8;
 1fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 200:	88 7f       	andi	r24, 0xF8	; 248
		
		if(status == 0x60 || status == 0x68) {
 202:	80 36       	cpi	r24, 0x60	; 96
 204:	11 f0       	breq	.+4      	; 0x20a <TWI_poll_receive+0x18>
 206:	88 36       	cpi	r24, 0x68	; 104
 208:	21 f4       	brne	.+8      	; 0x212 <TWI_poll_receive+0x20>
			// SLA+W received, ACK returned
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare to receive		
 20a:	84 ec       	ldi	r24, 0xC4	; 196
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	08 95       	ret
		}
		else if((status == 0x80) || (status == 0x90)) {
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	11 f0       	breq	.+4      	; 0x21a <TWI_poll_receive+0x28>
 216:	80 39       	cpi	r24, 0x90	; 144
 218:	f1 f5       	brne	.+124    	; 0x296 <TWI_poll_receive+0xa4>
			// Data received, ACK returned
			char command = TWDR;
 21a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			
			if(command == 'M'){
 21e:	8d 34       	cpi	r24, 0x4D	; 77
 220:	21 f4       	brne	.+8      	; 0x22a <TWI_poll_receive+0x38>
				PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
 222:	85 b1       	in	r24, 0x05	; 5
 224:	82 60       	ori	r24, 0x02	; 2
 226:	85 b9       	out	0x05, r24	; 5
 228:	32 c0       	rjmp	.+100    	; 0x28e <TWI_poll_receive+0x9c>
			} else if(command == 'S'){
 22a:	83 35       	cpi	r24, 0x53	; 83
 22c:	21 f4       	brne	.+8      	; 0x236 <TWI_poll_receive+0x44>
				PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	85 b9       	out	0x05, r24	; 5
 234:	2c c0       	rjmp	.+88     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'O') {
 236:	8f 34       	cpi	r24, 0x4F	; 79
 238:	21 f4       	brne	.+8      	; 0x242 <TWI_poll_receive+0x50>
				PORTB |= (1 << DOOR_LED);  // Turn ON door LED
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	85 b9       	out	0x05, r24	; 5
 240:	26 c0       	rjmp	.+76     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'C'){
 242:	83 34       	cpi	r24, 0x43	; 67
 244:	21 f4       	brne	.+8      	; 0x24e <TWI_poll_receive+0x5c>
				PORTB &= ~(1 << DOOR_LED); // Turn OFF door LED
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	20 c0       	rjmp	.+64     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'F'){ // Fault state, blink movement LED 3 times
 24e:	86 34       	cpi	r24, 0x46	; 70
 250:	31 f4       	brne	.+12     	; 0x25e <TWI_poll_receive+0x6c>
				blink(MOVEMENT_LED, 3);
 252:	63 e0       	ldi	r22, 0x03	; 3
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 8a 00 	call	0x114	; 0x114 <blink>
 25c:	18 c0       	rjmp	.+48     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'E') { // Emergency state
 25e:	85 34       	cpi	r24, 0x45	; 69
 260:	31 f4       	brne	.+12     	; 0x26e <TWI_poll_receive+0x7c>
				blink(MOVEMENT_LED, 3);
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 8a 00 	call	0x114	; 0x114 <blink>
 26c:	10 c0       	rjmp	.+32     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'P') {
 26e:	80 35       	cpi	r24, 0x50	; 80
 270:	39 f4       	brne	.+14     	; 0x280 <TWI_poll_receive+0x8e>
				PORTB |= (1 << DOOR_LED);  // Turn ON door LED (open door)
 272:	85 b1       	in	r24, 0x05	; 5
 274:	84 60       	ori	r24, 0x04	; 4
 276:	85 b9       	out	0x05, r24	; 5
				play_emergency = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 27e:	07 c0       	rjmp	.+14     	; 0x28e <TWI_poll_receive+0x9c>
			} else if (command == 'X') {
 280:	88 35       	cpi	r24, 0x58	; 88
 282:	29 f4       	brne	.+10     	; 0x28e <TWI_poll_receive+0x9c>
				play_emergency = 0;
 284:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
				PORTB &= ~(1 << DOOR_LED); // Automatically close the door
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8b 7f       	andi	r24, 0xFB	; 251
 28c:	85 b9       	out	0x05, r24	; 5
			}
			
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare for next byte
 28e:	84 ec       	ldi	r24, 0xC4	; 196
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		
		if(status == 0x60 || status == 0x68) {
			// SLA+W received, ACK returned
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare to receive		
		}
		else if((status == 0x80) || (status == 0x90)) {
 294:	08 95       	ret
			
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare for next byte
		}
		else {
			// Default - send ACK and continue
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Safe default
 296:	84 ec       	ldi	r24, 0xC4	; 196
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29c:	08 95       	ret

0000029e <main>:
}

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 29e:	84 b1       	in	r24, 0x04	; 4
 2a0:	86 60       	ori	r24, 0x06	; 6
 2a2:	84 b9       	out	0x04, r24	; 4
	
	// TWI Init
	TWAR = (SLAVE_ADDRESS << 1);
 2a4:	8e ea       	ldi	r24, 0xAE	; 174
 2a6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1 << TWEN) | (1 << TWEA);
 2aa:	84 e4       	ldi	r24, 0x44	; 68
 2ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (1){
		TWI_poll_receive();
 2b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TWI_poll_receive>
		
		if (play_emergency) {
 2b4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2b8:	88 23       	and	r24, r24
 2ba:	d1 f3       	breq	.-12     	; 0x2b0 <main+0x12>
			play_emergency_melody();
 2bc:	0e 94 b4 00 	call	0x168	; 0x168 <play_emergency_melody>
 2c0:	f7 cf       	rjmp	.-18     	; 0x2b0 <main+0x12>

000002c2 <__udivmodsi4>:
 2c2:	a1 e2       	ldi	r26, 0x21	; 33
 2c4:	1a 2e       	mov	r1, r26
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	fd 01       	movw	r30, r26
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__udivmodsi4_ep>

000002ce <__udivmodsi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	ee 1f       	adc	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	a2 17       	cp	r26, r18
 2d8:	b3 07       	cpc	r27, r19
 2da:	e4 07       	cpc	r30, r20
 2dc:	f5 07       	cpc	r31, r21
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__udivmodsi4_ep>
 2e0:	a2 1b       	sub	r26, r18
 2e2:	b3 0b       	sbc	r27, r19
 2e4:	e4 0b       	sbc	r30, r20
 2e6:	f5 0b       	sbc	r31, r21

000002e8 <__udivmodsi4_ep>:
 2e8:	66 1f       	adc	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	1a 94       	dec	r1
 2f2:	69 f7       	brne	.-38     	; 0x2ce <__udivmodsi4_loop>
 2f4:	60 95       	com	r22
 2f6:	70 95       	com	r23
 2f8:	80 95       	com	r24
 2fa:	90 95       	com	r25
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	bd 01       	movw	r22, r26
 302:	cf 01       	movw	r24, r30
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
