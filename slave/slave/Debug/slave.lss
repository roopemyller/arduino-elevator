
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000973  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000440  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  9e:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buzzer_play>:
volatile uint8_t play_emergency = 0; // flag for emergency

// Function for buzzer to play a frequency
void buzzer_play(uint16_t frequency) {
	// Set BUZZER/PB3 (Digital pin 11) as output
	DDRB |= (1 << BUZZER);
  a6:	94 b1       	in	r25, 0x04	; 4
  a8:	98 60       	ori	r25, 0x08	; 8
  aa:	94 b9       	out	0x04, r25	; 4

	// Clear previous TIMER settings just in case
	// We selected the timer 2 because it is 8-bit, like the example in Exc5
	TCCR2A = 0; // This controls the comparison stuff
  ac:	a0 eb       	ldi	r26, 0xB0	; 176
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	1c 92       	st	X, r1
	TCCR2B = 0; // This controls the waveform generation
  b2:	e1 eb       	ldi	r30, 0xB1	; 177
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1

	// Set CTC (clear timer on compare) mode (WGM21, waveform generation mode) and toggle OC2A (output compare 2A) on compare match (COM2A0)
	// Basically counts up to OC2A register (this is initialized later in the code)
	TCCR2A |= (1 << WGM21) | (1 << COM2A0);
  b8:	9c 91       	ld	r25, X
  ba:	92 64       	ori	r25, 0x42	; 66
  bc:	9c 93       	st	X, r25

	// This sets the 8-bit timer (Timer 2) prescaler as 128, so CS22 and CS20 (clock select) uses the system clock divided by the prescaler 128 (1,0,1)
	TCCR2B |= (1 << CS22) | (1 << CS20);
  be:	90 81       	ld	r25, Z
  c0:	95 60       	ori	r25, 0x05	; 5
  c2:	90 83       	st	Z, r25

	// Calculate and set compare value
	OCR2A = (F_CPU/(2 * 128 * frequency)) - 1;
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	38 2f       	mov	r19, r24
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	74 e2       	ldi	r23, 0x24	; 36
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__udivmodsi4>
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  e0:	08 95       	ret

000000e2 <buzzer_stop>:

// Function to set buzzer to stop
void buzzer_stop() {
	// Disable Timer2
	// Reset the timers again.
	TCCR2A = 0;
  e2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
  e6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Pull the pin low just in case
	PORTB &= ~(1 << BUZZER);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret

000000f2 <blink>:

// Function to blink LED times, times
void blink(uint8_t led_pin, int times){
	
	// For loop, each time LED is first turned ON then OFF
	for (int i = 0; i < times; i++){
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	23 c0       	rjmp	.+70     	; 0x13e <blink+0x4c>
		PORTB |= (1 << led_pin); // Turn ON LED
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <blink+0x14>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <blink+0x10>
 10a:	92 2b       	or	r25, r18
 10c:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	e3 ec       	ldi	r30, 0xC3	; 195
 112:	f9 e0       	ldi	r31, 0x09	; 9
 114:	91 50       	subi	r25, 0x01	; 1
 116:	e0 40       	sbci	r30, 0x00	; 0
 118:	f0 40       	sbci	r31, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <blink+0x22>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <blink+0x2c>
 11e:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
 120:	95 b1       	in	r25, 0x05	; 5
 122:	20 95       	com	r18
 124:	29 23       	and	r18, r25
 126:	25 b9       	out	0x05, r18	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	33 ec       	ldi	r19, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <blink+0x3c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <blink+0x46>
 138:	00 00       	nop

// Function to blink LED times, times
void blink(uint8_t led_pin, int times){
	
	// For loop, each time LED is first turned ON then OFF
	for (int i = 0; i < times; i++){
 13a:	4f 5f       	subi	r20, 0xFF	; 255
 13c:	5f 4f       	sbci	r21, 0xFF	; 255
 13e:	46 17       	cp	r20, r22
 140:	57 07       	cpc	r21, r23
 142:	d4 f2       	brlt	.-76     	; 0xf8 <blink+0x6>
		PORTB |= (1 << led_pin); // Turn ON LED
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
		_delay_ms(200);
	}
}
 144:	08 95       	ret

00000146 <play_emergency_melody>:

// Function to play emergency melody
void play_emergency_melody() {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	28 97       	sbiw	r28, 0x08	; 8
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
	
	// Blink movement led for fun effect :)
	blink(MOVEMENT_LED, 5);
 15e:	65 e0       	ldi	r22, 0x05	; 5
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 79 00 	call	0xf2	; 0xf2 <blink>

	// frequenzies for buzzer
	uint16_t freqs[] = {2500, 2000, 3250, 2750};
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	de 01       	movw	r26, r28
 170:	11 96       	adiw	r26, 0x01	; 1
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <play_emergency_melody+0x2c>
	
	// for loop to go through the frequenzies
	for (int i = 0; i < 4; i++) {
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	18 c0       	rjmp	.+48     	; 0x1b0 <play_emergency_melody+0x6a>
		buzzer_play(freqs[i]);
 180:	f8 01       	movw	r30, r16
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	8c 0f       	add	r24, r28
 18c:	9d 1f       	adc	r25, r29
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	80 81       	ld	r24, Z
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <buzzer_play>
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	24 e3       	ldi	r18, 0x34	; 52
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <play_emergency_melody+0x5a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <play_emergency_melody+0x64>
 1aa:	00 00       	nop

	// frequenzies for buzzer
	uint16_t freqs[] = {2500, 2000, 3250, 2750};
	
	// for loop to go through the frequenzies
	for (int i = 0; i < 4; i++) {
 1ac:	0f 5f       	subi	r16, 0xFF	; 255
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
 1b0:	04 30       	cpi	r16, 0x04	; 4
 1b2:	11 05       	cpc	r17, r1
 1b4:	2c f3       	brlt	.-54     	; 0x180 <play_emergency_melody+0x3a>
		buzzer_play(freqs[i]);
		_delay_ms(250);
	}
	buzzer_stop();
 1b6:	0e 94 71 00 	call	0xe2	; 0xe2 <buzzer_stop>
}
 1ba:	28 96       	adiw	r28, 0x08	; 8
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <TWI_receive_command>:

// Function to receive command from master
void TWI_receive_command() {
	
	if (TWCR & (1 << TWINT)) {
 1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	88 23       	and	r24, r24
 1d6:	0c f0       	brlt	.+2      	; 0x1da <TWI_receive_command+0xa>
 1d8:	50 c0       	rjmp	.+160    	; 0x27a <TWI_receive_command+0xaa>
		
		// Get the status code	
		uint8_t status = TWSR & 0xF8;
 1da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1de:	88 7f       	andi	r24, 0xF8	; 248
		
		if(status == 0x60 || status == 0x68) {
 1e0:	80 36       	cpi	r24, 0x60	; 96
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <TWI_receive_command+0x18>
 1e4:	88 36       	cpi	r24, 0x68	; 104
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <TWI_receive_command+0x20>
			// SLA+W received, ACK returned
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare to receive		
 1e8:	84 ec       	ldi	r24, 0xC4	; 196
 1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ee:	08 95       	ret
		}
		else if((status == 0x80) || (status == 0x90)) {
 1f0:	80 38       	cpi	r24, 0x80	; 128
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <TWI_receive_command+0x28>
 1f4:	80 39       	cpi	r24, 0x90	; 144
 1f6:	f1 f5       	brne	.+124    	; 0x274 <TWI_receive_command+0xa4>
			// Data received, ACK returned
			
			// Get the sent command
			char command = TWDR;
 1f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			
			// Check what command sent
			if(command == 'M'){ // Movement, Turn ON movement LED
 1fc:	8d 34       	cpi	r24, 0x4D	; 77
 1fe:	21 f4       	brne	.+8      	; 0x208 <TWI_receive_command+0x38>
				PORTB |= (1 << MOVEMENT_LED); 
 200:	85 b1       	in	r24, 0x05	; 5
 202:	82 60       	ori	r24, 0x02	; 2
 204:	85 b9       	out	0x05, r24	; 5
 206:	32 c0       	rjmp	.+100    	; 0x26c <TWI_receive_command+0x9c>
			} else if(command == 'S'){ // Stop, Turn OFF movement LED
 208:	83 35       	cpi	r24, 0x53	; 83
 20a:	21 f4       	brne	.+8      	; 0x214 <TWI_receive_command+0x44>
				PORTB &= ~(1 << MOVEMENT_LED); 
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	85 b9       	out	0x05, r24	; 5
 212:	2c c0       	rjmp	.+88     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'O') { // Open door, Turn ON door LED
 214:	8f 34       	cpi	r24, 0x4F	; 79
 216:	21 f4       	brne	.+8      	; 0x220 <TWI_receive_command+0x50>
				PORTB |= (1 << DOOR_LED);  
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	26 c0       	rjmp	.+76     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'C'){ // Close door, Turn OFF door LED
 220:	83 34       	cpi	r24, 0x43	; 67
 222:	21 f4       	brne	.+8      	; 0x22c <TWI_receive_command+0x5c>
				PORTB &= ~(1 << DOOR_LED); 
 224:	85 b1       	in	r24, 0x05	; 5
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	85 b9       	out	0x05, r24	; 5
 22a:	20 c0       	rjmp	.+64     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'F'){ // Fault state, blink movement LED 3 times
 22c:	86 34       	cpi	r24, 0x46	; 70
 22e:	31 f4       	brne	.+12     	; 0x23c <TWI_receive_command+0x6c>
				blink(MOVEMENT_LED, 3);
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 79 00 	call	0xf2	; 0xf2 <blink>
 23a:	18 c0       	rjmp	.+48     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'E') { // Emergency state, blink movement LED 3 times
 23c:	85 34       	cpi	r24, 0x45	; 69
 23e:	31 f4       	brne	.+12     	; 0x24c <TWI_receive_command+0x7c>
				blink(MOVEMENT_LED, 3);
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 79 00 	call	0xf2	; 0xf2 <blink>
 24a:	10 c0       	rjmp	.+32     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'P') { // Play Emergency Melody, Turn ON door LED (open door)
 24c:	80 35       	cpi	r24, 0x50	; 80
 24e:	39 f4       	brne	.+14     	; 0x25e <TWI_receive_command+0x8e>
				PORTB |= (1 << DOOR_LED);  
 250:	85 b1       	in	r24, 0x05	; 5
 252:	84 60       	ori	r24, 0x04	; 4
 254:	85 b9       	out	0x05, r24	; 5
				play_emergency = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 25c:	07 c0       	rjmp	.+14     	; 0x26c <TWI_receive_command+0x9c>
			} else if (command == 'X') { // Stop Emergency Melody, close the door
 25e:	88 35       	cpi	r24, 0x58	; 88
 260:	29 f4       	brne	.+10     	; 0x26c <TWI_receive_command+0x9c>
				play_emergency = 0;
 262:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
				PORTB &= ~(1 << DOOR_LED); // Automatically close the door
 266:	85 b1       	in	r24, 0x05	; 5
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	85 b9       	out	0x05, r24	; 5
			}
			
			// Prepare for next byte
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); 
 26c:	84 ec       	ldi	r24, 0xC4	; 196
 26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		
		if(status == 0x60 || status == 0x68) {
			// SLA+W received, ACK returned
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); // Prepare to receive		
		}
		else if((status == 0x80) || (status == 0x90)) {
 272:	08 95       	ret
			// Prepare for next byte
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT); 
		}
		else {
			// Default - send ACK and continue
			TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
 274:	84 ec       	ldi	r24, 0xC4	; 196
 276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27a:	08 95       	ret

0000027c <main>:
}

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 27c:	84 b1       	in	r24, 0x04	; 4
 27e:	86 60       	ori	r24, 0x06	; 6
 280:	84 b9       	out	0x04, r24	; 4
	
	// TWI Init
	TWAR = (SLAVE_ADDRESS << 1);
 282:	8e ea       	ldi	r24, 0xAE	; 174
 284:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1 << TWEN) | (1 << TWEA);
 288:	84 e4       	ldi	r24, 0x44	; 68
 28a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Inside main while loop
	// Receive a command from TWI
	// If play_emergency activated, play emergency
	while (1){
		TWI_receive_command();	
 28e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <TWI_receive_command>
		if (play_emergency) {
 292:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 296:	88 23       	and	r24, r24
 298:	d1 f3       	breq	.-12     	; 0x28e <main+0x12>
			play_emergency_melody();
 29a:	0e 94 a3 00 	call	0x146	; 0x146 <play_emergency_melody>
 29e:	f7 cf       	rjmp	.-18     	; 0x28e <main+0x12>

000002a0 <__udivmodsi4>:
 2a0:	a1 e2       	ldi	r26, 0x21	; 33
 2a2:	1a 2e       	mov	r1, r26
 2a4:	aa 1b       	sub	r26, r26
 2a6:	bb 1b       	sub	r27, r27
 2a8:	fd 01       	movw	r30, r26
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <__udivmodsi4_ep>

000002ac <__udivmodsi4_loop>:
 2ac:	aa 1f       	adc	r26, r26
 2ae:	bb 1f       	adc	r27, r27
 2b0:	ee 1f       	adc	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	a2 17       	cp	r26, r18
 2b6:	b3 07       	cpc	r27, r19
 2b8:	e4 07       	cpc	r30, r20
 2ba:	f5 07       	cpc	r31, r21
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__udivmodsi4_ep>
 2be:	a2 1b       	sub	r26, r18
 2c0:	b3 0b       	sbc	r27, r19
 2c2:	e4 0b       	sbc	r30, r20
 2c4:	f5 0b       	sbc	r31, r21

000002c6 <__udivmodsi4_ep>:
 2c6:	66 1f       	adc	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	1a 94       	dec	r1
 2d0:	69 f7       	brne	.-38     	; 0x2ac <__udivmodsi4_loop>
 2d2:	60 95       	com	r22
 2d4:	70 95       	com	r23
 2d6:	80 95       	com	r24
 2d8:	90 95       	com	r25
 2da:	9b 01       	movw	r18, r22
 2dc:	ac 01       	movw	r20, r24
 2de:	bd 01       	movw	r22, r26
 2e0:	cf 01       	movw	r24, r30
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
