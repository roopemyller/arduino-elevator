
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000808  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e7  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_24>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TWI_init>:
#include <stdio.h>
#include <avr/interrupt.h>

void TWI_init(){
	// Init the TWI Slave
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // Enable TWI, ACK and interrupt
  80:	85 e4       	ldi	r24, 0x45	; 69
  82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
  86:	8e ea       	ldi	r24, 0xAE	; 174
  88:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	sei();
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <blink>:
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	23 c0       	rjmp	.+70     	; 0xdc <blink+0x4c>
		PORTB |= (1 << led_pin); // Turn ON LED
  96:	95 b1       	in	r25, 0x05	; 5
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <blink+0x14>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <blink+0x10>
  a8:	92 2b       	or	r25, r18
  aa:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	e3 ec       	ldi	r30, 0xC3	; 195
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	91 50       	subi	r25, 0x01	; 1
  b4:	e0 40       	sbci	r30, 0x00	; 0
  b6:	f0 40       	sbci	r31, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <blink+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <blink+0x2c>
  bc:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	25 b9       	out	0x05, r18	; 5
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	33 ec       	ldi	r19, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <blink+0x3c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <blink+0x46>
  d6:	00 00       	nop
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
	sei();
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	46 17       	cp	r20, r22
  de:	57 07       	cpc	r21, r23
  e0:	d4 f2       	brlt	.-76     	; 0x96 <blink+0x6>
		PORTB |= (1 << led_pin); // Turn ON LED
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
		_delay_ms(200);		
	}
}
  e2:	08 95       	ret

000000e4 <__vector_24>:


ISR(TWI_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	// Get status code
	uint8_t twi_status = (TWSR & 0xF8);
 106:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 10a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(twi_status == 0x60 || twi_status == 0x68) {
 10c:	80 36       	cpi	r24, 0x60	; 96
 10e:	11 f0       	breq	.+4      	; 0x114 <__vector_24+0x30>
 110:	88 36       	cpi	r24, 0x68	; 104
 112:	21 f4       	brne	.+8      	; 0x11c <__vector_24+0x38>
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 114:	85 ec       	ldi	r24, 0xC5	; 197
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11a:	2c c0       	rjmp	.+88     	; 0x174 <__vector_24+0x90>
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 11c:	80 38       	cpi	r24, 0x80	; 128
 11e:	11 f0       	breq	.+4      	; 0x124 <__vector_24+0x40>
 120:	80 39       	cpi	r24, 0x90	; 144
 122:	29 f5       	brne	.+74     	; 0x16e <__vector_24+0x8a>
		// Data received, ACK returned
		char command = TWDR;
 124:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
		if(command == 'M'){
 128:	8d 34       	cpi	r24, 0x4D	; 77
 12a:	21 f4       	brne	.+8      	; 0x134 <__vector_24+0x50>
			PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	85 b9       	out	0x05, r24	; 5
 132:	19 c0       	rjmp	.+50     	; 0x166 <__vector_24+0x82>
		} else if(command == 'S'){
 134:	83 35       	cpi	r24, 0x53	; 83
 136:	21 f4       	brne	.+8      	; 0x140 <__vector_24+0x5c>
			PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	13 c0       	rjmp	.+38     	; 0x166 <__vector_24+0x82>
		} else if (command == 'O') {
 140:	8f 34       	cpi	r24, 0x4F	; 79
 142:	21 f4       	brne	.+8      	; 0x14c <__vector_24+0x68>
			PORTB |= (1 << DOOR_LED);  // Turn ON door LED
 144:	85 b1       	in	r24, 0x05	; 5
 146:	84 60       	ori	r24, 0x04	; 4
 148:	85 b9       	out	0x05, r24	; 5
 14a:	0d c0       	rjmp	.+26     	; 0x166 <__vector_24+0x82>
		} else if (command == 'C'){
 14c:	83 34       	cpi	r24, 0x43	; 67
 14e:	21 f4       	brne	.+8      	; 0x158 <__vector_24+0x74>
			PORTB &= ~(1 << DOOR_LED); // Turn OFF door LED
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	85 b9       	out	0x05, r24	; 5
 156:	07 c0       	rjmp	.+14     	; 0x166 <__vector_24+0x82>
		} else if (command == 'F'){ // Fault state, blink movement LED 3 times
 158:	86 34       	cpi	r24, 0x46	; 70
 15a:	29 f4       	brne	.+10     	; 0x166 <__vector_24+0x82>
			blink(MOVEMENT_LED, 3);
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 48 00 	call	0x90	; 0x90 <blink>
		}
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 166:	85 ec       	ldi	r24, 0xC5	; 197
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	if(twi_status == 0x60 || twi_status == 0x68) {
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 16c:	03 c0       	rjmp	.+6      	; 0x174 <__vector_24+0x90>
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else {
		// Default - send ACK and continue
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 16e:	85 ec       	ldi	r24, 0xC5	; 197
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 196:	84 b1       	in	r24, 0x04	; 4
 198:	86 60       	ori	r24, 0x06	; 6
 19a:	84 b9       	out	0x04, r24	; 4
	
	// Init TWI, will use ISR
	TWI_init();
 19c:	0e 94 40 00 	call	0x80	; 0x80 <TWI_init>
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0xa>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
