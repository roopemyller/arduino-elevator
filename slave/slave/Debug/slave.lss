
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000945  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000425  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026b  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_24>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  8e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <buzzer_play>:

volatile uint8_t melody_active = 1;

// Function to play a single tone on the buzzer
void buzzer_play(uint16_t frequency, uint8_t timer_config) {
    TCCR2A = (1 << WGM21) | (1 << COM2A0); // CTC mode
  96:	22 e4       	ldi	r18, 0x42	; 66
  98:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = timer_config; // Set prescaler
  9c:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = F_CPU / (2 * frequency * (timer_config & 0x07)) - 1; // Calculate OCR2A
  a0:	67 70       	andi	r22, 0x07	; 7
  a2:	9c 01       	movw	r18, r24
  a4:	62 9f       	mul	r22, r18
  a6:	c0 01       	movw	r24, r0
  a8:	63 9f       	mul	r22, r19
  aa:	90 0d       	add	r25, r0
  ac:	11 24       	eor	r1, r1
  ae:	9c 01       	movw	r18, r24
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e2       	ldi	r23, 0x24	; 36
  bc:	84 ef       	ldi	r24, 0xF4	; 244
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    DDRD |= (1 << BUZZER_PIN);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	08 95       	ret

000000d2 <buzzer_stop>:
}

// Function to stop the buzzer
void buzzer_stop() {
    TCCR2A &= ~((1 << COM2A1) | (1 << COM2A0) | (1 << WGM21)); // Disable compare output and CTC
  d2:	e0 eb       	ldi	r30, 0xB0	; 176
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8d 73       	andi	r24, 0x3D	; 61
  da:	80 83       	st	Z, r24
    TCCR2B = 0;
  dc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    DDRD &= ~(1 << BUZZER_PIN);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	87 7f       	andi	r24, 0xF7	; 247
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	08 95       	ret

000000e8 <TWI_init>:
}

void TWI_init(){
	// Init the TWI Slave
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // Enable TWI, ACK and interrupt
  e8:	85 e4       	ldi	r24, 0x45	; 69
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
  ee:	8e ea       	ldi	r24, 0xAE	; 174
  f0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <blink>:
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	23 c0       	rjmp	.+70     	; 0x144 <blink+0x4c>
		PORTB |= (1 << led_pin); // Turn ON LED
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	08 2e       	mov	r0, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <blink+0x14>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <blink+0x10>
 110:	92 2b       	or	r25, r18
 112:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	e3 ec       	ldi	r30, 0xC3	; 195
 118:	f9 e0       	ldi	r31, 0x09	; 9
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <blink+0x22>
 122:	00 c0       	rjmp	.+0      	; 0x124 <blink+0x2c>
 124:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
 126:	95 b1       	in	r25, 0x05	; 5
 128:	20 95       	com	r18
 12a:	29 23       	and	r18, r25
 12c:	25 b9       	out	0x05, r18	; 5
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	33 ec       	ldi	r19, 0xC3	; 195
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <blink+0x3c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <blink+0x46>
 13e:	00 00       	nop
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
	sei();
}

void blink(uint8_t led_pin, int times){
	for (int i = 0; i < times; i++){
 140:	4f 5f       	subi	r20, 0xFF	; 255
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	46 17       	cp	r20, r22
 146:	57 07       	cpc	r21, r23
 148:	d4 f2       	brlt	.-76     	; 0xfe <blink+0x6>
		PORTB |= (1 << led_pin); // Turn ON LED
		_delay_ms(200);
		PORTB &= ~(1 << led_pin); // Turn OFF LED
		_delay_ms(200);		
	}
}
 14a:	08 95       	ret

0000014c <play_emergency_melody>:

void play_emergency_melody() {
    melody_active = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    while (melody_active) {
 152:	14 c0       	rjmp	.+40     	; 0x17c <play_emergency_melody+0x30>
        buzzer_play(NOTE_C4, (1 << CS21)); // Example: C4 with prescaler 8
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <buzzer_play>
        buzzer_play(NOTE_D4, (1 << CS21));
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	86 e2       	ldi	r24, 0x26	; 38
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 4b 00 	call	0x96	; 0x96 <buzzer_play>
        buzzer_play(NOTE_E4, (1 << CS21));
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	8a e4       	ldi	r24, 0x4A	; 74
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <buzzer_play>
        buzzer_play(NOTE_F4, (1 << CS21));
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	8d e5       	ldi	r24, 0x5D	; 93
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 4b 00 	call	0x96	; 0x96 <buzzer_play>
	}
}

void play_emergency_melody() {
    melody_active = 1;
    while (melody_active) {
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	81 11       	cpse	r24, r1
 182:	e8 cf       	rjmp	.-48     	; 0x154 <play_emergency_melody+0x8>
        buzzer_play(NOTE_D4, (1 << CS21));
        buzzer_play(NOTE_E4, (1 << CS21));
        buzzer_play(NOTE_F4, (1 << CS21));
        // Loop continues until melody_active is set to 0
    }
    buzzer_stop();
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <buzzer_stop>
 188:	08 95       	ret

0000018a <__vector_24>:
}

ISR(TWI_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	// Get status code
	uint8_t twi_status = (TWSR & 0xF8);
 1ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(twi_status == 0x60 || twi_status == 0x68) {
 1b2:	80 36       	cpi	r24, 0x60	; 96
 1b4:	11 f0       	breq	.+4      	; 0x1ba <__vector_24+0x30>
 1b6:	88 36       	cpi	r24, 0x68	; 104
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <__vector_24+0x38>
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1ba:	85 ec       	ldi	r24, 0xC5	; 197
 1bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	44 c0       	rjmp	.+136    	; 0x24a <__vector_24+0xc0>
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 1c2:	80 38       	cpi	r24, 0x80	; 128
 1c4:	11 f0       	breq	.+4      	; 0x1ca <__vector_24+0x40>
 1c6:	80 39       	cpi	r24, 0x90	; 144
 1c8:	e9 f5       	brne	.+122    	; 0x244 <__vector_24+0xba>
		// Data received, ACK returned
		char command = TWDR;
 1ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
		if(command == 'M'){
 1ce:	8d 34       	cpi	r24, 0x4D	; 77
 1d0:	21 f4       	brne	.+8      	; 0x1da <__vector_24+0x50>
			PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 b9       	out	0x05, r24	; 5
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__vector_24+0xb2>
		} else if(command == 'S'){
 1da:	83 35       	cpi	r24, 0x53	; 83
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <__vector_24+0x5c>
			PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__vector_24+0xb2>
		} else if (command == 'O') {
 1e6:	8f 34       	cpi	r24, 0x4F	; 79
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <__vector_24+0x68>
			PORTB |= (1 << DOOR_LED);  // Turn ON door LED
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__vector_24+0xb2>
		} else if (command == 'C'){
 1f2:	83 34       	cpi	r24, 0x43	; 67
 1f4:	21 f4       	brne	.+8      	; 0x1fe <__vector_24+0x74>
			PORTB &= ~(1 << DOOR_LED); // Turn OFF door LED
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <__vector_24+0xb2>
		} else if (command == 'F'){ // Fault state, blink movement LED 3 times
 1fe:	86 34       	cpi	r24, 0x46	; 70
 200:	31 f4       	brne	.+12     	; 0x20e <__vector_24+0x84>
			blink(MOVEMENT_LED, 3);
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 7c 00 	call	0xf8	; 0xf8 <blink>
 20c:	17 c0       	rjmp	.+46     	; 0x23c <__vector_24+0xb2>
        } else if (command == 'E') { // Emergency state
 20e:	85 34       	cpi	r24, 0x45	; 69
 210:	31 f4       	brne	.+12     	; 0x21e <__vector_24+0x94>
            blink(MOVEMENT_LED, 3);
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 7c 00 	call	0xf8	; 0xf8 <blink>
 21c:	0f c0       	rjmp	.+30     	; 0x23c <__vector_24+0xb2>
        } else if (command == 'O') {
 21e:	8f 34       	cpi	r24, 0x4F	; 79
 220:	31 f4       	brne	.+12     	; 0x22e <__vector_24+0xa4>
            PORTB |= (1 << DOOR_LED);  // Turn ON door LED (open door)
 222:	85 b1       	in	r24, 0x05	; 5
 224:	84 60       	ori	r24, 0x04	; 4
 226:	85 b9       	out	0x05, r24	; 5
            play_emergency_melody();   // Start the infinite melody loop
 228:	0e 94 a6 00 	call	0x14c	; 0x14c <play_emergency_melody>
 22c:	07 c0       	rjmp	.+14     	; 0x23c <__vector_24+0xb2>
        } else if (command == 'X') {
 22e:	88 35       	cpi	r24, 0x58	; 88
 230:	29 f4       	brne	.+10     	; 0x23c <__vector_24+0xb2>
            melody_active = 0;          // Stop the melody loop
 232:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
            PORTB &= ~(1 << DOOR_LED); // Automatically close the door
 236:	85 b1       	in	r24, 0x05	; 5
 238:	8b 7f       	andi	r24, 0xFB	; 251
 23a:	85 b9       	out	0x05, r24	; 5
        }
  		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 23c:	85 ec       	ldi	r24, 0xC5	; 197
 23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	if(twi_status == 0x60 || twi_status == 0x68) {
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
 242:	03 c0       	rjmp	.+6      	; 0x24a <__vector_24+0xc0>
  		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else {
		// Default - send ACK and continue
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 244:	85 ec       	ldi	r24, 0xC5	; 197
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <main>:

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 26c:	84 b1       	in	r24, 0x04	; 4
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	84 b9       	out	0x04, r24	; 4
    
    // Set Buzzer pin as output
    DDRD |= (1 << BUZZER_PIN);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	88 60       	ori	r24, 0x08	; 8
 276:	8a b9       	out	0x0a, r24	; 10
	
	// Init TWI, will use ISR
	TWI_init();
 278:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_init>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x10>

0000027e <__udivmodsi4>:
 27e:	a1 e2       	ldi	r26, 0x21	; 33
 280:	1a 2e       	mov	r1, r26
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	fd 01       	movw	r30, r26
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__udivmodsi4_ep>

0000028a <__udivmodsi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	ee 1f       	adc	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a2 17       	cp	r26, r18
 294:	b3 07       	cpc	r27, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__udivmodsi4_ep>
 29c:	a2 1b       	sub	r26, r18
 29e:	b3 0b       	sbc	r27, r19
 2a0:	e4 0b       	sbc	r30, r20
 2a2:	f5 0b       	sbc	r31, r21

000002a4 <__udivmodsi4_ep>:
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a 94       	dec	r1
 2ae:	69 f7       	brne	.-38     	; 0x28a <__udivmodsi4_loop>
 2b0:	60 95       	com	r22
 2b2:	70 95       	com	r23
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	bd 01       	movw	r22, r26
 2be:	cf 01       	movw	r24, r30
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
