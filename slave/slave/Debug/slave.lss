
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e5  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000099  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_24>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 00 	call	0x106	; 0x106 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TWI_init>:
volatile uint8_t door_active = 0;
*/

void TWI_init(){
	// Init the TWI Slave
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWIE); // Enable TWI, ACK and interrupt
  80:	85 e4       	ldi	r24, 0x45	; 69
  82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWAR = (SLAVE_ADDRESS << 1); // Set slave address
  86:	8e ea       	ldi	r24, 0xAE	; 174
  88:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	sei();
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <__vector_24>:
}

ISR(TWI_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	// Get status code
	uint8_t twi_status = (TWSR & 0xF8);
  9c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(twi_status == 0x60 || twi_status == 0x68) {
  a2:	80 36       	cpi	r24, 0x60	; 96
  a4:	11 f0       	breq	.+4      	; 0xaa <__vector_24+0x1a>
  a6:	88 36       	cpi	r24, 0x68	; 104
  a8:	21 f4       	brne	.+8      	; 0xb2 <__vector_24+0x22>
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  aa:	85 ec       	ldi	r24, 0xC5	; 197
  ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	24 c0       	rjmp	.+72     	; 0xfa <__vector_24+0x6a>
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
  b2:	80 38       	cpi	r24, 0x80	; 128
  b4:	11 f0       	breq	.+4      	; 0xba <__vector_24+0x2a>
  b6:	80 39       	cpi	r24, 0x90	; 144
  b8:	e9 f4       	brne	.+58     	; 0xf4 <__vector_24+0x64>
		// Data received, ACK returned
		char command = TWDR;
  ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
		if(command == 'M'){
  be:	8d 34       	cpi	r24, 0x4D	; 77
  c0:	21 f4       	brne	.+8      	; 0xca <__vector_24+0x3a>
			PORTB |= (1 << MOVEMENT_LED); // Turn ON movement LED
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	11 c0       	rjmp	.+34     	; 0xec <__vector_24+0x5c>
		} else if(command == 'S'){
  ca:	83 35       	cpi	r24, 0x53	; 83
  cc:	21 f4       	brne	.+8      	; 0xd6 <__vector_24+0x46>
			PORTB &= ~(1 << MOVEMENT_LED); // Turn OFF movement LED
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	0b c0       	rjmp	.+22     	; 0xec <__vector_24+0x5c>
		} else if (command == 'O') {
  d6:	8f 34       	cpi	r24, 0x4F	; 79
  d8:	21 f4       	brne	.+8      	; 0xe2 <__vector_24+0x52>
			PORTB |= (1 << DOOR_LED);  // Turn ON door LED
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 b9       	out	0x05, r24	; 5
  e0:	05 c0       	rjmp	.+10     	; 0xec <__vector_24+0x5c>
			// door_active = 1;
			// door_timer = 0;  // Reset timer
		} else if (command == 'C'){
  e2:	83 34       	cpi	r24, 0x43	; 67
  e4:	19 f4       	brne	.+6      	; 0xec <__vector_24+0x5c>
			PORTB &= ~(1 << DOOR_LED); // Turn OFF door LED
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	85 b9       	out	0x05, r24	; 5
		}
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  ec:	85 ec       	ldi	r24, 0xC5	; 197
  ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	if(twi_status == 0x60 || twi_status == 0x68) {
		// SLA+W received, ACK returned
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else if((twi_status == 0x80) || (twi_status == 0x90)) {
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_24+0x6a>
		
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
	}
	else {
		// Default - send ACK and continue
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  f4:	85 ec       	ldi	r24, 0xC5	; 197
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <main>:

int main(void){
	
	// Set LED pins as outputs
	DDRB |= (1 << MOVEMENT_LED) | (1 << DOOR_LED);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	86 60       	ori	r24, 0x06	; 6
 10a:	84 b9       	out	0x04, r24	; 4
	
	// Init TWI, will use ISR
	TWI_init();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <TWI_init>
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0xa>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
