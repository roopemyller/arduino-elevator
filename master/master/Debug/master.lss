
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800200  0000128e  00001322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800452  00800452  00001574  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c24  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001235  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001229  00000000  00000000  000055c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  000067ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008eb  00000000  00000000  00006b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001575  00000000  00000000  00007413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00008988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	07 c1       	rjmp	.+526    	; 0x214 <__bad_interrupt>
       6:	00 00       	nop
       8:	05 c1       	rjmp	.+522    	; 0x214 <__bad_interrupt>
       a:	00 00       	nop
       c:	03 c1       	rjmp	.+518    	; 0x214 <__bad_interrupt>
       e:	00 00       	nop
      10:	01 c1       	rjmp	.+514    	; 0x214 <__bad_interrupt>
      12:	00 00       	nop
      14:	ff c0       	rjmp	.+510    	; 0x214 <__bad_interrupt>
      16:	00 00       	nop
      18:	fd c0       	rjmp	.+506    	; 0x214 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fb c0       	rjmp	.+502    	; 0x214 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f9 c0       	rjmp	.+498    	; 0x214 <__bad_interrupt>
      22:	00 00       	nop
      24:	f7 c0       	rjmp	.+494    	; 0x214 <__bad_interrupt>
      26:	00 00       	nop
      28:	f5 c0       	rjmp	.+490    	; 0x214 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f3 c0       	rjmp	.+486    	; 0x214 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f1 c0       	rjmp	.+482    	; 0x214 <__bad_interrupt>
      32:	00 00       	nop
      34:	ef c0       	rjmp	.+478    	; 0x214 <__bad_interrupt>
      36:	00 00       	nop
      38:	ed c0       	rjmp	.+474    	; 0x214 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	eb c0       	rjmp	.+470    	; 0x214 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c0       	rjmp	.+466    	; 0x214 <__bad_interrupt>
      42:	00 00       	nop
      44:	e7 c0       	rjmp	.+462    	; 0x214 <__bad_interrupt>
      46:	00 00       	nop
      48:	e5 c0       	rjmp	.+458    	; 0x214 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e3 c0       	rjmp	.+454    	; 0x214 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e1 c0       	rjmp	.+450    	; 0x214 <__bad_interrupt>
      52:	00 00       	nop
      54:	df c0       	rjmp	.+446    	; 0x214 <__bad_interrupt>
      56:	00 00       	nop
      58:	dd c0       	rjmp	.+442    	; 0x214 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	db c0       	rjmp	.+438    	; 0x214 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d9 c0       	rjmp	.+434    	; 0x214 <__bad_interrupt>
      62:	00 00       	nop
      64:	d7 c0       	rjmp	.+430    	; 0x214 <__bad_interrupt>
      66:	00 00       	nop
      68:	d5 c0       	rjmp	.+426    	; 0x214 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d3 c0       	rjmp	.+422    	; 0x214 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d1 c0       	rjmp	.+418    	; 0x214 <__bad_interrupt>
      72:	00 00       	nop
      74:	cf c0       	rjmp	.+414    	; 0x214 <__bad_interrupt>
      76:	00 00       	nop
      78:	cd c0       	rjmp	.+410    	; 0x214 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cb c0       	rjmp	.+406    	; 0x214 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c9 c0       	rjmp	.+402    	; 0x214 <__bad_interrupt>
      82:	00 00       	nop
      84:	c7 c0       	rjmp	.+398    	; 0x214 <__bad_interrupt>
      86:	00 00       	nop
      88:	c5 c0       	rjmp	.+394    	; 0x214 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c3 c0       	rjmp	.+390    	; 0x214 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c1 c0       	rjmp	.+386    	; 0x214 <__bad_interrupt>
      92:	00 00       	nop
      94:	bf c0       	rjmp	.+382    	; 0x214 <__bad_interrupt>
      96:	00 00       	nop
      98:	bd c0       	rjmp	.+378    	; 0x214 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bb c0       	rjmp	.+374    	; 0x214 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b9 c0       	rjmp	.+370    	; 0x214 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b7 c0       	rjmp	.+366    	; 0x214 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b5 c0       	rjmp	.+362    	; 0x214 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b3 c0       	rjmp	.+358    	; 0x214 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b1 c0       	rjmp	.+354    	; 0x214 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	af c0       	rjmp	.+350    	; 0x214 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ad c0       	rjmp	.+346    	; 0x214 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ab c0       	rjmp	.+342    	; 0x214 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a9 c0       	rjmp	.+338    	; 0x214 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a7 c0       	rjmp	.+334    	; 0x214 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a5 c0       	rjmp	.+330    	; 0x214 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a3 c0       	rjmp	.+326    	; 0x214 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a1 c0       	rjmp	.+322    	; 0x214 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9f c0       	rjmp	.+318    	; 0x214 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9d c0       	rjmp	.+314    	; 0x214 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9b c0       	rjmp	.+310    	; 0x214 <__bad_interrupt>
      de:	00 00       	nop
      e0:	99 c0       	rjmp	.+306    	; 0x214 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	80 01       	movw	r16, r0
      e6:	88 01       	movw	r16, r16
      e8:	88 01       	movw	r16, r16
      ea:	88 01       	movw	r16, r16
      ec:	82 01       	movw	r16, r4
      ee:	88 01       	movw	r16, r16
      f0:	84 01       	movw	r16, r8
      f2:	86 01       	movw	r16, r12
      f4:	88 01       	movw	r16, r16
      f6:	88 01       	movw	r16, r16
      f8:	88 01       	movw	r16, r16
      fa:	88 01       	movw	r16, r16
      fc:	88 01       	movw	r16, r16
      fe:	88 01       	movw	r16, r16
     100:	88 01       	movw	r16, r16
     102:	88 01       	movw	r16, r16
     104:	88 01       	movw	r16, r16
     106:	88 01       	movw	r16, r16
     108:	88 01       	movw	r16, r16
     10a:	88 01       	movw	r16, r16
     10c:	88 01       	movw	r16, r16
     10e:	88 01       	movw	r16, r16
     110:	88 01       	movw	r16, r16
     112:	88 01       	movw	r16, r16
     114:	88 01       	movw	r16, r16
     116:	88 01       	movw	r16, r16
     118:	88 01       	movw	r16, r16
     11a:	88 01       	movw	r16, r16
     11c:	88 01       	movw	r16, r16
     11e:	88 01       	movw	r16, r16
     120:	88 01       	movw	r16, r16
     122:	88 01       	movw	r16, r16
     124:	88 01       	movw	r16, r16
     126:	88 01       	movw	r16, r16
     128:	88 01       	movw	r16, r16
     12a:	88 01       	movw	r16, r16
     12c:	88 01       	movw	r16, r16
     12e:	88 01       	movw	r16, r16
     130:	88 01       	movw	r16, r16
     132:	88 01       	movw	r16, r16
     134:	88 01       	movw	r16, r16
     136:	88 01       	movw	r16, r16
     138:	88 01       	movw	r16, r16
     13a:	88 01       	movw	r16, r16
     13c:	88 01       	movw	r16, r16
     13e:	88 01       	movw	r16, r16
     140:	88 01       	movw	r16, r16
     142:	88 01       	movw	r16, r16
     144:	88 01       	movw	r16, r16
     146:	88 01       	movw	r16, r16
     148:	88 01       	movw	r16, r16
     14a:	88 01       	movw	r16, r16
     14c:	88 01       	movw	r16, r16
     14e:	88 01       	movw	r16, r16
     150:	88 01       	movw	r16, r16
     152:	88 01       	movw	r16, r16
     154:	88 01       	movw	r16, r16
     156:	88 01       	movw	r16, r16
     158:	88 01       	movw	r16, r16
     15a:	88 01       	movw	r16, r16
     15c:	88 01       	movw	r16, r16
     15e:	88 01       	movw	r16, r16
     160:	88 01       	movw	r16, r16
     162:	88 01       	movw	r16, r16
     164:	78 01       	movw	r14, r16
     166:	88 01       	movw	r16, r16
     168:	88 01       	movw	r16, r16
     16a:	88 01       	movw	r16, r16
     16c:	7a 01       	movw	r14, r20
     16e:	88 01       	movw	r16, r16
     170:	7c 01       	movw	r14, r24
     172:	7e 01       	movw	r14, r28
     174:	88 01       	movw	r16, r16
     176:	88 01       	movw	r16, r16
     178:	88 01       	movw	r16, r16
     17a:	88 01       	movw	r16, r16
     17c:	88 01       	movw	r16, r16
     17e:	88 01       	movw	r16, r16
     180:	88 01       	movw	r16, r16
     182:	88 01       	movw	r16, r16
     184:	88 01       	movw	r16, r16
     186:	88 01       	movw	r16, r16
     188:	88 01       	movw	r16, r16
     18a:	88 01       	movw	r16, r16
     18c:	88 01       	movw	r16, r16
     18e:	88 01       	movw	r16, r16
     190:	88 01       	movw	r16, r16
     192:	88 01       	movw	r16, r16
     194:	88 01       	movw	r16, r16
     196:	88 01       	movw	r16, r16
     198:	88 01       	movw	r16, r16
     19a:	88 01       	movw	r16, r16
     19c:	88 01       	movw	r16, r16
     19e:	88 01       	movw	r16, r16
     1a0:	88 01       	movw	r16, r16
     1a2:	88 01       	movw	r16, r16
     1a4:	70 01       	movw	r14, r0
     1a6:	88 01       	movw	r16, r16
     1a8:	88 01       	movw	r16, r16
     1aa:	88 01       	movw	r16, r16
     1ac:	72 01       	movw	r14, r4
     1ae:	88 01       	movw	r16, r16
     1b0:	74 01       	movw	r14, r8
     1b2:	76 01       	movw	r14, r12
     1b4:	88 01       	movw	r16, r16
     1b6:	88 01       	movw	r16, r16
     1b8:	88 01       	movw	r16, r16
     1ba:	88 01       	movw	r16, r16
     1bc:	88 01       	movw	r16, r16
     1be:	88 01       	movw	r16, r16
     1c0:	88 01       	movw	r16, r16
     1c2:	88 01       	movw	r16, r16
     1c4:	6a 01       	movw	r12, r20
     1c6:	88 01       	movw	r16, r16
     1c8:	88 01       	movw	r16, r16
     1ca:	88 01       	movw	r16, r16
     1cc:	8a 01       	movw	r16, r20
     1ce:	88 01       	movw	r16, r16
     1d0:	6c 01       	movw	r12, r24
     1d2:	6e 01       	movw	r12, r28

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	14 e0       	ldi	r17, 0x04	; 4
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	ee e8       	ldi	r30, 0x8E	; 142
     1ec:	f2 e1       	ldi	r31, 0x12	; 18
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a2 35       	cpi	r26, 0x52	; 82
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a2 e5       	ldi	r26, 0x52	; 82
     202:	b4 e0       	ldi	r27, 0x04	; 4
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a6 35       	cpi	r26, 0x56	; 86
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	f7 d3       	rcall	.+2030   	; 0x9fe <main>
     210:	0c 94 45 09 	jmp	0x128a	; 0x128a <_exit>

00000214 <__bad_interrupt>:
     214:	f5 ce       	rjmp	.-534    	; 0x0 <__vectors>

00000216 <keypad_ScanKey>:
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	9f ee       	ldi	r25, 0xEF	; 239
     21a:	10 c0       	rjmp	.+32     	; 0x23c <keypad_ScanKey+0x26>
     21c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	e9 ef       	ldi	r30, 0xF9	; 249
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <keypad_ScanKey+0xe>
     228:	00 c0       	rjmp	.+0      	; 0x22a <keypad_ScanKey+0x14>
     22a:	00 00       	nop
     22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     230:	8f 70       	andi	r24, 0x0F	; 15
     232:	8f 30       	cpi	r24, 0x0F	; 15
     234:	29 f4       	brne	.+10     	; 0x240 <keypad_ScanKey+0x2a>
     236:	99 0f       	add	r25, r25
     238:	9f 5f       	subi	r25, 0xFF	; 255
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	24 30       	cpi	r18, 0x04	; 4
     23e:	70 f3       	brcs	.-36     	; 0x21c <keypad_ScanKey+0x6>
     240:	90 7f       	andi	r25, 0xF0	; 240
     242:	89 0f       	add	r24, r25
     244:	08 95       	ret

00000246 <KEYPAD_Init>:
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     24c:	08 95       	ret

0000024e <KEYPAD_WaitForKeyRelease>:
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     258:	8f 70       	andi	r24, 0x0F	; 15
     25a:	8f 30       	cpi	r24, 0x0F	; 15
     25c:	c1 f7       	brne	.-16     	; 0x24e <KEYPAD_WaitForKeyRelease>
     25e:	89 ef       	ldi	r24, 0xF9	; 249
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <KEYPAD_WaitForKeyRelease+0x14>
     266:	00 c0       	rjmp	.+0      	; 0x268 <KEYPAD_WaitForKeyRelease+0x1a>
     268:	00 00       	nop
     26a:	8f e0       	ldi	r24, 0x0F	; 15
     26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	8f 30       	cpi	r24, 0x0F	; 15
     278:	51 f7       	brne	.-44     	; 0x24e <KEYPAD_WaitForKeyRelease>
     27a:	08 95       	ret

0000027c <KEYPAD_WaitForKeyPress>:
     27c:	8f e0       	ldi	r24, 0x0F	; 15
     27e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     286:	8f 70       	andi	r24, 0x0F	; 15
     288:	8f 30       	cpi	r24, 0x0F	; 15
     28a:	c1 f3       	breq	.-16     	; 0x27c <KEYPAD_WaitForKeyPress>
     28c:	89 ef       	ldi	r24, 0xF9	; 249
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <KEYPAD_WaitForKeyPress+0x14>
     294:	00 c0       	rjmp	.+0      	; 0x296 <KEYPAD_WaitForKeyPress+0x1a>
     296:	00 00       	nop
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	8f 30       	cpi	r24, 0x0F	; 15
     2a6:	51 f3       	breq	.-44     	; 0x27c <KEYPAD_WaitForKeyPress>
     2a8:	08 95       	ret

000002aa <KEYPAD_GetKey>:
     2aa:	d1 df       	rcall	.-94     	; 0x24e <KEYPAD_WaitForKeyRelease>
     2ac:	89 ef       	ldi	r24, 0xF9	; 249
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <KEYPAD_GetKey+0x6>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <KEYPAD_GetKey+0xc>
     2b6:	00 00       	nop
     2b8:	e1 df       	rcall	.-62     	; 0x27c <KEYPAD_WaitForKeyPress>
     2ba:	ad df       	rcall	.-166    	; 0x216 <keypad_ScanKey>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	e7 57       	subi	r30, 0x77	; 119
     2c2:	f1 09       	sbc	r31, r1
     2c4:	e8 37       	cpi	r30, 0x78	; 120
     2c6:	f1 05       	cpc	r31, r1
     2c8:	18 f5       	brcc	.+70     	; 0x310 <KEYPAD_GetKey+0x66>
     2ca:	88 27       	eor	r24, r24
     2cc:	ee 58       	subi	r30, 0x8E	; 142
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	8f 4f       	sbci	r24, 0xFF	; 255
     2d2:	c5 c4       	rjmp	.+2442   	; 0xc5e <__tablejump2__>
     2d4:	8a e2       	ldi	r24, 0x2A	; 42
     2d6:	08 95       	ret
     2d8:	84 e3       	ldi	r24, 0x34	; 52
     2da:	08 95       	ret
     2dc:	81 e3       	ldi	r24, 0x31	; 49
     2de:	08 95       	ret
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	08 95       	ret
     2e4:	88 e3       	ldi	r24, 0x38	; 56
     2e6:	08 95       	ret
     2e8:	85 e3       	ldi	r24, 0x35	; 53
     2ea:	08 95       	ret
     2ec:	82 e3       	ldi	r24, 0x32	; 50
     2ee:	08 95       	ret
     2f0:	83 e2       	ldi	r24, 0x23	; 35
     2f2:	08 95       	ret
     2f4:	89 e3       	ldi	r24, 0x39	; 57
     2f6:	08 95       	ret
     2f8:	86 e3       	ldi	r24, 0x36	; 54
     2fa:	08 95       	ret
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	08 95       	ret
     300:	84 e4       	ldi	r24, 0x44	; 68
     302:	08 95       	ret
     304:	83 e4       	ldi	r24, 0x43	; 67
     306:	08 95       	ret
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	08 95       	ret
     30c:	81 e4       	ldi	r24, 0x41	; 65
     30e:	08 95       	ret
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	08 95       	ret
     314:	87 e3       	ldi	r24, 0x37	; 55
     316:	08 95       	ret

00000318 <toggle_e>:
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	00 00       	nop
     320:	85 b1       	in	r24, 0x05	; 5
     322:	8f 7d       	andi	r24, 0xDF	; 223
     324:	85 b9       	out	0x05, r24	; 5
     326:	08 95       	ret

00000328 <lcd_write>:
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
     32c:	66 23       	and	r22, r22
     32e:	31 f0       	breq	.+12     	; 0x33c <lcd_write+0x14>
     330:	e2 e0       	ldi	r30, 0x02	; 2
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	80 81       	ld	r24, Z
     336:	80 64       	ori	r24, 0x40	; 64
     338:	80 83       	st	Z, r24
     33a:	05 c0       	rjmp	.+10     	; 0x346 <lcd_write+0x1e>
     33c:	e2 e0       	ldi	r30, 0x02	; 2
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	8f 7b       	andi	r24, 0xBF	; 191
     344:	80 83       	st	Z, r24
     346:	85 b1       	in	r24, 0x05	; 5
     348:	8f 7e       	andi	r24, 0xEF	; 239
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	8d b1       	in	r24, 0x0d	; 13
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	8d b9       	out	0x0d, r24	; 13
     352:	83 b3       	in	r24, 0x13	; 19
     354:	80 62       	ori	r24, 0x20	; 32
     356:	83 bb       	out	0x13, r24	; 19
     358:	8d b1       	in	r24, 0x0d	; 13
     35a:	88 60       	ori	r24, 0x08	; 8
     35c:	8d b9       	out	0x0d, r24	; 13
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	80 81       	ld	r24, Z
     364:	88 60       	ori	r24, 0x08	; 8
     366:	80 83       	st	Z, r24
     368:	e2 e0       	ldi	r30, 0x02	; 2
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	80 81       	ld	r24, Z
     36e:	87 7f       	andi	r24, 0xF7	; 247
     370:	80 83       	st	Z, r24
     372:	8e b1       	in	r24, 0x0e	; 14
     374:	87 7f       	andi	r24, 0xF7	; 247
     376:	8e b9       	out	0x0e, r24	; 14
     378:	84 b3       	in	r24, 0x14	; 20
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	84 bb       	out	0x14, r24	; 20
     37e:	8e b1       	in	r24, 0x0e	; 14
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	8e b9       	out	0x0e, r24	; 14
     384:	cc 23       	and	r28, r28
     386:	1c f4       	brge	.+6      	; 0x38e <lcd_write+0x66>
     388:	80 81       	ld	r24, Z
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	80 83       	st	Z, r24
     38e:	c6 ff       	sbrs	r28, 6
     390:	03 c0       	rjmp	.+6      	; 0x398 <lcd_write+0x70>
     392:	8e b1       	in	r24, 0x0e	; 14
     394:	88 60       	ori	r24, 0x08	; 8
     396:	8e b9       	out	0x0e, r24	; 14
     398:	c5 ff       	sbrs	r28, 5
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <lcd_write+0x7a>
     39c:	84 b3       	in	r24, 0x14	; 20
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	84 bb       	out	0x14, r24	; 20
     3a2:	c4 ff       	sbrs	r28, 4
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_write+0x84>
     3a6:	8e b1       	in	r24, 0x0e	; 14
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	8e b9       	out	0x0e, r24	; 14
     3ac:	b5 df       	rcall	.-150    	; 0x318 <toggle_e>
     3ae:	e2 e0       	ldi	r30, 0x02	; 2
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	8e b1       	in	r24, 0x0e	; 14
     3ba:	87 7f       	andi	r24, 0xF7	; 247
     3bc:	8e b9       	out	0x0e, r24	; 14
     3be:	84 b3       	in	r24, 0x14	; 20
     3c0:	8f 7d       	andi	r24, 0xDF	; 223
     3c2:	84 bb       	out	0x14, r24	; 20
     3c4:	8e b1       	in	r24, 0x0e	; 14
     3c6:	8f 7d       	andi	r24, 0xDF	; 223
     3c8:	8e b9       	out	0x0e, r24	; 14
     3ca:	c3 ff       	sbrs	r28, 3
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <lcd_write+0xac>
     3ce:	80 81       	ld	r24, Z
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 83       	st	Z, r24
     3d4:	c2 ff       	sbrs	r28, 2
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <lcd_write+0xb6>
     3d8:	8e b1       	in	r24, 0x0e	; 14
     3da:	88 60       	ori	r24, 0x08	; 8
     3dc:	8e b9       	out	0x0e, r24	; 14
     3de:	c1 ff       	sbrs	r28, 1
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <lcd_write+0xc0>
     3e2:	84 b3       	in	r24, 0x14	; 20
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	84 bb       	out	0x14, r24	; 20
     3e8:	c0 ff       	sbrs	r28, 0
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <lcd_write+0xca>
     3ec:	8e b1       	in	r24, 0x0e	; 14
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	8e b9       	out	0x0e, r24	; 14
     3f2:	92 df       	rcall	.-220    	; 0x318 <toggle_e>
     3f4:	8e b1       	in	r24, 0x0e	; 14
     3f6:	80 62       	ori	r24, 0x20	; 32
     3f8:	8e b9       	out	0x0e, r24	; 14
     3fa:	84 b3       	in	r24, 0x14	; 20
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	84 bb       	out	0x14, r24	; 20
     400:	8e b1       	in	r24, 0x0e	; 14
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8e b9       	out	0x0e, r24	; 14
     406:	e2 e0       	ldi	r30, 0x02	; 2
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	80 83       	st	Z, r24
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <lcd_read>:
     414:	88 23       	and	r24, r24
     416:	31 f0       	breq	.+12     	; 0x424 <lcd_read+0x10>
     418:	e2 e0       	ldi	r30, 0x02	; 2
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
     422:	05 c0       	rjmp	.+10     	; 0x42e <lcd_read+0x1a>
     424:	e2 e0       	ldi	r30, 0x02	; 2
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	80 81       	ld	r24, Z
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
     42e:	85 b1       	in	r24, 0x05	; 5
     430:	80 61       	ori	r24, 0x10	; 16
     432:	85 b9       	out	0x05, r24	; 5
     434:	8d b1       	in	r24, 0x0d	; 13
     436:	8f 7d       	andi	r24, 0xDF	; 223
     438:	8d b9       	out	0x0d, r24	; 13
     43a:	83 b3       	in	r24, 0x13	; 19
     43c:	8f 7d       	andi	r24, 0xDF	; 223
     43e:	83 bb       	out	0x13, r24	; 19
     440:	8d b1       	in	r24, 0x0d	; 13
     442:	87 7f       	andi	r24, 0xF7	; 247
     444:	8d b9       	out	0x0d, r24	; 13
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	87 7f       	andi	r24, 0xF7	; 247
     44e:	80 83       	st	Z, r24
     450:	85 b1       	in	r24, 0x05	; 5
     452:	80 62       	ori	r24, 0x20	; 32
     454:	85 b9       	out	0x05, r24	; 5
     456:	00 00       	nop
     458:	65 99       	sbic	0x0c, 5	; 12
     45a:	02 c0       	rjmp	.+4      	; 0x460 <lcd_read+0x4c>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	01 c0       	rjmp	.+2      	; 0x462 <lcd_read+0x4e>
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	95 99       	sbic	0x12, 5	; 18
     464:	80 62       	ori	r24, 0x20	; 32
     466:	63 99       	sbic	0x0c, 3	; 12
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     46e:	93 fd       	sbrc	r25, 3
     470:	80 68       	ori	r24, 0x80	; 128
     472:	95 b1       	in	r25, 0x05	; 5
     474:	9f 7d       	andi	r25, 0xDF	; 223
     476:	95 b9       	out	0x05, r25	; 5
     478:	00 00       	nop
     47a:	95 b1       	in	r25, 0x05	; 5
     47c:	90 62       	ori	r25, 0x20	; 32
     47e:	95 b9       	out	0x05, r25	; 5
     480:	00 00       	nop
     482:	65 99       	sbic	0x0c, 5	; 12
     484:	81 60       	ori	r24, 0x01	; 1
     486:	95 99       	sbic	0x12, 5	; 18
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	63 99       	sbic	0x0c, 3	; 12
     48c:	84 60       	ori	r24, 0x04	; 4
     48e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     492:	93 fd       	sbrc	r25, 3
     494:	88 60       	ori	r24, 0x08	; 8
     496:	95 b1       	in	r25, 0x05	; 5
     498:	9f 7d       	andi	r25, 0xDF	; 223
     49a:	95 b9       	out	0x05, r25	; 5
     49c:	08 95       	ret

0000049e <lcd_waitbusy>:
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	b9 df       	rcall	.-142    	; 0x414 <lcd_read>
     4a2:	88 23       	and	r24, r24
     4a4:	e4 f3       	brlt	.-8      	; 0x49e <lcd_waitbusy>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_waitbusy+0xa>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_waitbusy+0xc>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	b3 cf       	rjmp	.-154    	; 0x414 <lcd_read>
     4ae:	08 95       	ret

000004b0 <lcd_command>:
     4b0:	cf 93       	push	r28
     4b2:	c8 2f       	mov	r28, r24
     4b4:	f4 df       	rcall	.-24     	; 0x49e <lcd_waitbusy>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	8c 2f       	mov	r24, r28
     4ba:	36 df       	rcall	.-404    	; 0x328 <lcd_write>
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <lcd_gotoxy>:
     4c0:	61 11       	cpse	r22, r1
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <lcd_gotoxy+0xa>
     4c4:	80 58       	subi	r24, 0x80	; 128
     4c6:	f4 cf       	rjmp	.-24     	; 0x4b0 <lcd_command>
     4c8:	08 95       	ret
     4ca:	80 54       	subi	r24, 0x40	; 64
     4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <lcd_command>
     4ce:	08 95       	ret

000004d0 <lcd_clrscr>:
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	ee cf       	rjmp	.-36     	; 0x4b0 <lcd_command>
     4d4:	08 95       	ret

000004d6 <lcd_putc>:
     4d6:	cf 93       	push	r28
     4d8:	c8 2f       	mov	r28, r24
     4da:	e1 df       	rcall	.-62     	; 0x49e <lcd_waitbusy>
     4dc:	ca 30       	cpi	r28, 0x0A	; 10
     4de:	41 f4       	brne	.+16     	; 0x4f0 <lcd_putc+0x1a>
     4e0:	80 34       	cpi	r24, 0x40	; 64
     4e2:	10 f4       	brcc	.+4      	; 0x4e8 <lcd_putc+0x12>
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <lcd_putc+0x14>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	80 58       	subi	r24, 0x80	; 128
     4ec:	e1 df       	rcall	.-62     	; 0x4b0 <lcd_command>
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <lcd_putc+0x20>
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	8c 2f       	mov	r24, r28
     4f4:	19 df       	rcall	.-462    	; 0x328 <lcd_write>
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <lcd_puts>:
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	fc 01       	movw	r30, r24
     500:	02 c0       	rjmp	.+4      	; 0x506 <lcd_puts+0xc>
     502:	e9 df       	rcall	.-46     	; 0x4d6 <lcd_putc>
     504:	fe 01       	movw	r30, r28
     506:	ef 01       	movw	r28, r30
     508:	21 96       	adiw	r28, 0x01	; 1
     50a:	80 81       	ld	r24, Z
     50c:	81 11       	cpse	r24, r1
     50e:	f9 cf       	rjmp	.-14     	; 0x502 <lcd_puts+0x8>
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <lcd_init>:
     516:	cf 93       	push	r28
     518:	c8 2f       	mov	r28, r24
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	80 64       	ori	r24, 0x40	; 64
     522:	80 83       	st	Z, r24
     524:	84 b1       	in	r24, 0x04	; 4
     526:	80 61       	ori	r24, 0x10	; 16
     528:	84 b9       	out	0x04, r24	; 4
     52a:	84 b1       	in	r24, 0x04	; 4
     52c:	80 62       	ori	r24, 0x20	; 32
     52e:	84 b9       	out	0x04, r24	; 4
     530:	8d b1       	in	r24, 0x0d	; 13
     532:	80 62       	ori	r24, 0x20	; 32
     534:	8d b9       	out	0x0d, r24	; 13
     536:	83 b3       	in	r24, 0x13	; 19
     538:	80 62       	ori	r24, 0x20	; 32
     53a:	83 bb       	out	0x13, r24	; 19
     53c:	8d b1       	in	r24, 0x0d	; 13
     53e:	88 60       	ori	r24, 0x08	; 8
     540:	8d b9       	out	0x0d, r24	; 13
     542:	80 81       	ld	r24, Z
     544:	88 60       	ori	r24, 0x08	; 8
     546:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	8f e9       	ldi	r24, 0x9F	; 159
     54a:	9f e0       	ldi	r25, 0x0F	; 15
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <lcd_init+0x36>
     550:	00 c0       	rjmp	.+0      	; 0x552 <lcd_init+0x3c>
     552:	00 00       	nop
     554:	84 b3       	in	r24, 0x14	; 20
     556:	80 62       	ori	r24, 0x20	; 32
     558:	84 bb       	out	0x14, r24	; 20
     55a:	8e b1       	in	r24, 0x0e	; 14
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8e b9       	out	0x0e, r24	; 14
     560:	db de       	rcall	.-586    	; 0x318 <toggle_e>
     562:	81 ee       	ldi	r24, 0xE1	; 225
     564:	94 e0       	ldi	r25, 0x04	; 4
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <lcd_init+0x50>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <lcd_init+0x56>
     56c:	00 00       	nop
     56e:	d4 de       	rcall	.-600    	; 0x318 <toggle_e>
     570:	95 e1       	ldi	r25, 0x15	; 21
     572:	9a 95       	dec	r25
     574:	f1 f7       	brne	.-4      	; 0x572 <lcd_init+0x5c>
     576:	00 00       	nop
     578:	cf de       	rcall	.-610    	; 0x318 <toggle_e>
     57a:	85 e1       	ldi	r24, 0x15	; 21
     57c:	8a 95       	dec	r24
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x66>
     580:	00 00       	nop
     582:	8e b1       	in	r24, 0x0e	; 14
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	8e b9       	out	0x0e, r24	; 14
     588:	c7 de       	rcall	.-626    	; 0x318 <toggle_e>
     58a:	95 e1       	ldi	r25, 0x15	; 21
     58c:	9a 95       	dec	r25
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init+0x76>
     590:	00 00       	nop
     592:	88 e2       	ldi	r24, 0x28	; 40
     594:	8d df       	rcall	.-230    	; 0x4b0 <lcd_command>
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	8b df       	rcall	.-234    	; 0x4b0 <lcd_command>
     59a:	9a df       	rcall	.-204    	; 0x4d0 <lcd_clrscr>
     59c:	86 e0       	ldi	r24, 0x06	; 6
     59e:	88 df       	rcall	.-240    	; 0x4b0 <lcd_command>
     5a0:	8c 2f       	mov	r24, r28
     5a2:	86 df       	rcall	.-244    	; 0x4b0 <lcd_command>
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <clear_LCD_line>:
	clear_LCD_line(1);
	lcd_puts(str);
}

// Clear one line (row) from LCD
void clear_LCD_line(uint8_t row){
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	d8 2f       	mov	r29, r24
	lcd_gotoxy(0, row);
     5ae:	68 2f       	mov	r22, r24
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	86 df       	rcall	.-244    	; 0x4c0 <lcd_gotoxy>
	for(uint8_t i=0; i < 16; i++)
     5b4:	c0 e0       	ldi	r28, 0x00	; 0
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <clear_LCD_line+0x16>
	lcd_putc(' ');
     5b8:	80 e2       	ldi	r24, 0x20	; 32
     5ba:	8d df       	rcall	.-230    	; 0x4d6 <lcd_putc>
}

// Clear one line (row) from LCD
void clear_LCD_line(uint8_t row){
	lcd_gotoxy(0, row);
	for(uint8_t i=0; i < 16; i++)
     5bc:	cf 5f       	subi	r28, 0xFF	; 255
     5be:	c0 31       	cpi	r28, 0x10	; 16
     5c0:	d8 f3       	brcs	.-10     	; 0x5b8 <clear_LCD_line+0x10>
	lcd_putc(' ');
	lcd_gotoxy(0,row);
     5c2:	6d 2f       	mov	r22, r29
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	7c df       	rcall	.-264    	; 0x4c0 <lcd_gotoxy>
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <LCD_top>:
	KEYPAD_Init();
	_delay_ms(20);
}

// LCD display top row updates when elevator gives new information to user
void LCD_top(const char* msg) {
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	ec 01       	movw	r28, r24
	lcd_gotoxy(0,0);
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	73 df       	rcall	.-282    	; 0x4c0 <lcd_gotoxy>
	clear_LCD_line(0);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	e5 df       	rcall	.-54     	; 0x5a8 <clear_LCD_line>
	lcd_puts(msg);
     5de:	ce 01       	movw	r24, r28
     5e0:	8c df       	rcall	.-232    	; 0x4fa <lcd_puts>
     5e2:	df 91       	pop	r29
}
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <LCD_bottom>:
     5e8:	0f 93       	push	r16

// LCD display bottom row updates when elevator floor changes
void LCD_bottom(int floor){
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	64 97       	sbiw	r28, 0x14	; 20
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	sprintf(str, "Floor now: %d", floor);
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	8e 01       	movw	r16, r28
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	1f 93       	push	r17
     614:	0f 93       	push	r16
     616:	4e d3       	rcall	.+1692   	; 0xcb4 <sprintf>
	lcd_gotoxy(0,1);
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	51 df       	rcall	.-350    	; 0x4c0 <lcd_gotoxy>
	clear_LCD_line(1);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	c3 df       	rcall	.-122    	; 0x5a8 <clear_LCD_line>
	lcd_puts(str);
     622:	c8 01       	movw	r24, r16
     624:	6a df       	rcall	.-300    	; 0x4fa <lcd_puts>
     626:	0f 90       	pop	r0
}
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	64 96       	adiw	r28, 0x14	; 20
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <TWI_init>:
     648:	88 e4       	ldi	r24, 0x48	; 72

// Initialize TWI as master
void TWI_init(void) {
	// Set SCL frequency: TWBR = ((F_CPU / SCL_freq) - 16) / (2 * prescaler)
	// For 100kHz with 16MHz CPU and prescaler=1: TWBR = ((16000000/100000)-16)/2 = 72
	TWBR = 72;  // Set bit rate register
     64a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
	TWSR = 0;   // Prescaler = 1
     64e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     652:	08 95       	ret

00000654 <TWI_stop>:
}

// Stop TWI transmission
void TWI_stop(void) {
	// Send STOP condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     654:	84 e9       	ldi	r24, 0x94	; 148
     656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65a:	8f e9       	ldi	r24, 0x9F	; 159
     65c:	9f e0       	ldi	r25, 0x0F	; 15
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <TWI_stop+0xa>
     662:	00 c0       	rjmp	.+0      	; 0x664 <TWI_stop+0x10>
     664:	00 00       	nop
     666:	08 95       	ret

00000668 <UART_init>:
}

// Initialize UART for debugging
void UART_init(void) {
	// Set baud rate to 9600 for 16MHz: UBRR = (F_CPU/(16*BAUD))-1 = 103
	UBRR0H = 0;
     668:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = 103;
     66c:	87 e6       	ldi	r24, 0x67	; 103
     66e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	// Enable transmitter
	UCSR0B = (1 << TXEN0);
     672:	88 e0       	ldi	r24, 0x08	; 8
     674:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
     67e:	08 95       	ret

00000680 <UART_send_char>:
}

// Send a character through UART
void UART_send_char(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
     680:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     684:	95 ff       	sbrs	r25, 5
     686:	fc cf       	rjmp	.-8      	; 0x680 <UART_send_char>
	
	// Put data into buffer
	UDR0 = data;
     688:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     68c:	08 95       	ret

0000068e <UART_send_string>:
}

// Send a string through UART
void UART_send_string(char* str) {
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
	// Send each character until null terminator
	while (*str) {
     694:	02 c0       	rjmp	.+4      	; 0x69a <UART_send_string+0xc>
		UART_send_char(*str++);
     696:	21 96       	adiw	r28, 0x01	; 1
     698:	f3 df       	rcall	.-26     	; 0x680 <UART_send_char>
}

// Send a string through UART
void UART_send_string(char* str) {
	// Send each character until null terminator
	while (*str) {
     69a:	88 81       	ld	r24, Y
     69c:	81 11       	cpse	r24, r1
     69e:	fb cf       	rjmp	.-10     	; 0x696 <UART_send_string+0x8>
		UART_send_char(*str++);
	}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <setup>:
	LCD_top("Choose the floor");
}

void setup(){
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
     6a6:	8c e0       	ldi	r24, 0x0C	; 12
     6a8:	36 df       	rcall	.-404    	; 0x516 <lcd_init>
	lcd_clrscr();
     6aa:	12 df       	rcall	.-476    	; 0x4d0 <lcd_clrscr>
     6ac:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_top("Choose the floor");
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	8e df       	rcall	.-228    	; 0x5ce <LCD_top>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
	LCD_bottom(0);
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	98 df       	rcall	.-208    	; 0x5e8 <LCD_bottom>
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	89 ef       	ldi	r24, 0xF9	; 249
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <setup+0x18>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <setup+0x22>
     6c8:	00 00       	nop
     6ca:	ce df       	rcall	.-100    	; 0x668 <UART_init>
	_delay_ms(20);
	// Initialize UART for debugging
	UART_init();
     6cc:	2f ef       	ldi	r18, 0xFF	; 255
     6ce:	89 ef       	ldi	r24, 0xF9	; 249
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	21 50       	subi	r18, 0x01	; 1
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	90 40       	sbci	r25, 0x00	; 0
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <setup+0x2c>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <setup+0x36>
     6dc:	00 00       	nop
	_delay_ms(20);
	UART_send_string("Elevator Master Program - NASA SERTIFIED PRODUCT\r\n");
     6de:	8f e1       	ldi	r24, 0x1F	; 31
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	d5 df       	rcall	.-86     	; 0x68e <UART_send_string>
     6e4:	b1 df       	rcall	.-158    	; 0x648 <TWI_init>
	
	// Initialize TWI as master
	TWI_init();
     6e6:	2f ef       	ldi	r18, 0xFF	; 255
     6e8:	89 ef       	ldi	r24, 0xF9	; 249
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <setup+0x46>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <setup+0x50>
     6f6:	00 00       	nop
     6f8:	a6 dd       	rcall	.-1204   	; 0x246 <KEYPAD_Init>
	_delay_ms(20);    
	// Init keypad
	KEYPAD_Init();
     6fa:	2f ef       	ldi	r18, 0xFF	; 255
     6fc:	89 ef       	ldi	r24, 0xF9	; 249
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	21 50       	subi	r18, 0x01	; 1
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	90 40       	sbci	r25, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <setup+0x5a>
     708:	00 c0       	rjmp	.+0      	; 0x70a <setup+0x64>
     70a:	00 00       	nop
     70c:	08 95       	ret

0000070e <get_key_pressed>:
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
	for(uint8_t i=0; i < 16; i++)
	lcd_putc(' ');
	lcd_gotoxy(0,row);
}

uint8_t get_key_pressed(){
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	a0 97       	sbiw	r28, 0x20	; 32
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
	uint8_t key_index = 0;
	uint8_t floor_value = 0;
	
	char key[16];
	
	UART_send_string("Select floor between 0 - 99.");
     72e:	82 e5       	ldi	r24, 0x52	; 82
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	ad df       	rcall	.-166    	; 0x68e <UART_send_string>
	UART_send_string ("\r\n");
     734:	80 ed       	ldi	r24, 0xD0	; 208
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	aa df       	rcall	.-172    	; 0x68e <UART_send_string>
	UART_send_string("'*' confirms floor.");
     73a:	8f e6       	ldi	r24, 0x6F	; 111
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	a7 df       	rcall	.-178    	; 0x68e <UART_send_string>
	UART_send_string ("\r\n");
     740:	80 ed       	ldi	r24, 0xD0	; 208
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	a4 df       	rcall	.-184    	; 0x68e <UART_send_string>
     746:	00 e0       	ldi	r16, 0x00	; 0

uint8_t get_key_pressed(){


	uint8_t keypad_ready = 0;
	uint8_t key_index = 0;
     748:	f1 2c       	mov	r15, r1
}

uint8_t get_key_pressed(){


	uint8_t keypad_ready = 0;
     74a:	e1 2c       	mov	r14, r1
	UART_send_string("Select floor between 0 - 99.");
	UART_send_string ("\r\n");
	UART_send_string("'*' confirms floor.");
	UART_send_string ("\r\n");
	
	while(keypad_ready == 0){
     74c:	94 c0       	rjmp	.+296    	; 0x876 <get_key_pressed+0x168>
		
		// Read raw signal from keypad
		uint8_t key_signal = KEYPAD_GetKey();
     74e:	ad dd       	rcall	.-1190   	; 0x2aa <KEYPAD_GetKey>
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	31 ee       	ldi	r19, 0xE1	; 225
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	21 50       	subi	r18, 0x01	; 1
     758:	30 40       	sbci	r19, 0x00	; 0
     75a:	90 40       	sbci	r25, 0x00	; 0
     75c:	e1 f7       	brne	.-8      	; 0x756 <get_key_pressed+0x48>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <get_key_pressed+0x52>
     760:	00 00       	nop
     762:	10 ed       	ldi	r17, 0xD0	; 208
		
		// Check for valid key press
		//if (key_signal != 0xFF) { // Assuming 0xFF means no key pressed

		// For numeric keys (0 to 9)
		if (key_signal >= '0' && key_signal <= '9') {
     764:	18 0f       	add	r17, r24
     766:	1a 30       	cpi	r17, 0x0A	; 10
     768:	08 f0       	brcs	.+2      	; 0x76c <get_key_pressed+0x5e>
     76a:	5a c0       	rjmp	.+180    	; 0x820 <get_key_pressed+0x112>
     76c:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	81 2f       	mov	r24, r17
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	7a d2       	rcall	.+1268   	; 0xc6e <__itoa_ncheck>
			// Convert key to numeric value
			uint8_t key_value = key_signal - '0'; // Convert ASCII value to numeric value

			itoa(key_value, key, 10);
			UART_send_string("Pressed key: ");
     77a:	83 e8       	ldi	r24, 0x83	; 131
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	87 df       	rcall	.-242    	; 0x68e <UART_send_string>
			UART_send_string(key);
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	84 df       	rcall	.-248    	; 0x68e <UART_send_string>
			UART_send_string(" -- ");
     786:	81 e9       	ldi	r24, 0x91	; 145
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	81 df       	rcall	.-254    	; 0x68e <UART_send_string>
     78c:	86 e9       	ldi	r24, 0x96	; 150
			UART_send_string("Key index: ");
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	7e df       	rcall	.-260    	; 0x68e <UART_send_string>
     792:	4a e0       	ldi	r20, 0x0A	; 10
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	8f 2d       	mov	r24, r15
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	67 d2       	rcall	.+1230   	; 0xc6e <__itoa_ncheck>
     7a0:	ce 01       	movw	r24, r28
			itoa(key_index, key, 10);
			UART_send_string(key);
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	74 df       	rcall	.-280    	; 0x68e <UART_send_string>
     7a6:	80 ed       	ldi	r24, 0xD0	; 208
     7a8:	93 e0       	ldi	r25, 0x03	; 3
			UART_send_string ("\r\n");
     7aa:	71 df       	rcall	.-286    	; 0x68e <UART_send_string>
     7ac:	22 e0       	ldi	r18, 0x02	; 2
     7ae:	f2 12       	cpse	r15, r18
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <get_key_pressed+0xa8>

			// If two values are already given, reset the current input and start over
			if(key_index == 2){
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	f1 2c       	mov	r15, r1
     7b6:	f1 10       	cpse	r15, r1
				floor_value = 0;
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <get_key_pressed+0xb2>
				key_index = 0;
     7ba:	f3 94       	inc	r15
			}
			
			// Add the First value "X + Y"
			if(key_index == 0){
     7bc:	01 2f       	mov	r16, r17
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <get_key_pressed+0xc6>
				floor_value = key_value;
				key_index++;
     7c0:	31 e0       	ldi	r19, 0x01	; 1
				key_index = 0;
			}
			
			// Add the First value "X + Y"
			if(key_index == 0){
				floor_value = key_value;
     7c2:	f3 12       	cpse	r15, r19
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <get_key_pressed+0xc6>
				key_index++;
				
				// Add the Second value "X + Y"
				} else if (key_index == 1){
     7c6:	00 0f       	add	r16, r16
     7c8:	80 2f       	mov	r24, r16
     7ca:	88 0f       	add	r24, r24
				floor_value = floor_value*10 + key_value;
     7cc:	88 0f       	add	r24, r24
     7ce:	08 0f       	add	r16, r24
     7d0:	01 0f       	add	r16, r17
     7d2:	f3 94       	inc	r15
     7d4:	4a e0       	ldi	r20, 0x0A	; 10
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	6c 01       	movw	r12, r24
     7dc:	bc 01       	movw	r22, r24
     7de:	80 2f       	mov	r24, r16
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	45 d2       	rcall	.+1162   	; 0xc6e <__itoa_ncheck>
     7e4:	82 ea       	ldi	r24, 0xA2	; 162
				key_index++;
			}
			
			itoa(floor_value, key, 10);
			UART_send_string("Current floor: ");
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	52 df       	rcall	.-348    	; 0x68e <UART_send_string>
     7ea:	c6 01       	movw	r24, r12
			UART_send_string(key);
     7ec:	50 df       	rcall	.-352    	; 0x68e <UART_send_string>
     7ee:	df 92       	push	r13
			char lcd_msg[16];
			sprintf(lcd_msg, "Input: %s", key);
     7f0:	cf 92       	push	r12
     7f2:	82 eb       	ldi	r24, 0xB2	; 178
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	6e 01       	movw	r12, r28
     7fc:	91 e1       	ldi	r25, 0x11	; 17
     7fe:	c9 0e       	add	r12, r25
     800:	d1 1c       	adc	r13, r1
     802:	df 92       	push	r13
     804:	cf 92       	push	r12
     806:	56 d2       	rcall	.+1196   	; 0xcb4 <sprintf>
     808:	c6 01       	movw	r24, r12
			LCD_top(lcd_msg);
     80a:	e1 de       	rcall	.-574    	; 0x5ce <LCD_top>
     80c:	80 ed       	ldi	r24, 0xD0	; 208
     80e:	93 e0       	ldi	r25, 0x03	; 3
			UART_send_string ("\r\n");
     810:	3e df       	rcall	.-388    	; 0x68e <UART_send_string>
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	2b c0       	rjmp	.+86     	; 0x876 <get_key_pressed+0x168>
		}
		
		// If key input is '*' we are ready with inputs.
		//}
		
		else if(key_signal == 42){
     820:	8a 32       	cpi	r24, 0x2A	; 42
     822:	99 f4       	brne	.+38     	; 0x84a <get_key_pressed+0x13c>
     824:	4a e0       	ldi	r20, 0x0A	; 10
     826:	be 01       	movw	r22, r28
     828:	6f 5f       	subi	r22, 0xFF	; 255
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	80 2f       	mov	r24, r16
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	1e d2       	rcall	.+1084   	; 0xc6e <__itoa_ncheck>
			keypad_ready = 1;
			itoa(floor_value, key, 10);
			UART_send_string("Set floor: ");
     832:	8c eb       	ldi	r24, 0xBC	; 188
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	2b df       	rcall	.-426    	; 0x68e <UART_send_string>
			UART_send_string(key);
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	28 df       	rcall	.-432    	; 0x68e <UART_send_string>
			UART_send_string ("\r\n");
     83e:	80 ed       	ldi	r24, 0xD0	; 208
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	25 df       	rcall	.-438    	; 0x68e <UART_send_string>
		
		// If key input is '*' we are ready with inputs.
		//}
		
		else if(key_signal == 42){
			keypad_ready = 1;
     844:	ee 24       	eor	r14, r14
     846:	e3 94       	inc	r14
     848:	16 c0       	rjmp	.+44     	; 0x876 <get_key_pressed+0x168>
     84a:	4a e0       	ldi	r20, 0x0A	; 10
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	80 2f       	mov	r24, r16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0b d2       	rcall	.+1046   	; 0xc6e <__itoa_ncheck>
			UART_send_string("Set floor: ");
			UART_send_string(key);
			UART_send_string ("\r\n");
			} else {
			itoa(floor_value, key, 10);
			UART_send_string("Key pressed: ");
     858:	88 ec       	ldi	r24, 0xC8	; 200
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	18 df       	rcall	.-464    	; 0x68e <UART_send_string>
     85e:	ce 01       	movw	r24, r28
			UART_send_string(key);
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	15 df       	rcall	.-470    	; 0x68e <UART_send_string>
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	93 e0       	ldi	r25, 0x03	; 3
			UART_send_string ("\r\n");
     868:	12 df       	rcall	.-476    	; 0x68e <UART_send_string>
     86a:	86 ed       	ldi	r24, 0xD6	; 214
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0f df       	rcall	.-482    	; 0x68e <UART_send_string>
			UART_send_string("Give proper value between 0 - 9");
     870:	80 ed       	ldi	r24, 0xD0	; 208
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	0c df       	rcall	.-488    	; 0x68e <UART_send_string>
     876:	ee 20       	and	r14, r14
			UART_send_string ("\r\n");
     878:	09 f4       	brne	.+2      	; 0x87c <get_key_pressed+0x16e>
     87a:	69 cf       	rjmp	.-302    	; 0x74e <get_key_pressed+0x40>
     87c:	80 2f       	mov	r24, r16
     87e:	a0 96       	adiw	r28, 0x20	; 32
	UART_send_string("Select floor between 0 - 99.");
	UART_send_string ("\r\n");
	UART_send_string("'*' confirms floor.");
	UART_send_string ("\r\n");
	
	while(keypad_ready == 0){
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
			UART_send_string("Give proper value between 0 - 9");
			UART_send_string ("\r\n");
		}
	}
	return floor_value;
}
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	08 95       	ret

0000089c <TWI_start>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	84 ea       	ldi	r24, 0xA4	; 164
     8a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
uint8_t TWI_start(void) {
	// Send START condition
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
     8a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8aa:	88 23       	and	r24, r24
     8ac:	e4 f7       	brge	.-8      	; 0x8a6 <TWI_start+0xa>
	
	// Check if START was sent successfully (status code 0x08)
	if ((TWSR & 0xF8) != 0x08) {
     8ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     8b2:	88 7f       	andi	r24, 0xF8	; 248
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	99 f0       	breq	.+38     	; 0x8de <TWI_start+0x42>
		UART_send_string("TWI start error: 0x");
     8b8:	86 ef       	ldi	r24, 0xF6	; 246
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	e8 de       	rcall	.-560    	; 0x68e <UART_send_string>
		UART_send_char('0' + ((TWSR & 0xF8) >> 4));
     8be:	c9 eb       	ldi	r28, 0xB9	; 185
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
     8c2:	88 81       	ld	r24, Y
     8c4:	82 95       	swap	r24
     8c6:	8f 70       	andi	r24, 0x0F	; 15
     8c8:	80 5d       	subi	r24, 0xD0	; 208
     8ca:	da de       	rcall	.-588    	; 0x680 <UART_send_char>
		UART_send_char('0' + (TWSR & 0x0F));
     8cc:	88 81       	ld	r24, Y
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	80 5d       	subi	r24, 0xD0	; 208
     8d2:	d6 de       	rcall	.-596    	; 0x680 <UART_send_char>
		UART_send_string("\r\n");
     8d4:	80 ed       	ldi	r24, 0xD0	; 208
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	da de       	rcall	.-588    	; 0x68e <UART_send_string>
     8da:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error: START not acknowledged
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <TWI_start+0x44>
     8de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
     8e0:	df 91       	pop	r29
}
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <TWI_write>:
     8e6:	cf 93       	push	r28

// Write a byte to the TWI bus
uint8_t TWI_write(uint8_t data) {
     8e8:	df 93       	push	r29
	// Load data into TWDR register
	TWDR = data;
     8ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	
	// Start transmission
	TWCR = (1 << TWINT) | (1 << TWEN);
     8ee:	84 e8       	ldi	r24, 0x84	; 132
     8f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
     8f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     8f8:	88 23       	and	r24, r24
     8fa:	e4 f7       	brge	.-8      	; 0x8f4 <TWI_write+0xe>
	
	// Check status
	uint8_t status = TWSR & 0xF8;
     8fc:	d0 91 b9 00 	lds	r29, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     900:	cd 2f       	mov	r28, r29
     902:	c8 7f       	andi	r28, 0xF8	; 248
	
	// For SLA+W, we expect 0x18 (ACK) or 0x20 (NACK)
	// For data byte, we expect 0x28 (ACK) or 0x30 (NACK)
	if (status != 0x18 && status != 0x28) {
     904:	c8 31       	cpi	r28, 0x18	; 24
     906:	99 f0       	breq	.+38     	; 0x92e <TWI_write+0x48>
     908:	c8 32       	cpi	r28, 0x28	; 40
     90a:	99 f0       	breq	.+38     	; 0x932 <TWI_write+0x4c>
		UART_send_string("TWI write error: 0x");
     90c:	8a e0       	ldi	r24, 0x0A	; 10
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	be de       	rcall	.-644    	; 0x68e <UART_send_string>
		UART_send_char('0' + (status >> 4));
     912:	8c 2f       	mov	r24, r28
     914:	82 95       	swap	r24
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	80 5d       	subi	r24, 0xD0	; 208
     91a:	b2 de       	rcall	.-668    	; 0x680 <UART_send_char>
		UART_send_char('0' + (status & 0x0F));
     91c:	8d 2f       	mov	r24, r29
     91e:	88 70       	andi	r24, 0x08	; 8
     920:	80 5d       	subi	r24, 0xD0	; 208
     922:	ae de       	rcall	.-676    	; 0x680 <UART_send_char>
		UART_send_string("\r\n");
     924:	80 ed       	ldi	r24, 0xD0	; 208
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	b2 de       	rcall	.-668    	; 0x68e <UART_send_string>
     92a:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error
     92c:	03 c0       	rjmp	.+6      	; 0x934 <TWI_write+0x4e>
     92e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
     930:	01 c0       	rjmp	.+2      	; 0x934 <TWI_write+0x4e>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	df 91       	pop	r29
}
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <send_command>:
     93a:	cf 93       	push	r28
	}
	return floor_value;
}

// Send a command to the slave device
void send_command(char cmd) {
     93c:	c8 2f       	mov	r28, r24
	UART_send_string("Sending command: ");
     93e:	8e e1       	ldi	r24, 0x1E	; 30
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	a5 de       	rcall	.-694    	; 0x68e <UART_send_string>
	UART_send_char(cmd);
     944:	8c 2f       	mov	r24, r28
     946:	9c de       	rcall	.-712    	; 0x680 <UART_send_char>
	UART_send_string("\r\n");
     948:	80 ed       	ldi	r24, 0xD0	; 208
     94a:	93 e0       	ldi	r25, 0x03	; 3
	
	if (TWI_start()) {
     94c:	a0 de       	rcall	.-704    	; 0x68e <UART_send_string>
     94e:	a6 df       	rcall	.-180    	; 0x89c <TWI_start>
     950:	88 23       	and	r24, r24
		UART_send_string("TWI started\r\n");
     952:	51 f1       	breq	.+84     	; 0x9a8 <send_command+0x6e>
     954:	80 e3       	ldi	r24, 0x30	; 48
     956:	93 e0       	ldi	r25, 0x03	; 3
		
		if (TWI_write((SLAVE_ADDRESS << 1) | 0)) {  // SLA+W
     958:	9a de       	rcall	.-716    	; 0x68e <UART_send_string>
     95a:	8e ea       	ldi	r24, 0xAE	; 174
     95c:	c4 df       	rcall	.-120    	; 0x8e6 <TWI_write>
     95e:	88 23       	and	r24, r24
			if (TWI_write(cmd)) {
     960:	d9 f0       	breq	.+54     	; 0x998 <send_command+0x5e>
     962:	8c 2f       	mov	r24, r28
     964:	c0 df       	rcall	.-128    	; 0x8e6 <TWI_write>
     966:	88 23       	and	r24, r24
				UART_send_string("Command sent successfully\r\n");
     968:	99 f0       	breq	.+38     	; 0x990 <send_command+0x56>
     96a:	8e e3       	ldi	r24, 0x3E	; 62
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	8f de       	rcall	.-738    	; 0x68e <UART_send_string>
				// Flash an indicator LED on the master
				PORTB |= (1 << PB7);  // Turn on LED on pin 13
     970:	85 b1       	in	r24, 0x05	; 5
     972:	80 68       	ori	r24, 0x80	; 128
     974:	85 b9       	out	0x05, r24	; 5
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	81 ee       	ldi	r24, 0xE1	; 225
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <send_command+0x42>
     984:	00 c0       	rjmp	.+0      	; 0x986 <send_command+0x4c>
				_delay_ms(100);
				PORTB &= ~(1 << PB7); // Turn off LED
     986:	00 00       	nop
     988:	85 b1       	in	r24, 0x05	; 5
     98a:	8f 77       	andi	r24, 0x7F	; 127
			} else {
				UART_send_string("Failed to send command\r\n");
     98c:	85 b9       	out	0x05, r24	; 5
     98e:	07 c0       	rjmp	.+14     	; 0x99e <send_command+0x64>
     990:	8a e5       	ldi	r24, 0x5A	; 90
     992:	93 e0       	ldi	r25, 0x03	; 3
			}
		} else {
			UART_send_string("Slave not responding\r\n");
     994:	7c de       	rcall	.-776    	; 0x68e <UART_send_string>
     996:	03 c0       	rjmp	.+6      	; 0x99e <send_command+0x64>
     998:	83 e7       	ldi	r24, 0x73	; 115
		}		
		TWI_stop();
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	78 de       	rcall	.-784    	; 0x68e <UART_send_string>
		UART_send_string("TWI stopped\r\n");
     99e:	5a de       	rcall	.-844    	; 0x654 <TWI_stop>
     9a0:	8a e8       	ldi	r24, 0x8A	; 138
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	74 de       	rcall	.-792    	; 0x68e <UART_send_string>
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <send_command+0x74>
	} else {
		UART_send_string("TWI start failed\r\n");
     9a8:	88 e9       	ldi	r24, 0x98	; 152
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	70 de       	rcall	.-800    	; 0x68e <UART_send_string>
     9ae:	cf 91       	pop	r28
	}
}
     9b0:	08 95       	ret

000009b2 <door_open_close>:
     9b2:	8b ea       	ldi	r24, 0xAB	; 171
	}
	return 0;
}

void door_open_close(){
	UART_send_string("Door open!\r\n");
     9b4:	93 e0       	ldi	r25, 0x03	; 3
     9b6:	6b de       	rcall	.-810    	; 0x68e <UART_send_string>
	send_command('O');
     9b8:	8f e4       	ldi	r24, 0x4F	; 79
     9ba:	bf df       	rcall	.-130    	; 0x93a <send_command>
	LCD_top("Door is open");
     9bc:	88 eb       	ldi	r24, 0xB8	; 184
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	06 de       	rcall	.-1012   	; 0x5ce <LCD_top>
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	83 e2       	ldi	r24, 0x23	; 35
     9c6:	94 ef       	ldi	r25, 0xF4	; 244
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	90 40       	sbci	r25, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <door_open_close+0x16>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <door_open_close+0x20>
	_delay_ms(5000);
	
	UART_send_string("Door close!\r\n");
     9d2:	00 00       	nop
     9d4:	85 ec       	ldi	r24, 0xC5	; 197
     9d6:	93 e0       	ldi	r25, 0x03	; 3
	send_command('C');
     9d8:	5a de       	rcall	.-844    	; 0x68e <UART_send_string>
     9da:	83 e4       	ldi	r24, 0x43	; 67
	LCD_top("Door is closed");
     9dc:	ae df       	rcall	.-164    	; 0x93a <send_command>
     9de:	83 ed       	ldi	r24, 0xD3	; 211
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	f5 dd       	rcall	.-1046   	; 0x5ce <LCD_top>
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	83 ed       	ldi	r24, 0xD3	; 211
     9e8:	90 e3       	ldi	r25, 0x30	; 48
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	80 40       	sbci	r24, 0x00	; 0
     9ee:	90 40       	sbci	r25, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <door_open_close+0x38>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <door_open_close+0x42>
	_delay_ms(1000);
	LCD_top("Choose the floor");
     9f4:	00 00       	nop
     9f6:	8e e0       	ldi	r24, 0x0E	; 14
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	e9 cd       	rjmp	.-1070   	; 0x5ce <LCD_top>
     9fc:	08 95       	ret

000009fe <main>:
char key_str[4];
char* ptr;

uint8_t key_input = 0;

int main(void) {
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	6e 97       	sbiw	r28, 0x1e	; 30
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
	
	setup();
     a12:	49 de       	rcall	.-878    	; 0x6a6 <setup>
	
	char str[30];  // Varataan 30 muistipaikkaa stringille
	
	while (1) {

		key_input = get_key_pressed();
     a14:	7c de       	rcall	.-776    	; 0x70e <get_key_pressed>
     a16:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__data_end>
     a1a:	4e e1       	ldi	r20, 0x1E	; 30
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	24 d1       	rcall	.+584    	; 0xc6e <__itoa_ncheck>
     a26:	83 e8       	ldi	r24, 0x83	; 131
		
		itoa(key_input, str, 30);
		UART_send_string("Pressed key: ");
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	31 de       	rcall	.-926    	; 0x68e <UART_send_string>
     a2c:	ce 01       	movw	r24, r28
		UART_send_string(str);
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	2e de       	rcall	.-932    	; 0x68e <UART_send_string>
     a32:	80 ed       	ldi	r24, 0xD0	; 208
		UART_send_string ("\r\n");
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	2b de       	rcall	.-938    	; 0x68e <UART_send_string>
     a38:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
		
		// Define next state
		if(current_floor < key_input) { current_state = 1; }
     a3c:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <__data_end>
     a40:	82 17       	cp	r24, r18
     a42:	18 f4       	brcc	.+6      	; 0xa4a <main+0x4c>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <current_state>
     a4a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
		if(current_floor == key_input) { current_state = 2; }
     a4e:	28 13       	cpse	r18, r24
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <main+0x5a>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <current_state>
     a58:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
		if(current_floor > key_input) { current_state = 3; }
     a5c:	28 17       	cp	r18, r24
     a5e:	18 f4       	brcc	.+6      	; 0xa66 <main+0x68>
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <current_state>
     a66:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
		
		floors_to_travel = abs(current_floor - key_input);
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	82 1b       	sub	r24, r18
     a6e:	91 09       	sbc	r25, r1
     a70:	9c 01       	movw	r18, r24
     a72:	22 f4       	brpl	.+8      	; 0xa7c <main+0x7e>
     a74:	22 27       	eor	r18, r18
     a76:	33 27       	eor	r19, r19
     a78:	28 1b       	sub	r18, r24
     a7a:	39 0b       	sbc	r19, r25
     a7c:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <floors_to_travel>
     a80:	82 ea       	ldi	r24, 0xA2	; 162
		
		// Debug:
		
		UART_send_string("Current floor: ");
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	04 de       	rcall	.-1016   	; 0x68e <UART_send_string>
     a86:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
		itoa(current_floor, str, 20);
     a8a:	44 e1       	ldi	r20, 0x14	; 20
     a8c:	be 01       	movw	r22, r28
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	ec d0       	rcall	.+472    	; 0xc6e <__itoa_ncheck>
		UART_send_string(str);
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	f9 dd       	rcall	.-1038   	; 0x68e <UART_send_string>
     a9c:	82 ee       	ldi	r24, 0xE2	; 226
		UART_send_string(", Floors to travel: ");
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	f6 dd       	rcall	.-1044   	; 0x68e <UART_send_string>
     aa2:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <floors_to_travel>
     aa6:	44 e1       	ldi	r20, 0x14	; 20
     aa8:	be 01       	movw	r22, r28
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	de d0       	rcall	.+444    	; 0xc6e <__itoa_ncheck>
		itoa(floors_to_travel, str, 20);
		UART_send_string(str);
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	eb dd       	rcall	.-1066   	; 0x68e <UART_send_string>
     ab8:	80 ed       	ldi	r24, 0xD0	; 208
		UART_send_string("\r\n");
     aba:	93 e0       	ldi	r25, 0x03	; 3
     abc:	e8 dd       	rcall	.-1072   	; 0x68e <UART_send_string>
     abe:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <current_state>
		
		switch(current_state){
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	09 f4       	brne	.+2      	; 0xac8 <main+0xca>
     ac6:	52 c0       	rjmp	.+164    	; 0xb6c <main+0x16e>
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	09 f4       	brne	.+2      	; 0xace <main+0xd0>
     acc:	76 c0       	rjmp	.+236    	; 0xbba <main+0x1bc>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	09 f0       	breq	.+2      	; 0xad4 <main+0xd6>
     ad2:	be c0       	rjmp	.+380    	; 0xc50 <main+0x252>
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	89 ef       	ldi	r24, 0xF9	; 249
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <main+0xdc>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <main+0xe6>
			case 1: // GO UP
			
				_delay_ms(20);  // Debounce
    
				UART_send_string("Going up!\r\n");
     ae4:	00 00       	nop
     ae6:	87 ef       	ldi	r24, 0xF7	; 247
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	d1 dd       	rcall	.-1118   	; 0x68e <UART_send_string>
				send_command('M');
     aec:	8d e4       	ldi	r24, 0x4D	; 77
     aee:	25 df       	rcall	.-438    	; 0x93a <send_command>
				LCD_top("Going up");
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	94 e0       	ldi	r25, 0x04	; 4
     af4:	6c dd       	rcall	.-1320   	; 0x5ce <LCD_top>
     af6:	00 e0       	ldi	r16, 0x00	; 0
				
				for(int i = 0; i < floors_to_travel; i++){
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	25 c0       	rjmp	.+74     	; 0xb46 <main+0x148>
					current_floor++;					
     afc:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <current_floor>
					UART_send_string("Moving to floor: ");
     b06:	8c e0       	ldi	r24, 0x0C	; 12
     b08:	94 e0       	ldi	r25, 0x04	; 4
					itoa(current_floor, str, 10);
     b0a:	c1 dd       	rcall	.-1150   	; 0x68e <UART_send_string>
     b0c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
     b10:	4a e0       	ldi	r20, 0x0A	; 10
     b12:	be 01       	movw	r22, r28
     b14:	6f 5f       	subi	r22, 0xFF	; 255
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
     b1a:	a9 d0       	rcall	.+338    	; 0xc6e <__itoa_ncheck>
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	b6 dd       	rcall	.-1172   	; 0x68e <UART_send_string>
					UART_send_string("\r\n");
     b22:	80 ed       	ldi	r24, 0xD0	; 208
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	b3 dd       	rcall	.-1178   	; 0x68e <UART_send_string>
     b28:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
					LCD_bottom(current_floor); // Update LCD as elevator moves
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	5c dd       	rcall	.-1352   	; 0x5e8 <LCD_bottom>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	81 ee       	ldi	r24, 0xE1	; 225
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x138>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x142>
     b40:	00 00       	nop
    
				UART_send_string("Going up!\r\n");
				send_command('M');
				LCD_top("Going up");
				
				for(int i = 0; i < floors_to_travel; i++){
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <floors_to_travel>
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	08 17       	cp	r16, r24
     b4e:	19 07       	cpc	r17, r25
     b50:	ac f2       	brlt	.-86     	; 0xafc <main+0xfe>
					UART_send_string(str);
					UART_send_string("\r\n");
					LCD_bottom(current_floor); // Update LCD as elevator moves
					_delay_ms(100); // ELEVATOR MOVEMENT SPEED
				}
				send_command('S');
     b52:	83 e5       	ldi	r24, 0x53	; 83
     b54:	f2 de       	rcall	.-540    	; 0x93a <send_command>
     b56:	2d df       	rcall	.-422    	; 0x9b2 <door_open_close>
				
				// Door open-close sequence
				door_open_close();
     b58:	2f ef       	ldi	r18, 0xFF	; 255
     b5a:	83 ec       	ldi	r24, 0xC3	; 195
     b5c:	99 e0       	ldi	r25, 0x09	; 9
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	80 40       	sbci	r24, 0x00	; 0
     b62:	90 40       	sbci	r25, 0x00	; 0
     b64:	e1 f7       	brne	.-8      	; 0xb5e <main+0x160>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <main+0x16a>
     b68:	00 00       	nop
     b6a:	72 c0       	rjmp	.+228    	; 0xc50 <main+0x252>
     b6c:	2f ef       	ldi	r18, 0xFF	; 255
     b6e:	89 ef       	ldi	r24, 0xF9	; 249
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	21 50       	subi	r18, 0x01	; 1
     b74:	80 40       	sbci	r24, 0x00	; 0
     b76:	90 40       	sbci	r25, 0x00	; 0
     b78:	e1 f7       	brne	.-8      	; 0xb72 <main+0x174>
			
			case 2: // SAME FLOOR -> Fault state
			
				_delay_ms(20);  // Debounce
			
				UART_send_string("Fault state.\r\n");
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <main+0x17e>
     b7c:	00 00       	nop
     b7e:	8e e1       	ldi	r24, 0x1E	; 30
     b80:	94 e0       	ldi	r25, 0x04	; 4
				LCD_top("Same Floor");
     b82:	85 dd       	rcall	.-1270   	; 0x68e <UART_send_string>
     b84:	8d e2       	ldi	r24, 0x2D	; 45
     b86:	94 e0       	ldi	r25, 0x04	; 4
     b88:	22 dd       	rcall	.-1468   	; 0x5ce <LCD_top>
				send_command('F'); // Fault state, blink movement led 3 times
     b8a:	86 e4       	ldi	r24, 0x46	; 70
     b8c:	d6 de       	rcall	.-596    	; 0x93a <send_command>
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	87 e9       	ldi	r24, 0x97	; 151
     b92:	9a e3       	ldi	r25, 0x3A	; 58
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	80 40       	sbci	r24, 0x00	; 0
     b98:	90 40       	sbci	r25, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0x196>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0x1a0>
     b9e:	00 00       	nop
				_delay_ms(1200);
				LCD_top("Choose the floor");
     ba0:	8e e0       	ldi	r24, 0x0E	; 14
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	14 dd       	rcall	.-1496   	; 0x5ce <LCD_top>
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	83 ec       	ldi	r24, 0xC3	; 195
     baa:	99 e0       	ldi	r25, 0x09	; 9
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x1ae>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x1b8>
     bb6:	00 00       	nop
     bb8:	4b c0       	rjmp	.+150    	; 0xc50 <main+0x252>
     bba:	2f ef       	ldi	r18, 0xFF	; 255
     bbc:	89 ef       	ldi	r24, 0xF9	; 249
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	21 50       	subi	r18, 0x01	; 1
     bc2:	80 40       	sbci	r24, 0x00	; 0
     bc4:	90 40       	sbci	r25, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <main+0x1c2>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <main+0x1cc>
				break;
				
			case 3: // GO DOWN
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
     bca:	00 00       	nop
     bcc:	88 e3       	ldi	r24, 0x38	; 56
     bce:	94 e0       	ldi	r25, 0x04	; 4
				send_command('M');
     bd0:	5e dd       	rcall	.-1348   	; 0x68e <UART_send_string>
     bd2:	8d e4       	ldi	r24, 0x4D	; 77
				LCD_top("Going down");
     bd4:	b2 de       	rcall	.-668    	; 0x93a <send_command>
     bd6:	86 e4       	ldi	r24, 0x46	; 70
     bd8:	94 e0       	ldi	r25, 0x04	; 4
				for(int i = 0; i < floors_to_travel; i++){
     bda:	f9 dc       	rcall	.-1550   	; 0x5ce <LCD_top>
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
					current_floor--;
     be0:	25 c0       	rjmp	.+74     	; 0xc2c <main+0x22e>
     be2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <current_floor>
					UART_send_string("Moving to floor: ");
     bec:	8c e0       	ldi	r24, 0x0C	; 12
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	4e dd       	rcall	.-1380   	; 0x68e <UART_send_string>
					itoa(current_floor, str, 10);
     bf2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
     bf6:	4a e0       	ldi	r20, 0x0A	; 10
     bf8:	be 01       	movw	r22, r28
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
     c00:	36 d0       	rcall	.+108    	; 0xc6e <__itoa_ncheck>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	43 dd       	rcall	.-1402   	; 0x68e <UART_send_string>
					UART_send_string("\r\n");
     c08:	80 ed       	ldi	r24, 0xD0	; 208
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	40 dd       	rcall	.-1408   	; 0x68e <UART_send_string>
     c0e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <current_floor>
					LCD_bottom(current_floor); // Update LCD as elevator moves
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	e9 dc       	rcall	.-1582   	; 0x5e8 <LCD_bottom>
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	81 ee       	ldi	r24, 0xE1	; 225
     c1a:	94 e0       	ldi	r25, 0x04	; 4
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	80 40       	sbci	r24, 0x00	; 0
     c20:	90 40       	sbci	r25, 0x00	; 0
     c22:	e1 f7       	brne	.-8      	; 0xc1c <main+0x21e>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <main+0x228>
     c26:	00 00       	nop
     c28:	0f 5f       	subi	r16, 0xFF	; 255
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
				send_command('M');
				LCD_top("Going down");
				for(int i = 0; i < floors_to_travel; i++){
     c2c:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <floors_to_travel>
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 17       	cp	r16, r24
     c34:	19 07       	cpc	r17, r25
     c36:	ac f2       	brlt	.-86     	; 0xbe2 <main+0x1e4>
     c38:	83 e5       	ldi	r24, 0x53	; 83
     c3a:	7f de       	rcall	.-770    	; 0x93a <send_command>
					UART_send_string("\r\n");
					LCD_bottom(current_floor); // Update LCD as elevator moves
					_delay_ms(100); // ELEVATOR MOVEMENT SPEED
				}
				
				send_command('S');
     c3c:	ba de       	rcall	.-652    	; 0x9b2 <door_open_close>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	83 ec       	ldi	r24, 0xC3	; 195
				
				// Door open-close sequence
				door_open_close();
     c42:	99 e0       	ldi	r25, 0x09	; 9
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <main+0x246>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <main+0x250>
     c4e:	00 00       	nop
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	9c e9       	ldi	r25, 0x9C	; 156
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <main+0x256>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <main+0x25c>
     c5a:	00 00       	nop
     c5c:	db ce       	rjmp	.-586    	; 0xa14 <main+0x16>

00000c5e <__tablejump2__>:
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	88 1f       	adc	r24, r24
     c64:	8b bf       	out	0x3b, r24	; 59
     c66:	07 90       	elpm	r0, Z+
     c68:	f6 91       	elpm	r31, Z
     c6a:	e0 2d       	mov	r30, r0
     c6c:	19 94       	eijmp

00000c6e <__itoa_ncheck>:
     c6e:	bb 27       	eor	r27, r27
     c70:	4a 30       	cpi	r20, 0x0A	; 10
     c72:	31 f4       	brne	.+12     	; 0xc80 <__itoa_ncheck+0x12>
     c74:	99 23       	and	r25, r25
     c76:	22 f4       	brpl	.+8      	; 0xc80 <__itoa_ncheck+0x12>
     c78:	bd e2       	ldi	r27, 0x2D	; 45
     c7a:	90 95       	com	r25
     c7c:	81 95       	neg	r24
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <__utoa_common>

00000c82 <__utoa_ncheck>:
     c82:	bb 27       	eor	r27, r27

00000c84 <__utoa_common>:
     c84:	fb 01       	movw	r30, r22
     c86:	55 27       	eor	r21, r21
     c88:	aa 27       	eor	r26, r26
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	a4 17       	cp	r26, r20
     c92:	10 f0       	brcs	.+4      	; 0xc98 <__utoa_common+0x14>
     c94:	a4 1b       	sub	r26, r20
     c96:	83 95       	inc	r24
     c98:	50 51       	subi	r21, 0x10	; 16
     c9a:	b9 f7       	brne	.-18     	; 0xc8a <__utoa_common+0x6>
     c9c:	a0 5d       	subi	r26, 0xD0	; 208
     c9e:	aa 33       	cpi	r26, 0x3A	; 58
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <__utoa_common+0x20>
     ca2:	a9 5d       	subi	r26, 0xD9	; 217
     ca4:	a1 93       	st	Z+, r26
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	79 f7       	brne	.-34     	; 0xc88 <__utoa_common+0x4>
     caa:	b1 11       	cpse	r27, r1
     cac:	b1 93       	st	Z+, r27
     cae:	11 92       	st	Z+, r1
     cb0:	cb 01       	movw	r24, r22
     cb2:	41 c2       	rjmp	.+1154   	; 0x1136 <strrev>

00000cb4 <sprintf>:
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	2e 97       	sbiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	0e 89       	ldd	r16, Y+22	; 0x16
     cce:	1f 89       	ldd	r17, Y+23	; 0x17
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	8c 83       	std	Y+4, r24	; 0x04
     cd4:	1a 83       	std	Y+2, r17	; 0x02
     cd6:	09 83       	std	Y+1, r16	; 0x01
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	9f e7       	ldi	r25, 0x7F	; 127
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	ae 01       	movw	r20, r28
     ce2:	46 5e       	subi	r20, 0xE6	; 230
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	68 8d       	ldd	r22, Y+24	; 0x18
     ce8:	79 8d       	ldd	r23, Y+25	; 0x19
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	10 d0       	rcall	.+32     	; 0xd10 <vfprintf>
     cf0:	ef 81       	ldd	r30, Y+7	; 0x07
     cf2:	f8 85       	ldd	r31, Y+8	; 0x08
     cf4:	e0 0f       	add	r30, r16
     cf6:	f1 1f       	adc	r31, r17
     cf8:	10 82       	st	Z, r1
     cfa:	2e 96       	adiw	r28, 0x0e	; 14
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <vfprintf>:
     d10:	2f 92       	push	r2
     d12:	3f 92       	push	r3
     d14:	4f 92       	push	r4
     d16:	5f 92       	push	r5
     d18:	6f 92       	push	r6
     d1a:	7f 92       	push	r7
     d1c:	8f 92       	push	r8
     d1e:	9f 92       	push	r9
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2b 97       	sbiw	r28, 0x0b	; 11
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	6c 01       	movw	r12, r24
     d46:	7b 01       	movw	r14, r22
     d48:	8a 01       	movw	r16, r20
     d4a:	fc 01       	movw	r30, r24
     d4c:	17 82       	std	Z+7, r1	; 0x07
     d4e:	16 82       	std	Z+6, r1	; 0x06
     d50:	83 81       	ldd	r24, Z+3	; 0x03
     d52:	81 ff       	sbrs	r24, 1
     d54:	bf c1       	rjmp	.+894    	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
     d56:	ce 01       	movw	r24, r28
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	3c 01       	movw	r6, r24
     d5c:	f6 01       	movw	r30, r12
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	f7 01       	movw	r30, r14
     d62:	93 fd       	sbrc	r25, 3
     d64:	85 91       	lpm	r24, Z+
     d66:	93 ff       	sbrs	r25, 3
     d68:	81 91       	ld	r24, Z+
     d6a:	7f 01       	movw	r14, r30
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <vfprintf+0x62>
     d70:	ad c1       	rjmp	.+858    	; 0x10cc <__EEPROM_REGION_LENGTH__+0xcc>
     d72:	85 32       	cpi	r24, 0x25	; 37
     d74:	39 f4       	brne	.+14     	; 0xd84 <vfprintf+0x74>
     d76:	93 fd       	sbrc	r25, 3
     d78:	85 91       	lpm	r24, Z+
     d7a:	93 ff       	sbrs	r25, 3
     d7c:	81 91       	ld	r24, Z+
     d7e:	7f 01       	movw	r14, r30
     d80:	85 32       	cpi	r24, 0x25	; 37
     d82:	21 f4       	brne	.+8      	; 0xd8c <vfprintf+0x7c>
     d84:	b6 01       	movw	r22, r12
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	e6 d1       	rcall	.+972    	; 0x1156 <fputc>
     d8a:	e8 cf       	rjmp	.-48     	; 0xd5c <vfprintf+0x4c>
     d8c:	91 2c       	mov	r9, r1
     d8e:	21 2c       	mov	r2, r1
     d90:	31 2c       	mov	r3, r1
     d92:	ff e1       	ldi	r31, 0x1F	; 31
     d94:	f3 15       	cp	r31, r3
     d96:	d8 f0       	brcs	.+54     	; 0xdce <vfprintf+0xbe>
     d98:	8b 32       	cpi	r24, 0x2B	; 43
     d9a:	79 f0       	breq	.+30     	; 0xdba <vfprintf+0xaa>
     d9c:	38 f4       	brcc	.+14     	; 0xdac <vfprintf+0x9c>
     d9e:	80 32       	cpi	r24, 0x20	; 32
     da0:	79 f0       	breq	.+30     	; 0xdc0 <vfprintf+0xb0>
     da2:	83 32       	cpi	r24, 0x23	; 35
     da4:	a1 f4       	brne	.+40     	; 0xdce <vfprintf+0xbe>
     da6:	23 2d       	mov	r18, r3
     da8:	20 61       	ori	r18, 0x10	; 16
     daa:	1d c0       	rjmp	.+58     	; 0xde6 <vfprintf+0xd6>
     dac:	8d 32       	cpi	r24, 0x2D	; 45
     dae:	61 f0       	breq	.+24     	; 0xdc8 <vfprintf+0xb8>
     db0:	80 33       	cpi	r24, 0x30	; 48
     db2:	69 f4       	brne	.+26     	; 0xdce <vfprintf+0xbe>
     db4:	23 2d       	mov	r18, r3
     db6:	21 60       	ori	r18, 0x01	; 1
     db8:	16 c0       	rjmp	.+44     	; 0xde6 <vfprintf+0xd6>
     dba:	83 2d       	mov	r24, r3
     dbc:	82 60       	ori	r24, 0x02	; 2
     dbe:	38 2e       	mov	r3, r24
     dc0:	e3 2d       	mov	r30, r3
     dc2:	e4 60       	ori	r30, 0x04	; 4
     dc4:	3e 2e       	mov	r3, r30
     dc6:	2a c0       	rjmp	.+84     	; 0xe1c <vfprintf+0x10c>
     dc8:	f3 2d       	mov	r31, r3
     dca:	f8 60       	ori	r31, 0x08	; 8
     dcc:	1d c0       	rjmp	.+58     	; 0xe08 <vfprintf+0xf8>
     dce:	37 fc       	sbrc	r3, 7
     dd0:	2d c0       	rjmp	.+90     	; 0xe2c <vfprintf+0x11c>
     dd2:	20 ed       	ldi	r18, 0xD0	; 208
     dd4:	28 0f       	add	r18, r24
     dd6:	2a 30       	cpi	r18, 0x0A	; 10
     dd8:	40 f0       	brcs	.+16     	; 0xdea <vfprintf+0xda>
     dda:	8e 32       	cpi	r24, 0x2E	; 46
     ddc:	b9 f4       	brne	.+46     	; 0xe0c <vfprintf+0xfc>
     dde:	36 fc       	sbrc	r3, 6
     de0:	75 c1       	rjmp	.+746    	; 0x10cc <__EEPROM_REGION_LENGTH__+0xcc>
     de2:	23 2d       	mov	r18, r3
     de4:	20 64       	ori	r18, 0x40	; 64
     de6:	32 2e       	mov	r3, r18
     de8:	19 c0       	rjmp	.+50     	; 0xe1c <vfprintf+0x10c>
     dea:	36 fe       	sbrs	r3, 6
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <vfprintf+0xea>
     dee:	8a e0       	ldi	r24, 0x0A	; 10
     df0:	98 9e       	mul	r9, r24
     df2:	20 0d       	add	r18, r0
     df4:	11 24       	eor	r1, r1
     df6:	92 2e       	mov	r9, r18
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <vfprintf+0x10c>
     dfa:	ea e0       	ldi	r30, 0x0A	; 10
     dfc:	2e 9e       	mul	r2, r30
     dfe:	20 0d       	add	r18, r0
     e00:	11 24       	eor	r1, r1
     e02:	22 2e       	mov	r2, r18
     e04:	f3 2d       	mov	r31, r3
     e06:	f0 62       	ori	r31, 0x20	; 32
     e08:	3f 2e       	mov	r3, r31
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <vfprintf+0x10c>
     e0c:	8c 36       	cpi	r24, 0x6C	; 108
     e0e:	21 f4       	brne	.+8      	; 0xe18 <vfprintf+0x108>
     e10:	83 2d       	mov	r24, r3
     e12:	80 68       	ori	r24, 0x80	; 128
     e14:	38 2e       	mov	r3, r24
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x10c>
     e18:	88 36       	cpi	r24, 0x68	; 104
     e1a:	41 f4       	brne	.+16     	; 0xe2c <vfprintf+0x11c>
     e1c:	f7 01       	movw	r30, r14
     e1e:	93 fd       	sbrc	r25, 3
     e20:	85 91       	lpm	r24, Z+
     e22:	93 ff       	sbrs	r25, 3
     e24:	81 91       	ld	r24, Z+
     e26:	7f 01       	movw	r14, r30
     e28:	81 11       	cpse	r24, r1
     e2a:	b3 cf       	rjmp	.-154    	; 0xd92 <vfprintf+0x82>
     e2c:	98 2f       	mov	r25, r24
     e2e:	9f 7d       	andi	r25, 0xDF	; 223
     e30:	95 54       	subi	r25, 0x45	; 69
     e32:	93 30       	cpi	r25, 0x03	; 3
     e34:	28 f4       	brcc	.+10     	; 0xe40 <vfprintf+0x130>
     e36:	0c 5f       	subi	r16, 0xFC	; 252
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	9f e3       	ldi	r25, 0x3F	; 63
     e3c:	99 83       	std	Y+1, r25	; 0x01
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <vfprintf+0x14a>
     e40:	83 36       	cpi	r24, 0x63	; 99
     e42:	31 f0       	breq	.+12     	; 0xe50 <vfprintf+0x140>
     e44:	83 37       	cpi	r24, 0x73	; 115
     e46:	71 f0       	breq	.+28     	; 0xe64 <vfprintf+0x154>
     e48:	83 35       	cpi	r24, 0x53	; 83
     e4a:	09 f0       	breq	.+2      	; 0xe4e <vfprintf+0x13e>
     e4c:	55 c0       	rjmp	.+170    	; 0xef8 <vfprintf+0x1e8>
     e4e:	20 c0       	rjmp	.+64     	; 0xe90 <vfprintf+0x180>
     e50:	f8 01       	movw	r30, r16
     e52:	80 81       	ld	r24, Z
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	0e 5f       	subi	r16, 0xFE	; 254
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	88 24       	eor	r8, r8
     e5c:	83 94       	inc	r8
     e5e:	91 2c       	mov	r9, r1
     e60:	53 01       	movw	r10, r6
     e62:	12 c0       	rjmp	.+36     	; 0xe88 <vfprintf+0x178>
     e64:	28 01       	movw	r4, r16
     e66:	f2 e0       	ldi	r31, 0x02	; 2
     e68:	4f 0e       	add	r4, r31
     e6a:	51 1c       	adc	r5, r1
     e6c:	f8 01       	movw	r30, r16
     e6e:	a0 80       	ld	r10, Z
     e70:	b1 80       	ldd	r11, Z+1	; 0x01
     e72:	36 fe       	sbrs	r3, 6
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x16c>
     e76:	69 2d       	mov	r22, r9
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x170>
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	7f ef       	ldi	r23, 0xFF	; 255
     e80:	c5 01       	movw	r24, r10
     e82:	4e d1       	rcall	.+668    	; 0x1120 <strnlen>
     e84:	4c 01       	movw	r8, r24
     e86:	82 01       	movw	r16, r4
     e88:	f3 2d       	mov	r31, r3
     e8a:	ff 77       	andi	r31, 0x7F	; 127
     e8c:	3f 2e       	mov	r3, r31
     e8e:	15 c0       	rjmp	.+42     	; 0xeba <vfprintf+0x1aa>
     e90:	28 01       	movw	r4, r16
     e92:	22 e0       	ldi	r18, 0x02	; 2
     e94:	42 0e       	add	r4, r18
     e96:	51 1c       	adc	r5, r1
     e98:	f8 01       	movw	r30, r16
     e9a:	a0 80       	ld	r10, Z
     e9c:	b1 80       	ldd	r11, Z+1	; 0x01
     e9e:	36 fe       	sbrs	r3, 6
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <vfprintf+0x198>
     ea2:	69 2d       	mov	r22, r9
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x19c>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	c5 01       	movw	r24, r10
     eae:	2d d1       	rcall	.+602    	; 0x110a <strnlen_P>
     eb0:	4c 01       	movw	r8, r24
     eb2:	f3 2d       	mov	r31, r3
     eb4:	f0 68       	ori	r31, 0x80	; 128
     eb6:	3f 2e       	mov	r3, r31
     eb8:	82 01       	movw	r16, r4
     eba:	33 fc       	sbrc	r3, 3
     ebc:	19 c0       	rjmp	.+50     	; 0xef0 <vfprintf+0x1e0>
     ebe:	82 2d       	mov	r24, r2
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	88 16       	cp	r8, r24
     ec4:	99 06       	cpc	r9, r25
     ec6:	a0 f4       	brcc	.+40     	; 0xef0 <vfprintf+0x1e0>
     ec8:	b6 01       	movw	r22, r12
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	43 d1       	rcall	.+646    	; 0x1156 <fputc>
     ed0:	2a 94       	dec	r2
     ed2:	f5 cf       	rjmp	.-22     	; 0xebe <vfprintf+0x1ae>
     ed4:	f5 01       	movw	r30, r10
     ed6:	37 fc       	sbrc	r3, 7
     ed8:	85 91       	lpm	r24, Z+
     eda:	37 fe       	sbrs	r3, 7
     edc:	81 91       	ld	r24, Z+
     ede:	5f 01       	movw	r10, r30
     ee0:	b6 01       	movw	r22, r12
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	38 d1       	rcall	.+624    	; 0x1156 <fputc>
     ee6:	21 10       	cpse	r2, r1
     ee8:	2a 94       	dec	r2
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	82 1a       	sub	r8, r18
     eee:	91 08       	sbc	r9, r1
     ef0:	81 14       	cp	r8, r1
     ef2:	91 04       	cpc	r9, r1
     ef4:	79 f7       	brne	.-34     	; 0xed4 <vfprintf+0x1c4>
     ef6:	e1 c0       	rjmp	.+450    	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
     ef8:	84 36       	cpi	r24, 0x64	; 100
     efa:	11 f0       	breq	.+4      	; 0xf00 <vfprintf+0x1f0>
     efc:	89 36       	cpi	r24, 0x69	; 105
     efe:	39 f5       	brne	.+78     	; 0xf4e <vfprintf+0x23e>
     f00:	f8 01       	movw	r30, r16
     f02:	37 fe       	sbrs	r3, 7
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <vfprintf+0x204>
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	0c 5f       	subi	r16, 0xFC	; 252
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <vfprintf+0x214>
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	07 2e       	mov	r0, r23
     f1a:	00 0c       	add	r0, r0
     f1c:	88 0b       	sbc	r24, r24
     f1e:	99 0b       	sbc	r25, r25
     f20:	0e 5f       	subi	r16, 0xFE	; 254
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	f3 2d       	mov	r31, r3
     f26:	ff 76       	andi	r31, 0x6F	; 111
     f28:	3f 2e       	mov	r3, r31
     f2a:	97 ff       	sbrs	r25, 7
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <vfprintf+0x230>
     f2e:	90 95       	com	r25
     f30:	80 95       	com	r24
     f32:	70 95       	com	r23
     f34:	61 95       	neg	r22
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	f0 68       	ori	r31, 0x80	; 128
     f3e:	3f 2e       	mov	r3, r31
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	a3 01       	movw	r20, r6
     f46:	43 d1       	rcall	.+646    	; 0x11ce <__ultoa_invert>
     f48:	88 2e       	mov	r8, r24
     f4a:	86 18       	sub	r8, r6
     f4c:	44 c0       	rjmp	.+136    	; 0xfd6 <vfprintf+0x2c6>
     f4e:	85 37       	cpi	r24, 0x75	; 117
     f50:	31 f4       	brne	.+12     	; 0xf5e <vfprintf+0x24e>
     f52:	23 2d       	mov	r18, r3
     f54:	2f 7e       	andi	r18, 0xEF	; 239
     f56:	b2 2e       	mov	r11, r18
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	25 c0       	rjmp	.+74     	; 0xfa8 <vfprintf+0x298>
     f5e:	93 2d       	mov	r25, r3
     f60:	99 7f       	andi	r25, 0xF9	; 249
     f62:	b9 2e       	mov	r11, r25
     f64:	8f 36       	cpi	r24, 0x6F	; 111
     f66:	c1 f0       	breq	.+48     	; 0xf98 <vfprintf+0x288>
     f68:	18 f4       	brcc	.+6      	; 0xf70 <vfprintf+0x260>
     f6a:	88 35       	cpi	r24, 0x58	; 88
     f6c:	79 f0       	breq	.+30     	; 0xf8c <vfprintf+0x27c>
     f6e:	ae c0       	rjmp	.+348    	; 0x10cc <__EEPROM_REGION_LENGTH__+0xcc>
     f70:	80 37       	cpi	r24, 0x70	; 112
     f72:	19 f0       	breq	.+6      	; 0xf7a <vfprintf+0x26a>
     f74:	88 37       	cpi	r24, 0x78	; 120
     f76:	21 f0       	breq	.+8      	; 0xf80 <vfprintf+0x270>
     f78:	a9 c0       	rjmp	.+338    	; 0x10cc <__EEPROM_REGION_LENGTH__+0xcc>
     f7a:	e9 2f       	mov	r30, r25
     f7c:	e0 61       	ori	r30, 0x10	; 16
     f7e:	be 2e       	mov	r11, r30
     f80:	b4 fe       	sbrs	r11, 4
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <vfprintf+0x28e>
     f84:	fb 2d       	mov	r31, r11
     f86:	f4 60       	ori	r31, 0x04	; 4
     f88:	bf 2e       	mov	r11, r31
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <vfprintf+0x28e>
     f8c:	34 fe       	sbrs	r3, 4
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <vfprintf+0x294>
     f90:	29 2f       	mov	r18, r25
     f92:	26 60       	ori	r18, 0x06	; 6
     f94:	b2 2e       	mov	r11, r18
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <vfprintf+0x294>
     f98:	28 e0       	ldi	r18, 0x08	; 8
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <vfprintf+0x298>
     f9e:	20 e1       	ldi	r18, 0x10	; 16
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <vfprintf+0x298>
     fa4:	20 e1       	ldi	r18, 0x10	; 16
     fa6:	32 e0       	ldi	r19, 0x02	; 2
     fa8:	f8 01       	movw	r30, r16
     faa:	b7 fe       	sbrs	r11, 7
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <vfprintf+0x2ac>
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	0c 5f       	subi	r16, 0xFC	; 252
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <vfprintf+0x2b8>
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 5f       	subi	r16, 0xFE	; 254
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	a3 01       	movw	r20, r6
     fca:	01 d1       	rcall	.+514    	; 0x11ce <__ultoa_invert>
     fcc:	88 2e       	mov	r8, r24
     fce:	86 18       	sub	r8, r6
     fd0:	fb 2d       	mov	r31, r11
     fd2:	ff 77       	andi	r31, 0x7F	; 127
     fd4:	3f 2e       	mov	r3, r31
     fd6:	36 fe       	sbrs	r3, 6
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <vfprintf+0x2e4>
     fda:	23 2d       	mov	r18, r3
     fdc:	2e 7f       	andi	r18, 0xFE	; 254
     fde:	a2 2e       	mov	r10, r18
     fe0:	89 14       	cp	r8, r9
     fe2:	58 f4       	brcc	.+22     	; 0xffa <vfprintf+0x2ea>
     fe4:	34 fe       	sbrs	r3, 4
     fe6:	0b c0       	rjmp	.+22     	; 0xffe <vfprintf+0x2ee>
     fe8:	32 fc       	sbrc	r3, 2
     fea:	09 c0       	rjmp	.+18     	; 0xffe <vfprintf+0x2ee>
     fec:	83 2d       	mov	r24, r3
     fee:	8e 7e       	andi	r24, 0xEE	; 238
     ff0:	a8 2e       	mov	r10, r24
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <vfprintf+0x2ee>
     ff4:	b8 2c       	mov	r11, r8
     ff6:	a3 2c       	mov	r10, r3
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffa:	b8 2c       	mov	r11, r8
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	b9 2c       	mov	r11, r9
    1000:	a4 fe       	sbrs	r10, 4
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1004:	fe 01       	movw	r30, r28
    1006:	e8 0d       	add	r30, r8
    1008:	f1 1d       	adc	r31, r1
    100a:	80 81       	ld	r24, Z
    100c:	80 33       	cpi	r24, 0x30	; 48
    100e:	21 f4       	brne	.+8      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1010:	9a 2d       	mov	r25, r10
    1012:	99 7e       	andi	r25, 0xE9	; 233
    1014:	a9 2e       	mov	r10, r25
    1016:	09 c0       	rjmp	.+18     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1018:	a2 fe       	sbrs	r10, 2
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    101c:	b3 94       	inc	r11
    101e:	b3 94       	inc	r11
    1020:	04 c0       	rjmp	.+8      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1022:	8a 2d       	mov	r24, r10
    1024:	86 78       	andi	r24, 0x86	; 134
    1026:	09 f0       	breq	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	b3 94       	inc	r11
    102a:	a3 fc       	sbrc	r10, 3
    102c:	10 c0       	rjmp	.+32     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    102e:	a0 fe       	sbrs	r10, 0
    1030:	06 c0       	rjmp	.+12     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1032:	b2 14       	cp	r11, r2
    1034:	80 f4       	brcc	.+32     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    1036:	28 0c       	add	r2, r8
    1038:	92 2c       	mov	r9, r2
    103a:	9b 18       	sub	r9, r11
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    103e:	b2 14       	cp	r11, r2
    1040:	58 f4       	brcc	.+22     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1042:	b6 01       	movw	r22, r12
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	86 d0       	rcall	.+268    	; 0x1156 <fputc>
    104a:	b3 94       	inc	r11
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    104e:	b2 14       	cp	r11, r2
    1050:	18 f4       	brcc	.+6      	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1052:	2b 18       	sub	r2, r11
    1054:	02 c0       	rjmp	.+4      	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1056:	98 2c       	mov	r9, r8
    1058:	21 2c       	mov	r2, r1
    105a:	a4 fe       	sbrs	r10, 4
    105c:	0f c0       	rjmp	.+30     	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
    105e:	b6 01       	movw	r22, r12
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	78 d0       	rcall	.+240    	; 0x1156 <fputc>
    1066:	a2 fe       	sbrs	r10, 2
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    106a:	a1 fc       	sbrc	r10, 1
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    106e:	88 e7       	ldi	r24, 0x78	; 120
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1074:	88 e5       	ldi	r24, 0x58	; 88
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	b6 01       	movw	r22, r12
    107a:	0c c0       	rjmp	.+24     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    107c:	8a 2d       	mov	r24, r10
    107e:	86 78       	andi	r24, 0x86	; 134
    1080:	51 f0       	breq	.+20     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1082:	a1 fe       	sbrs	r10, 1
    1084:	02 c0       	rjmp	.+4      	; 0x108a <__EEPROM_REGION_LENGTH__+0x8a>
    1086:	8b e2       	ldi	r24, 0x2B	; 43
    1088:	01 c0       	rjmp	.+2      	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	a7 fc       	sbrc	r10, 7
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	b6 01       	movw	r22, r12
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	60 d0       	rcall	.+192    	; 0x1156 <fputc>
    1096:	89 14       	cp	r8, r9
    1098:	30 f4       	brcc	.+12     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    109a:	b6 01       	movw	r22, r12
    109c:	80 e3       	ldi	r24, 0x30	; 48
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	5a d0       	rcall	.+180    	; 0x1156 <fputc>
    10a2:	9a 94       	dec	r9
    10a4:	f8 cf       	rjmp	.-16     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    10a6:	8a 94       	dec	r8
    10a8:	f3 01       	movw	r30, r6
    10aa:	e8 0d       	add	r30, r8
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	b6 01       	movw	r22, r12
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	50 d0       	rcall	.+160    	; 0x1156 <fputc>
    10b6:	81 10       	cpse	r8, r1
    10b8:	f6 cf       	rjmp	.-20     	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    10ba:	22 20       	and	r2, r2
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__EEPROM_REGION_LENGTH__+0xc0>
    10be:	4e ce       	rjmp	.-868    	; 0xd5c <vfprintf+0x4c>
    10c0:	b6 01       	movw	r22, r12
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	47 d0       	rcall	.+142    	; 0x1156 <fputc>
    10c8:	2a 94       	dec	r2
    10ca:	f7 cf       	rjmp	.-18     	; 0x10ba <__EEPROM_REGION_LENGTH__+0xba>
    10cc:	f6 01       	movw	r30, r12
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	2b 96       	adiw	r28, 0x0b	; 11
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	7f 90       	pop	r7
    10fe:	6f 90       	pop	r6
    1100:	5f 90       	pop	r5
    1102:	4f 90       	pop	r4
    1104:	3f 90       	pop	r3
    1106:	2f 90       	pop	r2
    1108:	08 95       	ret

0000110a <strnlen_P>:
    110a:	fc 01       	movw	r30, r24
    110c:	05 90       	lpm	r0, Z+
    110e:	61 50       	subi	r22, 0x01	; 1
    1110:	70 40       	sbci	r23, 0x00	; 0
    1112:	01 10       	cpse	r0, r1
    1114:	d8 f7       	brcc	.-10     	; 0x110c <strnlen_P+0x2>
    1116:	80 95       	com	r24
    1118:	90 95       	com	r25
    111a:	8e 0f       	add	r24, r30
    111c:	9f 1f       	adc	r25, r31
    111e:	08 95       	ret

00001120 <strnlen>:
    1120:	fc 01       	movw	r30, r24
    1122:	61 50       	subi	r22, 0x01	; 1
    1124:	70 40       	sbci	r23, 0x00	; 0
    1126:	01 90       	ld	r0, Z+
    1128:	01 10       	cpse	r0, r1
    112a:	d8 f7       	brcc	.-10     	; 0x1122 <strnlen+0x2>
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	08 95       	ret

00001136 <strrev>:
    1136:	dc 01       	movw	r26, r24
    1138:	fc 01       	movw	r30, r24
    113a:	67 2f       	mov	r22, r23
    113c:	71 91       	ld	r23, Z+
    113e:	77 23       	and	r23, r23
    1140:	e1 f7       	brne	.-8      	; 0x113a <strrev+0x4>
    1142:	32 97       	sbiw	r30, 0x02	; 2
    1144:	04 c0       	rjmp	.+8      	; 0x114e <strrev+0x18>
    1146:	7c 91       	ld	r23, X
    1148:	6d 93       	st	X+, r22
    114a:	70 83       	st	Z, r23
    114c:	62 91       	ld	r22, -Z
    114e:	ae 17       	cp	r26, r30
    1150:	bf 07       	cpc	r27, r31
    1152:	c8 f3       	brcs	.-14     	; 0x1146 <strrev+0x10>
    1154:	08 95       	ret

00001156 <fputc>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	fb 01       	movw	r30, r22
    1160:	23 81       	ldd	r18, Z+3	; 0x03
    1162:	21 fd       	sbrc	r18, 1
    1164:	03 c0       	rjmp	.+6      	; 0x116c <fputc+0x16>
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	2c c0       	rjmp	.+88     	; 0x11c4 <fputc+0x6e>
    116c:	22 ff       	sbrs	r18, 2
    116e:	16 c0       	rjmp	.+44     	; 0x119c <fputc+0x46>
    1170:	46 81       	ldd	r20, Z+6	; 0x06
    1172:	57 81       	ldd	r21, Z+7	; 0x07
    1174:	24 81       	ldd	r18, Z+4	; 0x04
    1176:	35 81       	ldd	r19, Z+5	; 0x05
    1178:	42 17       	cp	r20, r18
    117a:	53 07       	cpc	r21, r19
    117c:	44 f4       	brge	.+16     	; 0x118e <fputc+0x38>
    117e:	a0 81       	ld	r26, Z
    1180:	b1 81       	ldd	r27, Z+1	; 0x01
    1182:	9d 01       	movw	r18, r26
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	31 83       	std	Z+1, r19	; 0x01
    118a:	20 83       	st	Z, r18
    118c:	8c 93       	st	X, r24
    118e:	26 81       	ldd	r18, Z+6	; 0x06
    1190:	37 81       	ldd	r19, Z+7	; 0x07
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	37 83       	std	Z+7, r19	; 0x07
    1198:	26 83       	std	Z+6, r18	; 0x06
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <fputc+0x6e>
    119c:	8b 01       	movw	r16, r22
    119e:	ec 01       	movw	r28, r24
    11a0:	fb 01       	movw	r30, r22
    11a2:	00 84       	ldd	r0, Z+8	; 0x08
    11a4:	f1 85       	ldd	r31, Z+9	; 0x09
    11a6:	e0 2d       	mov	r30, r0
    11a8:	19 95       	eicall
    11aa:	89 2b       	or	r24, r25
    11ac:	e1 f6       	brne	.-72     	; 0x1166 <fputc+0x10>
    11ae:	d8 01       	movw	r26, r16
    11b0:	16 96       	adiw	r26, 0x06	; 6
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	17 97       	sbiw	r26, 0x07	; 7
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	17 96       	adiw	r26, 0x07	; 7
    11bc:	9c 93       	st	X, r25
    11be:	8e 93       	st	-X, r24
    11c0:	16 97       	sbiw	r26, 0x06	; 6
    11c2:	ce 01       	movw	r24, r28
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <__ultoa_invert>:
    11ce:	fa 01       	movw	r30, r20
    11d0:	aa 27       	eor	r26, r26
    11d2:	28 30       	cpi	r18, 0x08	; 8
    11d4:	51 f1       	breq	.+84     	; 0x122a <__ultoa_invert+0x5c>
    11d6:	20 31       	cpi	r18, 0x10	; 16
    11d8:	81 f1       	breq	.+96     	; 0x123a <__ultoa_invert+0x6c>
    11da:	e8 94       	clt
    11dc:	6f 93       	push	r22
    11de:	6e 7f       	andi	r22, 0xFE	; 254
    11e0:	6e 5f       	subi	r22, 0xFE	; 254
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	af 4f       	sbci	r26, 0xFF	; 255
    11ea:	b1 e0       	ldi	r27, 0x01	; 1
    11ec:	3e d0       	rcall	.+124    	; 0x126a <__ultoa_invert+0x9c>
    11ee:	b4 e0       	ldi	r27, 0x04	; 4
    11f0:	3c d0       	rcall	.+120    	; 0x126a <__ultoa_invert+0x9c>
    11f2:	67 0f       	add	r22, r23
    11f4:	78 1f       	adc	r23, r24
    11f6:	89 1f       	adc	r24, r25
    11f8:	9a 1f       	adc	r25, r26
    11fa:	a1 1d       	adc	r26, r1
    11fc:	68 0f       	add	r22, r24
    11fe:	79 1f       	adc	r23, r25
    1200:	8a 1f       	adc	r24, r26
    1202:	91 1d       	adc	r25, r1
    1204:	a1 1d       	adc	r26, r1
    1206:	6a 0f       	add	r22, r26
    1208:	71 1d       	adc	r23, r1
    120a:	81 1d       	adc	r24, r1
    120c:	91 1d       	adc	r25, r1
    120e:	a1 1d       	adc	r26, r1
    1210:	20 d0       	rcall	.+64     	; 0x1252 <__ultoa_invert+0x84>
    1212:	09 f4       	brne	.+2      	; 0x1216 <__ultoa_invert+0x48>
    1214:	68 94       	set
    1216:	3f 91       	pop	r19
    1218:	2a e0       	ldi	r18, 0x0A	; 10
    121a:	26 9f       	mul	r18, r22
    121c:	11 24       	eor	r1, r1
    121e:	30 19       	sub	r19, r0
    1220:	30 5d       	subi	r19, 0xD0	; 208
    1222:	31 93       	st	Z+, r19
    1224:	de f6       	brtc	.-74     	; 0x11dc <__ultoa_invert+0xe>
    1226:	cf 01       	movw	r24, r30
    1228:	08 95       	ret
    122a:	46 2f       	mov	r20, r22
    122c:	47 70       	andi	r20, 0x07	; 7
    122e:	40 5d       	subi	r20, 0xD0	; 208
    1230:	41 93       	st	Z+, r20
    1232:	b3 e0       	ldi	r27, 0x03	; 3
    1234:	0f d0       	rcall	.+30     	; 0x1254 <__ultoa_invert+0x86>
    1236:	c9 f7       	brne	.-14     	; 0x122a <__ultoa_invert+0x5c>
    1238:	f6 cf       	rjmp	.-20     	; 0x1226 <__ultoa_invert+0x58>
    123a:	46 2f       	mov	r20, r22
    123c:	4f 70       	andi	r20, 0x0F	; 15
    123e:	40 5d       	subi	r20, 0xD0	; 208
    1240:	4a 33       	cpi	r20, 0x3A	; 58
    1242:	18 f0       	brcs	.+6      	; 0x124a <__ultoa_invert+0x7c>
    1244:	49 5d       	subi	r20, 0xD9	; 217
    1246:	31 fd       	sbrc	r19, 1
    1248:	40 52       	subi	r20, 0x20	; 32
    124a:	41 93       	st	Z+, r20
    124c:	02 d0       	rcall	.+4      	; 0x1252 <__ultoa_invert+0x84>
    124e:	a9 f7       	brne	.-22     	; 0x123a <__ultoa_invert+0x6c>
    1250:	ea cf       	rjmp	.-44     	; 0x1226 <__ultoa_invert+0x58>
    1252:	b4 e0       	ldi	r27, 0x04	; 4
    1254:	a6 95       	lsr	r26
    1256:	97 95       	ror	r25
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__ultoa_invert+0x86>
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 05       	cpc	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	08 95       	ret
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	0a 2e       	mov	r0, r26
    1270:	06 94       	lsr	r0
    1272:	57 95       	ror	r21
    1274:	47 95       	ror	r20
    1276:	37 95       	ror	r19
    1278:	27 95       	ror	r18
    127a:	ba 95       	dec	r27
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__ultoa_invert+0xa2>
    127e:	62 0f       	add	r22, r18
    1280:	73 1f       	adc	r23, r19
    1282:	84 1f       	adc	r24, r20
    1284:	95 1f       	adc	r25, r21
    1286:	a0 1d       	adc	r26, r0
    1288:	08 95       	ret

0000128a <_exit>:
    128a:	f8 94       	cli

0000128c <__stop_program>:
    128c:	ff cf       	rjmp	.-2      	; 0x128c <__stop_program>
