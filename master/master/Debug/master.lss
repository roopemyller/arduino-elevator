
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800200  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800362  00800362  00000982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cbf  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa9  00000000  00000000  00002763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00004168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa4  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000054be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7f 01       	movw	r14, r30
  e6:	87 01       	movw	r16, r14
  e8:	87 01       	movw	r16, r14
  ea:	87 01       	movw	r16, r14
  ec:	81 01       	movw	r16, r2
  ee:	87 01       	movw	r16, r14
  f0:	83 01       	movw	r16, r6
  f2:	85 01       	movw	r16, r10
  f4:	87 01       	movw	r16, r14
  f6:	87 01       	movw	r16, r14
  f8:	87 01       	movw	r16, r14
  fa:	87 01       	movw	r16, r14
  fc:	87 01       	movw	r16, r14
  fe:	87 01       	movw	r16, r14
 100:	87 01       	movw	r16, r14
 102:	87 01       	movw	r16, r14
 104:	87 01       	movw	r16, r14
 106:	87 01       	movw	r16, r14
 108:	87 01       	movw	r16, r14
 10a:	87 01       	movw	r16, r14
 10c:	87 01       	movw	r16, r14
 10e:	87 01       	movw	r16, r14
 110:	87 01       	movw	r16, r14
 112:	87 01       	movw	r16, r14
 114:	87 01       	movw	r16, r14
 116:	87 01       	movw	r16, r14
 118:	87 01       	movw	r16, r14
 11a:	87 01       	movw	r16, r14
 11c:	87 01       	movw	r16, r14
 11e:	87 01       	movw	r16, r14
 120:	87 01       	movw	r16, r14
 122:	87 01       	movw	r16, r14
 124:	87 01       	movw	r16, r14
 126:	87 01       	movw	r16, r14
 128:	87 01       	movw	r16, r14
 12a:	87 01       	movw	r16, r14
 12c:	87 01       	movw	r16, r14
 12e:	87 01       	movw	r16, r14
 130:	87 01       	movw	r16, r14
 132:	87 01       	movw	r16, r14
 134:	87 01       	movw	r16, r14
 136:	87 01       	movw	r16, r14
 138:	87 01       	movw	r16, r14
 13a:	87 01       	movw	r16, r14
 13c:	87 01       	movw	r16, r14
 13e:	87 01       	movw	r16, r14
 140:	87 01       	movw	r16, r14
 142:	87 01       	movw	r16, r14
 144:	87 01       	movw	r16, r14
 146:	87 01       	movw	r16, r14
 148:	87 01       	movw	r16, r14
 14a:	87 01       	movw	r16, r14
 14c:	87 01       	movw	r16, r14
 14e:	87 01       	movw	r16, r14
 150:	87 01       	movw	r16, r14
 152:	87 01       	movw	r16, r14
 154:	87 01       	movw	r16, r14
 156:	87 01       	movw	r16, r14
 158:	87 01       	movw	r16, r14
 15a:	87 01       	movw	r16, r14
 15c:	87 01       	movw	r16, r14
 15e:	87 01       	movw	r16, r14
 160:	87 01       	movw	r16, r14
 162:	87 01       	movw	r16, r14
 164:	77 01       	movw	r14, r14
 166:	87 01       	movw	r16, r14
 168:	87 01       	movw	r16, r14
 16a:	87 01       	movw	r16, r14
 16c:	79 01       	movw	r14, r18
 16e:	87 01       	movw	r16, r14
 170:	7b 01       	movw	r14, r22
 172:	7d 01       	movw	r14, r26
 174:	87 01       	movw	r16, r14
 176:	87 01       	movw	r16, r14
 178:	87 01       	movw	r16, r14
 17a:	87 01       	movw	r16, r14
 17c:	87 01       	movw	r16, r14
 17e:	87 01       	movw	r16, r14
 180:	87 01       	movw	r16, r14
 182:	87 01       	movw	r16, r14
 184:	87 01       	movw	r16, r14
 186:	87 01       	movw	r16, r14
 188:	87 01       	movw	r16, r14
 18a:	87 01       	movw	r16, r14
 18c:	87 01       	movw	r16, r14
 18e:	87 01       	movw	r16, r14
 190:	87 01       	movw	r16, r14
 192:	87 01       	movw	r16, r14
 194:	87 01       	movw	r16, r14
 196:	87 01       	movw	r16, r14
 198:	87 01       	movw	r16, r14
 19a:	87 01       	movw	r16, r14
 19c:	87 01       	movw	r16, r14
 19e:	87 01       	movw	r16, r14
 1a0:	87 01       	movw	r16, r14
 1a2:	87 01       	movw	r16, r14
 1a4:	6f 01       	movw	r12, r30
 1a6:	87 01       	movw	r16, r14
 1a8:	87 01       	movw	r16, r14
 1aa:	87 01       	movw	r16, r14
 1ac:	71 01       	movw	r14, r2
 1ae:	87 01       	movw	r16, r14
 1b0:	73 01       	movw	r14, r6
 1b2:	75 01       	movw	r14, r10
 1b4:	87 01       	movw	r16, r14
 1b6:	87 01       	movw	r16, r14
 1b8:	87 01       	movw	r16, r14
 1ba:	87 01       	movw	r16, r14
 1bc:	87 01       	movw	r16, r14
 1be:	87 01       	movw	r16, r14
 1c0:	87 01       	movw	r16, r14
 1c2:	87 01       	movw	r16, r14
 1c4:	69 01       	movw	r12, r18
 1c6:	87 01       	movw	r16, r14
 1c8:	87 01       	movw	r16, r14
 1ca:	87 01       	movw	r16, r14
 1cc:	89 01       	movw	r16, r18
 1ce:	87 01       	movw	r16, r14
 1d0:	6b 01       	movw	r12, r22
 1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	13 e0       	ldi	r17, 0x03	; 3
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ec e8       	ldi	r30, 0x8C	; 140
 1ec:	f7 e0       	ldi	r31, 0x07	; 7
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a2 36       	cpi	r26, 0x62	; 98
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	a2 e6       	ldi	r26, 0x62	; 98
 202:	b3 e0       	ldi	r27, 0x03	; 3
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a5 36       	cpi	r26, 0x65	; 101
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	5f d1       	rcall	.+702    	; 0x4ce <main>
 210:	bb c2       	rjmp	.+1398   	; 0x788 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
 266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 286:	8f 30       	cpi	r24, 0x0F	; 15
 288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
 294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 2a2:	8f 30       	cpi	r24, 0x0F	; 15
 2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
 2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
 2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	e7 57       	subi	r30, 0x77	; 119
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e8 37       	cpi	r30, 0x78	; 120
 2c4:	f1 05       	cpc	r31, r1
 2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
 2c8:	88 27       	eor	r24, r24
 2ca:	ee 58       	subi	r30, 0x8E	; 142
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	20 c2       	rjmp	.+1088   	; 0x712 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2d2:	8a e2       	ldi	r24, 0x2A	; 42
 2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2f2:	89 e3       	ldi	r24, 0x39	; 57
 2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 30e:	8a e7       	ldi	r24, 0x7A	; 122
 310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 314:	08 95       	ret

00000316 <TWI_init>:

// Initialize TWI as master
void TWI_init(void) {
	// Set SCL frequency: TWBR = ((F_CPU / SCL_freq) - 16) / (2 * prescaler)
	// For 100kHz with 16MHz CPU and prescaler=1: TWBR = ((16000000/100000)-16)/2 = 72
	TWBR = 72;  // Set bit rate register
 316:	88 e4       	ldi	r24, 0x48	; 72
 318:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
	TWSR = 0;   // Prescaler = 1
 31c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 320:	08 95       	ret

00000322 <TWI_stop>:
}

// Stop TWI transmission
void TWI_stop(void) {
	// Send STOP condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 322:	84 e9       	ldi	r24, 0x94	; 148
 324:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 328:	8f e9       	ldi	r24, 0x9F	; 159
 32a:	9f e0       	ldi	r25, 0x0F	; 15
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <TWI_stop+0xa>
 330:	00 c0       	rjmp	.+0      	; 0x332 <TWI_stop+0x10>
 332:	00 00       	nop
 334:	08 95       	ret

00000336 <UART_init>:
}

// Initialize UART for debugging
void UART_init(void) {
	// Set baud rate to 9600 for 16MHz: UBRR = (F_CPU/(16*BAUD))-1 = 103
	UBRR0H = 0;
 336:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = 103;
 33a:	87 e6       	ldi	r24, 0x67	; 103
 33c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	// Enable transmitter
	UCSR0B = (1 << TXEN0);
 340:	88 e0       	ldi	r24, 0x08	; 8
 342:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 34c:	08 95       	ret

0000034e <UART_send_char>:
}

// Send a character through UART
void UART_send_char(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 34e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 352:	95 ff       	sbrs	r25, 5
 354:	fc cf       	rjmp	.-8      	; 0x34e <UART_send_char>
	
	// Put data into buffer
	UDR0 = data;
 356:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 35a:	08 95       	ret

0000035c <UART_send_string>:
}

// Send a string through UART
void UART_send_string(char* str) {
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
	// Send each character until null terminator
	while (*str) {
 362:	02 c0       	rjmp	.+4      	; 0x368 <UART_send_string+0xc>
		UART_send_char(*str++);
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	f3 df       	rcall	.-26     	; 0x34e <UART_send_char>
}

// Send a string through UART
void UART_send_string(char* str) {
	// Send each character until null terminator
	while (*str) {
 368:	88 81       	ld	r24, Y
 36a:	81 11       	cpse	r24, r1
 36c:	fb cf       	rjmp	.-10     	; 0x364 <UART_send_string+0x8>
		UART_send_char(*str++);
	}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <setup>:
}

void setup(){
	// Init LCD
	// Initialize UART for debugging
	UART_init();
 374:	e0 df       	rcall	.-64     	; 0x336 <UART_init>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	89 ef       	ldi	r24, 0xF9	; 249
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <setup+0x8>
 384:	00 c0       	rjmp	.+0      	; 0x386 <setup+0x12>
 386:	00 00       	nop
	_delay_ms(20);
	UART_send_string("Elevator Master Program - NASA SERTIFIED PRODUCT\r\n");
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	92 e0       	ldi	r25, 0x02	; 2
	
	// Initialize TWI as master
	TWI_init();
 38c:	e7 df       	rcall	.-50     	; 0x35c <UART_send_string>
 38e:	c3 df       	rcall	.-122    	; 0x316 <TWI_init>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	89 ef       	ldi	r24, 0xF9	; 249
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <setup+0x22>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <setup+0x2c>
	_delay_ms(20);    
	// Init keypad
	KEYPAD_Init();
 3a0:	00 00       	nop
 3a2:	50 df       	rcall	.-352    	; 0x244 <KEYPAD_Init>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	89 ef       	ldi	r24, 0xF9	; 249
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <setup+0x36>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <setup+0x40>
 3b4:	00 00       	nop
 3b6:	08 95       	ret

000003b8 <TWI_start>:
	TWBR = 72;  // Set bit rate register
	TWSR = 0;   // Prescaler = 1
}

// Start TWI transmission
uint8_t TWI_start(void) {
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
	// Send START condition
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 3bc:	84 ea       	ldi	r24, 0xA4	; 164
 3be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
 3c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 3c6:	88 23       	and	r24, r24
 3c8:	e4 f7       	brge	.-8      	; 0x3c2 <TWI_start+0xa>
	
	// Check if START was sent successfully (status code 0x08)
	if ((TWSR & 0xF8) != 0x08) {
 3ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 3ce:	88 7f       	andi	r24, 0xF8	; 248
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	99 f0       	breq	.+38     	; 0x3fa <TWI_start+0x42>
		UART_send_string("TWI start error: 0x");
 3d4:	83 e3       	ldi	r24, 0x33	; 51
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	c1 df       	rcall	.-126    	; 0x35c <UART_send_string>
		UART_send_char('0' + ((TWSR & 0xF8) >> 4));
 3da:	c9 eb       	ldi	r28, 0xB9	; 185
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
 3de:	88 81       	ld	r24, Y
 3e0:	82 95       	swap	r24
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	80 5d       	subi	r24, 0xD0	; 208
 3e6:	b3 df       	rcall	.-154    	; 0x34e <UART_send_char>
		UART_send_char('0' + (TWSR & 0x0F));
 3e8:	88 81       	ld	r24, Y
 3ea:	8f 70       	andi	r24, 0x0F	; 15
 3ec:	80 5d       	subi	r24, 0xD0	; 208
 3ee:	af df       	rcall	.-162    	; 0x34e <UART_send_char>
		UART_send_string("\r\n");
 3f0:	83 e4       	ldi	r24, 0x43	; 67
 3f2:	93 e0       	ldi	r25, 0x03	; 3
 3f4:	b3 df       	rcall	.-154    	; 0x35c <UART_send_string>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error: START not acknowledged
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <TWI_start+0x44>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
 3fc:	df 91       	pop	r29
}
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <TWI_write>:
 402:	cf 93       	push	r28

// Write a byte to the TWI bus
uint8_t TWI_write(uint8_t data) {
 404:	df 93       	push	r29
	// Load data into TWDR register
	TWDR = data;
 406:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	
	// Start transmission
	TWCR = (1 << TWINT) | (1 << TWEN);
 40a:	84 e8       	ldi	r24, 0x84	; 132
 40c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
 410:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 414:	88 23       	and	r24, r24
 416:	e4 f7       	brge	.-8      	; 0x410 <TWI_write+0xe>
	
	// Check status
	uint8_t status = TWSR & 0xF8;
 418:	d0 91 b9 00 	lds	r29, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 41c:	cd 2f       	mov	r28, r29
 41e:	c8 7f       	andi	r28, 0xF8	; 248
	
	// For SLA+W, we expect 0x18 (ACK) or 0x20 (NACK)
	// For data byte, we expect 0x28 (ACK) or 0x30 (NACK)
	if (status != 0x18 && status != 0x28) {
 420:	c8 31       	cpi	r28, 0x18	; 24
 422:	99 f0       	breq	.+38     	; 0x44a <TWI_write+0x48>
 424:	c8 32       	cpi	r28, 0x28	; 40
 426:	99 f0       	breq	.+38     	; 0x44e <TWI_write+0x4c>
		UART_send_string("TWI write error: 0x");
 428:	87 e4       	ldi	r24, 0x47	; 71
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	97 df       	rcall	.-210    	; 0x35c <UART_send_string>
		UART_send_char('0' + (status >> 4));
 42e:	8c 2f       	mov	r24, r28
 430:	82 95       	swap	r24
 432:	8f 70       	andi	r24, 0x0F	; 15
 434:	80 5d       	subi	r24, 0xD0	; 208
 436:	8b df       	rcall	.-234    	; 0x34e <UART_send_char>
		UART_send_char('0' + (status & 0x0F));
 438:	8d 2f       	mov	r24, r29
 43a:	88 70       	andi	r24, 0x08	; 8
 43c:	80 5d       	subi	r24, 0xD0	; 208
 43e:	87 df       	rcall	.-242    	; 0x34e <UART_send_char>
		UART_send_string("\r\n");
 440:	83 e4       	ldi	r24, 0x43	; 67
 442:	93 e0       	ldi	r25, 0x03	; 3
 444:	8b df       	rcall	.-234    	; 0x35c <UART_send_string>
 446:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error
 448:	03 c0       	rjmp	.+6      	; 0x450 <TWI_write+0x4e>
 44a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
 44c:	01 c0       	rjmp	.+2      	; 0x450 <TWI_write+0x4e>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	df 91       	pop	r29
}
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <send_command>:
 456:	cf 93       	push	r28
	}
	return ptr;
}

// Send a command to the slave device
void send_command(char cmd) {
 458:	c8 2f       	mov	r28, r24
	UART_send_string("Sending command: ");
 45a:	8b e5       	ldi	r24, 0x5B	; 91
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	7e df       	rcall	.-260    	; 0x35c <UART_send_string>
	UART_send_char(cmd);
 460:	8c 2f       	mov	r24, r28
 462:	75 df       	rcall	.-278    	; 0x34e <UART_send_char>
	UART_send_string("\r\n");
 464:	83 e4       	ldi	r24, 0x43	; 67
 466:	93 e0       	ldi	r25, 0x03	; 3
	
	if (TWI_start()) {
 468:	79 df       	rcall	.-270    	; 0x35c <UART_send_string>
 46a:	a6 df       	rcall	.-180    	; 0x3b8 <TWI_start>
 46c:	88 23       	and	r24, r24
		UART_send_string("TWI started\r\n");
 46e:	51 f1       	breq	.+84     	; 0x4c4 <send_command+0x6e>
 470:	8d e6       	ldi	r24, 0x6D	; 109
 472:	92 e0       	ldi	r25, 0x02	; 2
		
		if (TWI_write((SLAVE_ADDRESS << 1) | 0)) {  // SLA+W
 474:	73 df       	rcall	.-282    	; 0x35c <UART_send_string>
 476:	8e ea       	ldi	r24, 0xAE	; 174
 478:	c4 df       	rcall	.-120    	; 0x402 <TWI_write>
 47a:	88 23       	and	r24, r24
			if (TWI_write(cmd)) {
 47c:	d9 f0       	breq	.+54     	; 0x4b4 <send_command+0x5e>
 47e:	8c 2f       	mov	r24, r28
 480:	c0 df       	rcall	.-128    	; 0x402 <TWI_write>
 482:	88 23       	and	r24, r24
				UART_send_string("Command sent successfully\r\n");
 484:	99 f0       	breq	.+38     	; 0x4ac <send_command+0x56>
 486:	8b e7       	ldi	r24, 0x7B	; 123
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	68 df       	rcall	.-304    	; 0x35c <UART_send_string>
				// Flash an indicator LED on the master
				PORTB |= (1 << PB7);  // Turn on LED on pin 13
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	85 b9       	out	0x05, r24	; 5
 492:	2f ef       	ldi	r18, 0xFF	; 255
 494:	81 ee       	ldi	r24, 0xE1	; 225
 496:	94 e0       	ldi	r25, 0x04	; 4
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	90 40       	sbci	r25, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <send_command+0x42>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <send_command+0x4c>
				_delay_ms(100);
				PORTB &= ~(1 << PB7); // Turn off LED
 4a2:	00 00       	nop
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	8f 77       	andi	r24, 0x7F	; 127
			} else {
				UART_send_string("Failed to send command\r\n");
 4a8:	85 b9       	out	0x05, r24	; 5
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <send_command+0x64>
 4ac:	87 e9       	ldi	r24, 0x97	; 151
 4ae:	92 e0       	ldi	r25, 0x02	; 2
			}
		} else {
			UART_send_string("Slave not responding\r\n");
 4b0:	55 df       	rcall	.-342    	; 0x35c <UART_send_string>
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <send_command+0x64>
 4b4:	80 eb       	ldi	r24, 0xB0	; 176
		}		
		TWI_stop();
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	51 df       	rcall	.-350    	; 0x35c <UART_send_string>
		UART_send_string("TWI stopped\r\n");
 4ba:	33 df       	rcall	.-410    	; 0x322 <TWI_stop>
 4bc:	87 ec       	ldi	r24, 0xC7	; 199
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	4d df       	rcall	.-358    	; 0x35c <UART_send_string>
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <send_command+0x74>
	} else {
		UART_send_string("TWI start failed\r\n");
 4c4:	85 ed       	ldi	r24, 0xD5	; 213
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	49 df       	rcall	.-366    	; 0x35c <UART_send_string>
 4ca:	cf 91       	pop	r28
	}
}
 4cc:	08 95       	ret

000004ce <main>:
 4ce:	cf 93       	push	r28
char key_str[4];

char* ptr;


int main(void) {
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	64 97       	sbiw	r28, 0x14	; 20
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
	
	setup();
 4e2:	48 df       	rcall	.-368    	; 0x374 <setup>
	// char *str_ptr;        // Luodaan apumuuttuja pointerille stringiin.
	// str_ptr = str;
	
    while (1) {
  	
		uint8_t key_input = KEYPAD_GetKey();
 4e4:	e1 de       	rcall	.-574    	; 0x2a8 <KEYPAD_GetKey>
 4e6:	88 23       	and	r24, r24
		
		// Tallennetaan	kaapattu keypad painallus int ja str pointer muodossa	
		if(key_input != 0){ // Jos painiketta on painettu (ei ole 0)
 4e8:	e9 f3       	breq	.-6      	; 0x4e4 <main+0x16>
 4ea:	10 ed       	ldi	r17, 0xD0	; 208

			key_input = key_input - '0';
 4ec:	18 0f       	add	r17, r24
 4ee:	e1 2e       	mov	r14, r17
			itoa(key_input, str, 20);
 4f0:	f1 2c       	mov	r15, r1
 4f2:	44 e1       	ldi	r20, 0x14	; 20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4f4:	be 01       	movw	r22, r28
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	c7 01       	movw	r24, r14
 4fc:	12 d1       	rcall	.+548    	; 0x722 <__itoa_ncheck>
 4fe:	88 ee       	ldi	r24, 0xE8	; 232
			UART_send_string("Pressed key: ");
 500:	92 e0       	ldi	r25, 0x02	; 2
 502:	2c df       	rcall	.-424    	; 0x35c <UART_send_string>
 504:	ce 01       	movw	r24, r28
			UART_send_string(str);
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	29 df       	rcall	.-430    	; 0x35c <UART_send_string>
 50a:	83 e4       	ldi	r24, 0x43	; 67
			UART_send_string ("\r\n");
 50c:	93 e0       	ldi	r25, 0x03	; 3
 50e:	26 df       	rcall	.-436    	; 0x35c <UART_send_string>
 510:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
			
		} else continue;
		
		// Define next state
		if(current_floor < key_input)	{ current_state = 1; }
 514:	81 17       	cp	r24, r17
 516:	18 f4       	brcc	.+6      	; 0x51e <main+0x50>
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <current_state>
 51e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
		if(current_floor == key_input)	{ current_state = 2; }
 522:	18 13       	cpse	r17, r24
 524:	03 c0       	rjmp	.+6      	; 0x52c <main+0x5e>
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <current_state>
 52c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
		if(current_floor > key_input)	{ current_state = 3; }
 530:	18 17       	cp	r17, r24
 532:	18 f4       	brcc	.+6      	; 0x53a <main+0x6c>
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <current_state>
 53a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
		
		floors_to_travel = abs(current_floor - key_input);
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	8e 19       	sub	r24, r14
 542:	9f 09       	sbc	r25, r15
 544:	9c 01       	movw	r18, r24
 546:	22 f4       	brpl	.+8      	; 0x550 <main+0x82>
 548:	22 27       	eor	r18, r18
 54a:	33 27       	eor	r19, r19
 54c:	28 1b       	sub	r18, r24
 54e:	39 0b       	sbc	r19, r25
 550:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <__data_end>
 554:	86 ef       	ldi	r24, 0xF6	; 246
		
		// Debug:
		
		UART_send_string("Current floor: ");
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	01 df       	rcall	.-510    	; 0x35c <UART_send_string>
 55a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
		itoa(current_floor, str, 20);
 55e:	44 e1       	ldi	r20, 0x14	; 20
 560:	be 01       	movw	r22, r28
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	dc d0       	rcall	.+440    	; 0x722 <__itoa_ncheck>
		UART_send_string(str);
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	f6 de       	rcall	.-532    	; 0x35c <UART_send_string>
 570:	86 e0       	ldi	r24, 0x06	; 6
		UART_send_string(", Floors to travel: ");
 572:	93 e0       	ldi	r25, 0x03	; 3
 574:	f3 de       	rcall	.-538    	; 0x35c <UART_send_string>
 576:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
 57a:	44 e1       	ldi	r20, 0x14	; 20
 57c:	be 01       	movw	r22, r28
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ce d0       	rcall	.+412    	; 0x722 <__itoa_ncheck>
		itoa(floors_to_travel, str, 20);
		UART_send_string(str);
 586:	ce 01       	movw	r24, r28
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	e8 de       	rcall	.-560    	; 0x35c <UART_send_string>
 58c:	83 e4       	ldi	r24, 0x43	; 67
		UART_send_string("\r\n");
 58e:	93 e0       	ldi	r25, 0x03	; 3
 590:	e5 de       	rcall	.-566    	; 0x35c <UART_send_string>
 592:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <current_state>
		
		switch(current_state){
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	09 f4       	brne	.+2      	; 0x59c <main+0xce>
 59a:	4f c0       	rjmp	.+158    	; 0x63a <main+0x16c>
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	09 f4       	brne	.+2      	; 0x5a2 <main+0xd4>
 5a0:	69 c0       	rjmp	.+210    	; 0x674 <main+0x1a6>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <main+0xda>
 5a6:	ae c0       	rjmp	.+348    	; 0x704 <main+0x236>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	89 ef       	ldi	r24, 0xF9	; 249
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0xe0>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0xea>
 5b8:	00 00       	nop
			case 1:
			
				_delay_ms(20);  // Debounce
    
				UART_send_string("Going up!\r\n");
 5ba:	8b e1       	ldi	r24, 0x1B	; 27
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	ce de       	rcall	.-612    	; 0x35c <UART_send_string>
				send_command('M');
 5c0:	8d e4       	ldi	r24, 0x4D	; 77
 5c2:	49 df       	rcall	.-366    	; 0x456 <send_command>
 5c4:	00 e0       	ldi	r16, 0x00	; 0
				
				for(int i = 0; i < floors_to_travel; i++){
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	21 c0       	rjmp	.+66     	; 0x60c <main+0x13e>
 5ca:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
					current_floor++;
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <current_floor>
					UART_send_string("Moving to floor: ");
 5d4:	87 e2       	ldi	r24, 0x27	; 39
 5d6:	93 e0       	ldi	r25, 0x03	; 3
					itoa(current_floor, str, 10);
 5d8:	c1 de       	rcall	.-638    	; 0x35c <UART_send_string>
 5da:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
 5de:	4a e0       	ldi	r20, 0x0A	; 10
 5e0:	be 01       	movw	r22, r28
 5e2:	6f 5f       	subi	r22, 0xFF	; 255
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	9c d0       	rcall	.+312    	; 0x722 <__itoa_ncheck>
					UART_send_string(str);
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	b6 de       	rcall	.-660    	; 0x35c <UART_send_string>
 5f0:	83 e4       	ldi	r24, 0x43	; 67
					UART_send_string("\r\n");
 5f2:	93 e0       	ldi	r25, 0x03	; 3
 5f4:	b3 de       	rcall	.-666    	; 0x35c <UART_send_string>
 5f6:	2f ef       	ldi	r18, 0xFF	; 255
 5f8:	83 ec       	ldi	r24, 0xC3	; 195
 5fa:	99 e0       	ldi	r25, 0x09	; 9
 5fc:	21 50       	subi	r18, 0x01	; 1
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	90 40       	sbci	r25, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x12e>
 604:	00 c0       	rjmp	.+0      	; 0x606 <main+0x138>
				_delay_ms(20);  // Debounce
    
				UART_send_string("Going up!\r\n");
				send_command('M');
				
				for(int i = 0; i < floors_to_travel; i++){
 606:	00 00       	nop
 608:	0f 5f       	subi	r16, 0xFF	; 255
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	08 17       	cp	r16, r24
 614:	19 07       	cpc	r17, r25
					UART_send_string(str);
					UART_send_string("\r\n");
					_delay_ms(200);
				}
				
				send_command('S');
 616:	cc f2       	brlt	.-78     	; 0x5ca <main+0xfc>
 618:	83 e5       	ldi	r24, 0x53	; 83
 61a:	1d df       	rcall	.-454    	; 0x456 <send_command>
				UART_send_string("Door open!\r\n");
 61c:	89 e3       	ldi	r24, 0x39	; 57
 61e:	93 e0       	ldi	r25, 0x03	; 3
 620:	9d de       	rcall	.-710    	; 0x35c <UART_send_string>
 622:	8f e4       	ldi	r24, 0x4F	; 79
	            send_command('O');
 624:	18 df       	rcall	.-464    	; 0x456 <send_command>
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	83 ec       	ldi	r24, 0xC3	; 195
 62a:	99 e0       	ldi	r25, 0x09	; 9
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <main+0x15e>
 634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x168>
 636:	00 00       	nop
 638:	65 c0       	rjmp	.+202    	; 0x704 <main+0x236>
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	89 ef       	ldi	r24, 0xF9	; 249
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <main+0x172>
			
			case 2:
			
				_delay_ms(20);  // Debounce
			
				UART_send_string("No action.\r\n");
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x17c>
 64a:	00 00       	nop
 64c:	86 e4       	ldi	r24, 0x46	; 70
 64e:	93 e0       	ldi	r25, 0x03	; 3
				send_command('S');
 650:	85 de       	rcall	.-758    	; 0x35c <UART_send_string>
 652:	83 e5       	ldi	r24, 0x53	; 83
 654:	00 df       	rcall	.-512    	; 0x456 <send_command>
				
				UART_send_string("Door open!\r\n");
 656:	89 e3       	ldi	r24, 0x39	; 57
 658:	93 e0       	ldi	r25, 0x03	; 3
 65a:	80 de       	rcall	.-768    	; 0x35c <UART_send_string>
	            send_command('O');
 65c:	8f e4       	ldi	r24, 0x4F	; 79
 65e:	fb de       	rcall	.-522    	; 0x456 <send_command>
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	83 ec       	ldi	r24, 0xC3	; 195
 664:	99 e0       	ldi	r25, 0x09	; 9
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0x198>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x1a2>
 670:	00 00       	nop
 672:	48 c0       	rjmp	.+144    	; 0x704 <main+0x236>
 674:	2f ef       	ldi	r18, 0xFF	; 255
 676:	89 ef       	ldi	r24, 0xF9	; 249
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	21 50       	subi	r18, 0x01	; 1
 67c:	80 40       	sbci	r24, 0x00	; 0
 67e:	90 40       	sbci	r25, 0x00	; 0
 680:	e1 f7       	brne	.-8      	; 0x67a <main+0x1ac>
				break;
				
			case 3:
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
 682:	00 c0       	rjmp	.+0      	; 0x684 <main+0x1b6>
 684:	00 00       	nop
 686:	83 e5       	ldi	r24, 0x53	; 83
				send_command('M');
 688:	93 e0       	ldi	r25, 0x03	; 3
 68a:	68 de       	rcall	.-816    	; 0x35c <UART_send_string>
 68c:	8d e4       	ldi	r24, 0x4D	; 77
				for(int i = 0; i < floors_to_travel; i++){
 68e:	e3 de       	rcall	.-570    	; 0x456 <send_command>
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	10 e0       	ldi	r17, 0x00	; 0
					current_floor--;
 694:	21 c0       	rjmp	.+66     	; 0x6d8 <main+0x20a>
 696:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
 69a:	81 50       	subi	r24, 0x01	; 1
 69c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <current_floor>
					UART_send_string("Moving to floor: ");
 6a0:	87 e2       	ldi	r24, 0x27	; 39
 6a2:	93 e0       	ldi	r25, 0x03	; 3
 6a4:	5b de       	rcall	.-842    	; 0x35c <UART_send_string>
					itoa(current_floor, str, 10);
 6a6:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <current_floor>
 6aa:	4a e0       	ldi	r20, 0x0A	; 10
 6ac:	be 01       	movw	r22, r28
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
 6b4:	36 d0       	rcall	.+108    	; 0x722 <__itoa_ncheck>
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	50 de       	rcall	.-864    	; 0x35c <UART_send_string>
					UART_send_string("\r\n");
 6bc:	83 e4       	ldi	r24, 0x43	; 67
 6be:	93 e0       	ldi	r25, 0x03	; 3
 6c0:	4d de       	rcall	.-870    	; 0x35c <UART_send_string>
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	83 ec       	ldi	r24, 0xC3	; 195
 6c6:	99 e0       	ldi	r25, 0x09	; 9
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x1fa>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x204>
 6d2:	00 00       	nop
 6d4:	0f 5f       	subi	r16, 0xFF	; 255
			case 3:
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
				send_command('M');
				for(int i = 0; i < floors_to_travel; i++){
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	08 17       	cp	r16, r24
 6e0:	19 07       	cpc	r17, r25
 6e2:	cc f2       	brlt	.-78     	; 0x696 <main+0x1c8>
 6e4:	83 e5       	ldi	r24, 0x53	; 83
					UART_send_string(str);
					UART_send_string("\r\n");
					_delay_ms(200);						
				}
				
				send_command('S');
 6e6:	b7 de       	rcall	.-658    	; 0x456 <send_command>
 6e8:	89 e3       	ldi	r24, 0x39	; 57
 6ea:	93 e0       	ldi	r25, 0x03	; 3
				UART_send_string("Door open!\r\n");
 6ec:	37 de       	rcall	.-914    	; 0x35c <UART_send_string>
 6ee:	8f e4       	ldi	r24, 0x4F	; 79
 6f0:	b2 de       	rcall	.-668    	; 0x456 <send_command>
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
				send_command('O');
 6f4:	83 ec       	ldi	r24, 0xC3	; 195
 6f6:	99 e0       	ldi	r25, 0x09	; 9
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x22a>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x234>
 702:	00 00       	nop
 704:	8f e3       	ldi	r24, 0x3F	; 63
 706:	9c e9       	ldi	r25, 0x9C	; 156
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <main+0x23a>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x240>
 70e:	00 00       	nop
 710:	e9 ce       	rjmp	.-558    	; 0x4e4 <main+0x16>

00000712 <__tablejump2__>:
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	88 1f       	adc	r24, r24
 718:	8b bf       	out	0x3b, r24	; 59
 71a:	07 90       	elpm	r0, Z+
 71c:	f6 91       	elpm	r31, Z
 71e:	e0 2d       	mov	r30, r0
 720:	19 94       	eijmp

00000722 <__itoa_ncheck>:
 722:	bb 27       	eor	r27, r27
 724:	4a 30       	cpi	r20, 0x0A	; 10
 726:	31 f4       	brne	.+12     	; 0x734 <__itoa_ncheck+0x12>
 728:	99 23       	and	r25, r25
 72a:	22 f4       	brpl	.+8      	; 0x734 <__itoa_ncheck+0x12>
 72c:	bd e2       	ldi	r27, 0x2D	; 45
 72e:	90 95       	com	r25
 730:	81 95       	neg	r24
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	01 c0       	rjmp	.+2      	; 0x738 <__utoa_common>

00000736 <__utoa_ncheck>:
 736:	bb 27       	eor	r27, r27

00000738 <__utoa_common>:
 738:	fb 01       	movw	r30, r22
 73a:	55 27       	eor	r21, r21
 73c:	aa 27       	eor	r26, r26
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	aa 1f       	adc	r26, r26
 744:	a4 17       	cp	r26, r20
 746:	10 f0       	brcs	.+4      	; 0x74c <__utoa_common+0x14>
 748:	a4 1b       	sub	r26, r20
 74a:	83 95       	inc	r24
 74c:	50 51       	subi	r21, 0x10	; 16
 74e:	b9 f7       	brne	.-18     	; 0x73e <__utoa_common+0x6>
 750:	a0 5d       	subi	r26, 0xD0	; 208
 752:	aa 33       	cpi	r26, 0x3A	; 58
 754:	08 f0       	brcs	.+2      	; 0x758 <__utoa_common+0x20>
 756:	a9 5d       	subi	r26, 0xD9	; 217
 758:	a1 93       	st	Z+, r26
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	79 f7       	brne	.-34     	; 0x73c <__utoa_common+0x4>
 75e:	b1 11       	cpse	r27, r1
 760:	b1 93       	st	Z+, r27
 762:	11 92       	st	Z+, r1
 764:	cb 01       	movw	r24, r22
 766:	00 c0       	rjmp	.+0      	; 0x768 <strrev>

00000768 <strrev>:
 768:	dc 01       	movw	r26, r24
 76a:	fc 01       	movw	r30, r24
 76c:	67 2f       	mov	r22, r23
 76e:	71 91       	ld	r23, Z+
 770:	77 23       	and	r23, r23
 772:	e1 f7       	brne	.-8      	; 0x76c <strrev+0x4>
 774:	32 97       	sbiw	r30, 0x02	; 2
 776:	04 c0       	rjmp	.+8      	; 0x780 <strrev+0x18>
 778:	7c 91       	ld	r23, X
 77a:	6d 93       	st	X+, r22
 77c:	70 83       	st	Z, r23
 77e:	62 91       	ld	r22, -Z
 780:	ae 17       	cp	r26, r30
 782:	bf 07       	cpc	r27, r31
 784:	c8 f3       	brcs	.-14     	; 0x778 <strrev+0x10>
 786:	08 95       	ret

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
