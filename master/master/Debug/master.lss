
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000346  00800200  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800546  00800546  00001762  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e72  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129b  00000000  00000000  000047ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a7  00000000  00000000  00005a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00006e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098b  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001607  00000000  00000000  00007b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00009132  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	07 c1       	rjmp	.+526    	; 0x214 <__bad_interrupt>
       6:	00 00       	nop
       8:	05 c1       	rjmp	.+522    	; 0x214 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c2       	rjmp	.+1434   	; 0x5a8 <__vector_3>
       e:	00 00       	nop
      10:	01 c1       	rjmp	.+514    	; 0x214 <__bad_interrupt>
      12:	00 00       	nop
      14:	ff c0       	rjmp	.+510    	; 0x214 <__bad_interrupt>
      16:	00 00       	nop
      18:	fd c0       	rjmp	.+506    	; 0x214 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fb c0       	rjmp	.+502    	; 0x214 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f9 c0       	rjmp	.+498    	; 0x214 <__bad_interrupt>
      22:	00 00       	nop
      24:	f7 c0       	rjmp	.+494    	; 0x214 <__bad_interrupt>
      26:	00 00       	nop
      28:	f5 c0       	rjmp	.+490    	; 0x214 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f3 c0       	rjmp	.+486    	; 0x214 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f1 c0       	rjmp	.+482    	; 0x214 <__bad_interrupt>
      32:	00 00       	nop
      34:	ef c0       	rjmp	.+478    	; 0x214 <__bad_interrupt>
      36:	00 00       	nop
      38:	ed c0       	rjmp	.+474    	; 0x214 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	eb c0       	rjmp	.+470    	; 0x214 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c0       	rjmp	.+466    	; 0x214 <__bad_interrupt>
      42:	00 00       	nop
      44:	e7 c0       	rjmp	.+462    	; 0x214 <__bad_interrupt>
      46:	00 00       	nop
      48:	e5 c0       	rjmp	.+458    	; 0x214 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e3 c0       	rjmp	.+454    	; 0x214 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e1 c0       	rjmp	.+450    	; 0x214 <__bad_interrupt>
      52:	00 00       	nop
      54:	df c0       	rjmp	.+446    	; 0x214 <__bad_interrupt>
      56:	00 00       	nop
      58:	dd c0       	rjmp	.+442    	; 0x214 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	db c0       	rjmp	.+438    	; 0x214 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d9 c0       	rjmp	.+434    	; 0x214 <__bad_interrupt>
      62:	00 00       	nop
      64:	d7 c0       	rjmp	.+430    	; 0x214 <__bad_interrupt>
      66:	00 00       	nop
      68:	d5 c0       	rjmp	.+426    	; 0x214 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d3 c0       	rjmp	.+422    	; 0x214 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d1 c0       	rjmp	.+418    	; 0x214 <__bad_interrupt>
      72:	00 00       	nop
      74:	cf c0       	rjmp	.+414    	; 0x214 <__bad_interrupt>
      76:	00 00       	nop
      78:	cd c0       	rjmp	.+410    	; 0x214 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cb c0       	rjmp	.+406    	; 0x214 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c9 c0       	rjmp	.+402    	; 0x214 <__bad_interrupt>
      82:	00 00       	nop
      84:	c7 c0       	rjmp	.+398    	; 0x214 <__bad_interrupt>
      86:	00 00       	nop
      88:	c5 c0       	rjmp	.+394    	; 0x214 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c3 c0       	rjmp	.+390    	; 0x214 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c1 c0       	rjmp	.+386    	; 0x214 <__bad_interrupt>
      92:	00 00       	nop
      94:	bf c0       	rjmp	.+382    	; 0x214 <__bad_interrupt>
      96:	00 00       	nop
      98:	bd c0       	rjmp	.+378    	; 0x214 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bb c0       	rjmp	.+374    	; 0x214 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b9 c0       	rjmp	.+370    	; 0x214 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b7 c0       	rjmp	.+366    	; 0x214 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b5 c0       	rjmp	.+362    	; 0x214 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b3 c0       	rjmp	.+358    	; 0x214 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b1 c0       	rjmp	.+354    	; 0x214 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	af c0       	rjmp	.+350    	; 0x214 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ad c0       	rjmp	.+346    	; 0x214 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ab c0       	rjmp	.+342    	; 0x214 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a9 c0       	rjmp	.+338    	; 0x214 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a7 c0       	rjmp	.+334    	; 0x214 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a5 c0       	rjmp	.+330    	; 0x214 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a3 c0       	rjmp	.+326    	; 0x214 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a1 c0       	rjmp	.+322    	; 0x214 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9f c0       	rjmp	.+318    	; 0x214 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9d c0       	rjmp	.+314    	; 0x214 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9b c0       	rjmp	.+310    	; 0x214 <__bad_interrupt>
      de:	00 00       	nop
      e0:	99 c0       	rjmp	.+306    	; 0x214 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	80 01       	movw	r16, r0
      e6:	88 01       	movw	r16, r16
      e8:	88 01       	movw	r16, r16
      ea:	88 01       	movw	r16, r16
      ec:	82 01       	movw	r16, r4
      ee:	88 01       	movw	r16, r16
      f0:	84 01       	movw	r16, r8
      f2:	86 01       	movw	r16, r12
      f4:	88 01       	movw	r16, r16
      f6:	88 01       	movw	r16, r16
      f8:	88 01       	movw	r16, r16
      fa:	88 01       	movw	r16, r16
      fc:	88 01       	movw	r16, r16
      fe:	88 01       	movw	r16, r16
     100:	88 01       	movw	r16, r16
     102:	88 01       	movw	r16, r16
     104:	88 01       	movw	r16, r16
     106:	88 01       	movw	r16, r16
     108:	88 01       	movw	r16, r16
     10a:	88 01       	movw	r16, r16
     10c:	88 01       	movw	r16, r16
     10e:	88 01       	movw	r16, r16
     110:	88 01       	movw	r16, r16
     112:	88 01       	movw	r16, r16
     114:	88 01       	movw	r16, r16
     116:	88 01       	movw	r16, r16
     118:	88 01       	movw	r16, r16
     11a:	88 01       	movw	r16, r16
     11c:	88 01       	movw	r16, r16
     11e:	88 01       	movw	r16, r16
     120:	88 01       	movw	r16, r16
     122:	88 01       	movw	r16, r16
     124:	88 01       	movw	r16, r16
     126:	88 01       	movw	r16, r16
     128:	88 01       	movw	r16, r16
     12a:	88 01       	movw	r16, r16
     12c:	88 01       	movw	r16, r16
     12e:	88 01       	movw	r16, r16
     130:	88 01       	movw	r16, r16
     132:	88 01       	movw	r16, r16
     134:	88 01       	movw	r16, r16
     136:	88 01       	movw	r16, r16
     138:	88 01       	movw	r16, r16
     13a:	88 01       	movw	r16, r16
     13c:	88 01       	movw	r16, r16
     13e:	88 01       	movw	r16, r16
     140:	88 01       	movw	r16, r16
     142:	88 01       	movw	r16, r16
     144:	88 01       	movw	r16, r16
     146:	88 01       	movw	r16, r16
     148:	88 01       	movw	r16, r16
     14a:	88 01       	movw	r16, r16
     14c:	88 01       	movw	r16, r16
     14e:	88 01       	movw	r16, r16
     150:	88 01       	movw	r16, r16
     152:	88 01       	movw	r16, r16
     154:	88 01       	movw	r16, r16
     156:	88 01       	movw	r16, r16
     158:	88 01       	movw	r16, r16
     15a:	88 01       	movw	r16, r16
     15c:	88 01       	movw	r16, r16
     15e:	88 01       	movw	r16, r16
     160:	88 01       	movw	r16, r16
     162:	88 01       	movw	r16, r16
     164:	78 01       	movw	r14, r16
     166:	88 01       	movw	r16, r16
     168:	88 01       	movw	r16, r16
     16a:	88 01       	movw	r16, r16
     16c:	7a 01       	movw	r14, r20
     16e:	88 01       	movw	r16, r16
     170:	7c 01       	movw	r14, r24
     172:	7e 01       	movw	r14, r28
     174:	88 01       	movw	r16, r16
     176:	88 01       	movw	r16, r16
     178:	88 01       	movw	r16, r16
     17a:	88 01       	movw	r16, r16
     17c:	88 01       	movw	r16, r16
     17e:	88 01       	movw	r16, r16
     180:	88 01       	movw	r16, r16
     182:	88 01       	movw	r16, r16
     184:	88 01       	movw	r16, r16
     186:	88 01       	movw	r16, r16
     188:	88 01       	movw	r16, r16
     18a:	88 01       	movw	r16, r16
     18c:	88 01       	movw	r16, r16
     18e:	88 01       	movw	r16, r16
     190:	88 01       	movw	r16, r16
     192:	88 01       	movw	r16, r16
     194:	88 01       	movw	r16, r16
     196:	88 01       	movw	r16, r16
     198:	88 01       	movw	r16, r16
     19a:	88 01       	movw	r16, r16
     19c:	88 01       	movw	r16, r16
     19e:	88 01       	movw	r16, r16
     1a0:	88 01       	movw	r16, r16
     1a2:	88 01       	movw	r16, r16
     1a4:	70 01       	movw	r14, r0
     1a6:	88 01       	movw	r16, r16
     1a8:	88 01       	movw	r16, r16
     1aa:	88 01       	movw	r16, r16
     1ac:	72 01       	movw	r14, r4
     1ae:	88 01       	movw	r16, r16
     1b0:	74 01       	movw	r14, r8
     1b2:	76 01       	movw	r14, r12
     1b4:	88 01       	movw	r16, r16
     1b6:	88 01       	movw	r16, r16
     1b8:	88 01       	movw	r16, r16
     1ba:	88 01       	movw	r16, r16
     1bc:	88 01       	movw	r16, r16
     1be:	88 01       	movw	r16, r16
     1c0:	88 01       	movw	r16, r16
     1c2:	88 01       	movw	r16, r16
     1c4:	6a 01       	movw	r12, r20
     1c6:	88 01       	movw	r16, r16
     1c8:	88 01       	movw	r16, r16
     1ca:	88 01       	movw	r16, r16
     1cc:	8a 01       	movw	r16, r20
     1ce:	88 01       	movw	r16, r16
     1d0:	6c 01       	movw	r12, r24
     1d2:	6e 01       	movw	r12, r28

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	15 e0       	ldi	r17, 0x05	; 5
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	e8 e8       	ldi	r30, 0x88	; 136
     1ec:	f3 e1       	ldi	r31, 0x13	; 19
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a6 34       	cpi	r26, 0x46	; 70
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	25 e0       	ldi	r18, 0x05	; 5
     200:	a6 e4       	ldi	r26, 0x46	; 70
     202:	b5 e0       	ldi	r27, 0x05	; 5
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	ad 34       	cpi	r26, 0x4D	; 77
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	35 d4       	rcall	.+2154   	; 0xa7a <main>
     210:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_exit>

00000214 <__bad_interrupt>:
     214:	f5 ce       	rjmp	.-534    	; 0x0 <__vectors>

00000216 <keypad_ScanKey>:
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	9f ee       	ldi	r25, 0xEF	; 239
     21a:	10 c0       	rjmp	.+32     	; 0x23c <keypad_ScanKey+0x26>
     21c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	e9 ef       	ldi	r30, 0xF9	; 249
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <keypad_ScanKey+0xe>
     228:	00 c0       	rjmp	.+0      	; 0x22a <keypad_ScanKey+0x14>
     22a:	00 00       	nop
     22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     230:	8f 70       	andi	r24, 0x0F	; 15
     232:	8f 30       	cpi	r24, 0x0F	; 15
     234:	29 f4       	brne	.+10     	; 0x240 <keypad_ScanKey+0x2a>
     236:	99 0f       	add	r25, r25
     238:	9f 5f       	subi	r25, 0xFF	; 255
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	24 30       	cpi	r18, 0x04	; 4
     23e:	70 f3       	brcs	.-36     	; 0x21c <keypad_ScanKey+0x6>
     240:	90 7f       	andi	r25, 0xF0	; 240
     242:	89 0f       	add	r24, r25
     244:	08 95       	ret

00000246 <KEYPAD_Init>:
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     24c:	08 95       	ret

0000024e <KEYPAD_WaitForKeyRelease>:
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     258:	8f 70       	andi	r24, 0x0F	; 15
     25a:	8f 30       	cpi	r24, 0x0F	; 15
     25c:	c1 f7       	brne	.-16     	; 0x24e <KEYPAD_WaitForKeyRelease>
     25e:	89 ef       	ldi	r24, 0xF9	; 249
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <KEYPAD_WaitForKeyRelease+0x14>
     266:	00 c0       	rjmp	.+0      	; 0x268 <KEYPAD_WaitForKeyRelease+0x1a>
     268:	00 00       	nop
     26a:	8f e0       	ldi	r24, 0x0F	; 15
     26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	8f 30       	cpi	r24, 0x0F	; 15
     278:	51 f7       	brne	.-44     	; 0x24e <KEYPAD_WaitForKeyRelease>
     27a:	08 95       	ret

0000027c <KEYPAD_WaitForKeyPress>:
     27c:	8f e0       	ldi	r24, 0x0F	; 15
     27e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     286:	8f 70       	andi	r24, 0x0F	; 15
     288:	8f 30       	cpi	r24, 0x0F	; 15
     28a:	c1 f3       	breq	.-16     	; 0x27c <KEYPAD_WaitForKeyPress>
     28c:	89 ef       	ldi	r24, 0xF9	; 249
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <KEYPAD_WaitForKeyPress+0x14>
     294:	00 c0       	rjmp	.+0      	; 0x296 <KEYPAD_WaitForKeyPress+0x1a>
     296:	00 00       	nop
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	8f 30       	cpi	r24, 0x0F	; 15
     2a6:	51 f3       	breq	.-44     	; 0x27c <KEYPAD_WaitForKeyPress>
     2a8:	08 95       	ret

000002aa <KEYPAD_GetKey>:
     2aa:	d1 df       	rcall	.-94     	; 0x24e <KEYPAD_WaitForKeyRelease>
     2ac:	89 ef       	ldi	r24, 0xF9	; 249
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <KEYPAD_GetKey+0x6>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <KEYPAD_GetKey+0xc>
     2b6:	00 00       	nop
     2b8:	e1 df       	rcall	.-62     	; 0x27c <KEYPAD_WaitForKeyPress>
     2ba:	ad df       	rcall	.-166    	; 0x216 <keypad_ScanKey>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	e7 57       	subi	r30, 0x77	; 119
     2c2:	f1 09       	sbc	r31, r1
     2c4:	e8 37       	cpi	r30, 0x78	; 120
     2c6:	f1 05       	cpc	r31, r1
     2c8:	18 f5       	brcc	.+70     	; 0x310 <KEYPAD_GetKey+0x66>
     2ca:	88 27       	eor	r24, r24
     2cc:	ee 58       	subi	r30, 0x8E	; 142
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	8f 4f       	sbci	r24, 0xFF	; 255
     2d2:	42 c5       	rjmp	.+2692   	; 0xd58 <__tablejump2__>
     2d4:	8a e2       	ldi	r24, 0x2A	; 42
     2d6:	08 95       	ret
     2d8:	84 e3       	ldi	r24, 0x34	; 52
     2da:	08 95       	ret
     2dc:	81 e3       	ldi	r24, 0x31	; 49
     2de:	08 95       	ret
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	08 95       	ret
     2e4:	88 e3       	ldi	r24, 0x38	; 56
     2e6:	08 95       	ret
     2e8:	85 e3       	ldi	r24, 0x35	; 53
     2ea:	08 95       	ret
     2ec:	82 e3       	ldi	r24, 0x32	; 50
     2ee:	08 95       	ret
     2f0:	83 e2       	ldi	r24, 0x23	; 35
     2f2:	08 95       	ret
     2f4:	89 e3       	ldi	r24, 0x39	; 57
     2f6:	08 95       	ret
     2f8:	86 e3       	ldi	r24, 0x36	; 54
     2fa:	08 95       	ret
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	08 95       	ret
     300:	84 e4       	ldi	r24, 0x44	; 68
     302:	08 95       	ret
     304:	83 e4       	ldi	r24, 0x43	; 67
     306:	08 95       	ret
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	08 95       	ret
     30c:	81 e4       	ldi	r24, 0x41	; 65
     30e:	08 95       	ret
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	08 95       	ret
     314:	87 e3       	ldi	r24, 0x37	; 55
     316:	08 95       	ret

00000318 <toggle_e>:
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	00 00       	nop
     320:	85 b1       	in	r24, 0x05	; 5
     322:	8f 7d       	andi	r24, 0xDF	; 223
     324:	85 b9       	out	0x05, r24	; 5
     326:	08 95       	ret

00000328 <lcd_write>:
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
     32c:	66 23       	and	r22, r22
     32e:	31 f0       	breq	.+12     	; 0x33c <lcd_write+0x14>
     330:	e2 e0       	ldi	r30, 0x02	; 2
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	80 81       	ld	r24, Z
     336:	80 64       	ori	r24, 0x40	; 64
     338:	80 83       	st	Z, r24
     33a:	05 c0       	rjmp	.+10     	; 0x346 <lcd_write+0x1e>
     33c:	e2 e0       	ldi	r30, 0x02	; 2
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	8f 7b       	andi	r24, 0xBF	; 191
     344:	80 83       	st	Z, r24
     346:	85 b1       	in	r24, 0x05	; 5
     348:	8f 7e       	andi	r24, 0xEF	; 239
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	8d b1       	in	r24, 0x0d	; 13
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	8d b9       	out	0x0d, r24	; 13
     352:	83 b3       	in	r24, 0x13	; 19
     354:	80 62       	ori	r24, 0x20	; 32
     356:	83 bb       	out	0x13, r24	; 19
     358:	8d b1       	in	r24, 0x0d	; 13
     35a:	88 60       	ori	r24, 0x08	; 8
     35c:	8d b9       	out	0x0d, r24	; 13
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	80 81       	ld	r24, Z
     364:	88 60       	ori	r24, 0x08	; 8
     366:	80 83       	st	Z, r24
     368:	e2 e0       	ldi	r30, 0x02	; 2
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	80 81       	ld	r24, Z
     36e:	87 7f       	andi	r24, 0xF7	; 247
     370:	80 83       	st	Z, r24
     372:	8e b1       	in	r24, 0x0e	; 14
     374:	87 7f       	andi	r24, 0xF7	; 247
     376:	8e b9       	out	0x0e, r24	; 14
     378:	84 b3       	in	r24, 0x14	; 20
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	84 bb       	out	0x14, r24	; 20
     37e:	8e b1       	in	r24, 0x0e	; 14
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	8e b9       	out	0x0e, r24	; 14
     384:	cc 23       	and	r28, r28
     386:	1c f4       	brge	.+6      	; 0x38e <lcd_write+0x66>
     388:	80 81       	ld	r24, Z
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	80 83       	st	Z, r24
     38e:	c6 ff       	sbrs	r28, 6
     390:	03 c0       	rjmp	.+6      	; 0x398 <lcd_write+0x70>
     392:	8e b1       	in	r24, 0x0e	; 14
     394:	88 60       	ori	r24, 0x08	; 8
     396:	8e b9       	out	0x0e, r24	; 14
     398:	c5 ff       	sbrs	r28, 5
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <lcd_write+0x7a>
     39c:	84 b3       	in	r24, 0x14	; 20
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	84 bb       	out	0x14, r24	; 20
     3a2:	c4 ff       	sbrs	r28, 4
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_write+0x84>
     3a6:	8e b1       	in	r24, 0x0e	; 14
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	8e b9       	out	0x0e, r24	; 14
     3ac:	b5 df       	rcall	.-150    	; 0x318 <toggle_e>
     3ae:	e2 e0       	ldi	r30, 0x02	; 2
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	8e b1       	in	r24, 0x0e	; 14
     3ba:	87 7f       	andi	r24, 0xF7	; 247
     3bc:	8e b9       	out	0x0e, r24	; 14
     3be:	84 b3       	in	r24, 0x14	; 20
     3c0:	8f 7d       	andi	r24, 0xDF	; 223
     3c2:	84 bb       	out	0x14, r24	; 20
     3c4:	8e b1       	in	r24, 0x0e	; 14
     3c6:	8f 7d       	andi	r24, 0xDF	; 223
     3c8:	8e b9       	out	0x0e, r24	; 14
     3ca:	c3 ff       	sbrs	r28, 3
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <lcd_write+0xac>
     3ce:	80 81       	ld	r24, Z
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 83       	st	Z, r24
     3d4:	c2 ff       	sbrs	r28, 2
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <lcd_write+0xb6>
     3d8:	8e b1       	in	r24, 0x0e	; 14
     3da:	88 60       	ori	r24, 0x08	; 8
     3dc:	8e b9       	out	0x0e, r24	; 14
     3de:	c1 ff       	sbrs	r28, 1
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <lcd_write+0xc0>
     3e2:	84 b3       	in	r24, 0x14	; 20
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	84 bb       	out	0x14, r24	; 20
     3e8:	c0 ff       	sbrs	r28, 0
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <lcd_write+0xca>
     3ec:	8e b1       	in	r24, 0x0e	; 14
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	8e b9       	out	0x0e, r24	; 14
     3f2:	92 df       	rcall	.-220    	; 0x318 <toggle_e>
     3f4:	8e b1       	in	r24, 0x0e	; 14
     3f6:	80 62       	ori	r24, 0x20	; 32
     3f8:	8e b9       	out	0x0e, r24	; 14
     3fa:	84 b3       	in	r24, 0x14	; 20
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	84 bb       	out	0x14, r24	; 20
     400:	8e b1       	in	r24, 0x0e	; 14
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8e b9       	out	0x0e, r24	; 14
     406:	e2 e0       	ldi	r30, 0x02	; 2
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	80 83       	st	Z, r24
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <lcd_read>:
     414:	88 23       	and	r24, r24
     416:	31 f0       	breq	.+12     	; 0x424 <lcd_read+0x10>
     418:	e2 e0       	ldi	r30, 0x02	; 2
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
     422:	05 c0       	rjmp	.+10     	; 0x42e <lcd_read+0x1a>
     424:	e2 e0       	ldi	r30, 0x02	; 2
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	80 81       	ld	r24, Z
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
     42e:	85 b1       	in	r24, 0x05	; 5
     430:	80 61       	ori	r24, 0x10	; 16
     432:	85 b9       	out	0x05, r24	; 5
     434:	8d b1       	in	r24, 0x0d	; 13
     436:	8f 7d       	andi	r24, 0xDF	; 223
     438:	8d b9       	out	0x0d, r24	; 13
     43a:	83 b3       	in	r24, 0x13	; 19
     43c:	8f 7d       	andi	r24, 0xDF	; 223
     43e:	83 bb       	out	0x13, r24	; 19
     440:	8d b1       	in	r24, 0x0d	; 13
     442:	87 7f       	andi	r24, 0xF7	; 247
     444:	8d b9       	out	0x0d, r24	; 13
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	87 7f       	andi	r24, 0xF7	; 247
     44e:	80 83       	st	Z, r24
     450:	85 b1       	in	r24, 0x05	; 5
     452:	80 62       	ori	r24, 0x20	; 32
     454:	85 b9       	out	0x05, r24	; 5
     456:	00 00       	nop
     458:	65 99       	sbic	0x0c, 5	; 12
     45a:	02 c0       	rjmp	.+4      	; 0x460 <lcd_read+0x4c>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	01 c0       	rjmp	.+2      	; 0x462 <lcd_read+0x4e>
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	95 99       	sbic	0x12, 5	; 18
     464:	80 62       	ori	r24, 0x20	; 32
     466:	63 99       	sbic	0x0c, 3	; 12
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     46e:	93 fd       	sbrc	r25, 3
     470:	80 68       	ori	r24, 0x80	; 128
     472:	95 b1       	in	r25, 0x05	; 5
     474:	9f 7d       	andi	r25, 0xDF	; 223
     476:	95 b9       	out	0x05, r25	; 5
     478:	00 00       	nop
     47a:	95 b1       	in	r25, 0x05	; 5
     47c:	90 62       	ori	r25, 0x20	; 32
     47e:	95 b9       	out	0x05, r25	; 5
     480:	00 00       	nop
     482:	65 99       	sbic	0x0c, 5	; 12
     484:	81 60       	ori	r24, 0x01	; 1
     486:	95 99       	sbic	0x12, 5	; 18
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	63 99       	sbic	0x0c, 3	; 12
     48c:	84 60       	ori	r24, 0x04	; 4
     48e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     492:	93 fd       	sbrc	r25, 3
     494:	88 60       	ori	r24, 0x08	; 8
     496:	95 b1       	in	r25, 0x05	; 5
     498:	9f 7d       	andi	r25, 0xDF	; 223
     49a:	95 b9       	out	0x05, r25	; 5
     49c:	08 95       	ret

0000049e <lcd_waitbusy>:
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	b9 df       	rcall	.-142    	; 0x414 <lcd_read>
     4a2:	88 23       	and	r24, r24
     4a4:	e4 f3       	brlt	.-8      	; 0x49e <lcd_waitbusy>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_waitbusy+0xa>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_waitbusy+0xc>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	b3 cf       	rjmp	.-154    	; 0x414 <lcd_read>
     4ae:	08 95       	ret

000004b0 <lcd_command>:
     4b0:	cf 93       	push	r28
     4b2:	c8 2f       	mov	r28, r24
     4b4:	f4 df       	rcall	.-24     	; 0x49e <lcd_waitbusy>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	8c 2f       	mov	r24, r28
     4ba:	36 df       	rcall	.-404    	; 0x328 <lcd_write>
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <lcd_gotoxy>:
     4c0:	61 11       	cpse	r22, r1
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <lcd_gotoxy+0xa>
     4c4:	80 58       	subi	r24, 0x80	; 128
     4c6:	f4 cf       	rjmp	.-24     	; 0x4b0 <lcd_command>
     4c8:	08 95       	ret
     4ca:	80 54       	subi	r24, 0x40	; 64
     4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <lcd_command>
     4ce:	08 95       	ret

000004d0 <lcd_clrscr>:
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	ee cf       	rjmp	.-36     	; 0x4b0 <lcd_command>
     4d4:	08 95       	ret

000004d6 <lcd_putc>:
     4d6:	cf 93       	push	r28
     4d8:	c8 2f       	mov	r28, r24
     4da:	e1 df       	rcall	.-62     	; 0x49e <lcd_waitbusy>
     4dc:	ca 30       	cpi	r28, 0x0A	; 10
     4de:	41 f4       	brne	.+16     	; 0x4f0 <lcd_putc+0x1a>
     4e0:	80 34       	cpi	r24, 0x40	; 64
     4e2:	10 f4       	brcc	.+4      	; 0x4e8 <lcd_putc+0x12>
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <lcd_putc+0x14>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	80 58       	subi	r24, 0x80	; 128
     4ec:	e1 df       	rcall	.-62     	; 0x4b0 <lcd_command>
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <lcd_putc+0x20>
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	8c 2f       	mov	r24, r28
     4f4:	19 df       	rcall	.-462    	; 0x328 <lcd_write>
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <lcd_puts>:
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	fc 01       	movw	r30, r24
     500:	02 c0       	rjmp	.+4      	; 0x506 <lcd_puts+0xc>
     502:	e9 df       	rcall	.-46     	; 0x4d6 <lcd_putc>
     504:	fe 01       	movw	r30, r28
     506:	ef 01       	movw	r28, r30
     508:	21 96       	adiw	r28, 0x01	; 1
     50a:	80 81       	ld	r24, Z
     50c:	81 11       	cpse	r24, r1
     50e:	f9 cf       	rjmp	.-14     	; 0x502 <lcd_puts+0x8>
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <lcd_init>:
     516:	cf 93       	push	r28
     518:	c8 2f       	mov	r28, r24
     51a:	e1 e0       	ldi	r30, 0x01	; 1
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	80 64       	ori	r24, 0x40	; 64
     522:	80 83       	st	Z, r24
     524:	84 b1       	in	r24, 0x04	; 4
     526:	80 61       	ori	r24, 0x10	; 16
     528:	84 b9       	out	0x04, r24	; 4
     52a:	84 b1       	in	r24, 0x04	; 4
     52c:	80 62       	ori	r24, 0x20	; 32
     52e:	84 b9       	out	0x04, r24	; 4
     530:	8d b1       	in	r24, 0x0d	; 13
     532:	80 62       	ori	r24, 0x20	; 32
     534:	8d b9       	out	0x0d, r24	; 13
     536:	83 b3       	in	r24, 0x13	; 19
     538:	80 62       	ori	r24, 0x20	; 32
     53a:	83 bb       	out	0x13, r24	; 19
     53c:	8d b1       	in	r24, 0x0d	; 13
     53e:	88 60       	ori	r24, 0x08	; 8
     540:	8d b9       	out	0x0d, r24	; 13
     542:	80 81       	ld	r24, Z
     544:	88 60       	ori	r24, 0x08	; 8
     546:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	8f e9       	ldi	r24, 0x9F	; 159
     54a:	9f e0       	ldi	r25, 0x0F	; 15
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <lcd_init+0x36>
     550:	00 c0       	rjmp	.+0      	; 0x552 <lcd_init+0x3c>
     552:	00 00       	nop
     554:	84 b3       	in	r24, 0x14	; 20
     556:	80 62       	ori	r24, 0x20	; 32
     558:	84 bb       	out	0x14, r24	; 20
     55a:	8e b1       	in	r24, 0x0e	; 14
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8e b9       	out	0x0e, r24	; 14
     560:	db de       	rcall	.-586    	; 0x318 <toggle_e>
     562:	81 ee       	ldi	r24, 0xE1	; 225
     564:	94 e0       	ldi	r25, 0x04	; 4
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <lcd_init+0x50>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <lcd_init+0x56>
     56c:	00 00       	nop
     56e:	d4 de       	rcall	.-600    	; 0x318 <toggle_e>
     570:	95 e1       	ldi	r25, 0x15	; 21
     572:	9a 95       	dec	r25
     574:	f1 f7       	brne	.-4      	; 0x572 <lcd_init+0x5c>
     576:	00 00       	nop
     578:	cf de       	rcall	.-610    	; 0x318 <toggle_e>
     57a:	85 e1       	ldi	r24, 0x15	; 21
     57c:	8a 95       	dec	r24
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x66>
     580:	00 00       	nop
     582:	8e b1       	in	r24, 0x0e	; 14
     584:	8f 7d       	andi	r24, 0xDF	; 223
     586:	8e b9       	out	0x0e, r24	; 14
     588:	c7 de       	rcall	.-626    	; 0x318 <toggle_e>
     58a:	95 e1       	ldi	r25, 0x15	; 21
     58c:	9a 95       	dec	r25
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init+0x76>
     590:	00 00       	nop
     592:	88 e2       	ldi	r24, 0x28	; 40
     594:	8d df       	rcall	.-230    	; 0x4b0 <lcd_command>
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	8b df       	rcall	.-234    	; 0x4b0 <lcd_command>
     59a:	9a df       	rcall	.-204    	; 0x4d0 <lcd_clrscr>
     59c:	86 e0       	ldi	r24, 0x06	; 6
     59e:	88 df       	rcall	.-240    	; 0x4b0 <lcd_command>
     5a0:	8c 2f       	mov	r24, r28
     5a2:	86 df       	rcall	.-244    	; 0x4b0 <lcd_command>
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <__vector_3>:
char* ptr;

uint8_t key_input = 0;

// Trigger emergency mode function when button pressed (Falling edge interrupt)
ISR(INT2_vect) {
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	8f 93       	push	r24
	if (elevator_moving) { // Check if the elevator is moving
     5b4:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <elevator_moving>
     5b8:	88 23       	and	r24, r24
     5ba:	19 f0       	breq	.+6      	; 0x5c2 <__vector_3+0x1a>
		emergency_stop_requested = true;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <emergency_stop_requested>
	}
}
     5c2:	8f 91       	pop	r24
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <clear_LCD_line>:
	clear_LCD_line(1);
	lcd_puts(str);
}

// Clear one line (row) from LCD
void clear_LCD_line(uint8_t row){
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	d8 2f       	mov	r29, r24
	lcd_gotoxy(0, row);
     5d4:	68 2f       	mov	r22, r24
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	73 df       	rcall	.-282    	; 0x4c0 <lcd_gotoxy>
	for(uint8_t i=0; i < 16; i++)
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <clear_LCD_line+0x16>
	lcd_putc(' ');
     5de:	80 e2       	ldi	r24, 0x20	; 32
     5e0:	7a df       	rcall	.-268    	; 0x4d6 <lcd_putc>
}

// Clear one line (row) from LCD
void clear_LCD_line(uint8_t row){
	lcd_gotoxy(0, row);
	for(uint8_t i=0; i < 16; i++)
     5e2:	cf 5f       	subi	r28, 0xFF	; 255
     5e4:	c0 31       	cpi	r28, 0x10	; 16
     5e6:	d8 f3       	brcs	.-10     	; 0x5de <clear_LCD_line+0x10>
	lcd_putc(' ');
	lcd_gotoxy(0,row);
     5e8:	6d 2f       	mov	r22, r29
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	69 df       	rcall	.-302    	; 0x4c0 <lcd_gotoxy>
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <LCD_top>:
	PORTD |= (1 << EMERGENCY_BUTTON);  // Enable pull-up resistor on PD2
	sei();                      // Enable global interrupts
}

// LCD display top row updates
void LCD_top(const char* msg) {
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
	lcd_gotoxy(0,0);
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	60 df       	rcall	.-320    	; 0x4c0 <lcd_gotoxy>
	clear_LCD_line(0);
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	e5 df       	rcall	.-54     	; 0x5ce <clear_LCD_line>
	lcd_puts(msg);
     604:	ce 01       	movw	r24, r28
     606:	79 df       	rcall	.-270    	; 0x4fa <lcd_puts>
     608:	df 91       	pop	r29
}
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <LCD_bottom>:
     60e:	0f 93       	push	r16

// LCD display bottom row updates
void LCD_bottom(int floor){
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	64 97       	sbiw	r28, 0x14	; 20
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	sprintf(str, "Floor now: %d", floor);
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	8e 01       	movw	r16, r28
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	1f 93       	push	r17
     63a:	0f 93       	push	r16
     63c:	b8 d3       	rcall	.+1904   	; 0xdae <sprintf>
	lcd_gotoxy(0,1);
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	3e df       	rcall	.-388    	; 0x4c0 <lcd_gotoxy>
	clear_LCD_line(1);
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	c3 df       	rcall	.-122    	; 0x5ce <clear_LCD_line>
	lcd_puts(str);
     648:	c8 01       	movw	r24, r16
     64a:	57 df       	rcall	.-338    	; 0x4fa <lcd_puts>
     64c:	0f 90       	pop	r0
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	64 96       	adiw	r28, 0x14	; 20
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	08 95       	ret

0000066e <TWI_init>:
     66e:	88 e4       	ldi	r24, 0x48	; 72
	LCD_top("Choose the floor"); // Go back to idle message
}

// Initialize TWI as master (remains the same)
void TWI_init(void) {
	TWBR = 72;
     670:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
	TWSR = 0;
     674:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     678:	08 95       	ret

0000067a <TWI_stop>:
	return 1;
}

// Stop TWI transmission (remains the same)
void TWI_stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     67a:	84 e9       	ldi	r24, 0x94	; 148
     67c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     680:	8f e9       	ldi	r24, 0x9F	; 159
     682:	9f e0       	ldi	r25, 0x0F	; 15
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <TWI_stop+0xa>
     688:	00 c0       	rjmp	.+0      	; 0x68a <TWI_stop+0x10>
     68a:	00 00       	nop
     68c:	08 95       	ret

0000068e <UART_init>:
	_delay_ms(1);
}

// Initialize UART for debugging (remains the same)
void UART_init(void) {
	UBRR0H = 0;
     68e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = 103;
     692:	87 e6       	ldi	r24, 0x67	; 103
     694:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     69e:	86 e0       	ldi	r24, 0x06	; 6
     6a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
     6a4:	08 95       	ret

000006a6 <UART_send_char>:
}

// Send a character through UART (remains the same)
void UART_send_char(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
     6a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     6aa:	95 ff       	sbrs	r25, 5
     6ac:	fc cf       	rjmp	.-8      	; 0x6a6 <UART_send_char>
	UDR0 = data;
     6ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     6b2:	08 95       	ret

000006b4 <UART_send_string>:
}

// Send a string through UART (remains the same)
void UART_send_string(char* str) {
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
	while (*str) {
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <UART_send_string+0xc>
		UART_send_char(*str++);
     6bc:	21 96       	adiw	r28, 0x01	; 1
     6be:	f3 df       	rcall	.-26     	; 0x6a6 <UART_send_char>
	UDR0 = data;
}

// Send a string through UART (remains the same)
void UART_send_string(char* str) {
	while (*str) {
     6c0:	88 81       	ld	r24, Y
     6c2:	81 11       	cpse	r24, r1
     6c4:	fb cf       	rjmp	.-10     	; 0x6bc <UART_send_string+0x8>
		UART_send_char(*str++);
	}
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <setup>:
	LCD_top("Choose the floor");
}

void setup(){
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
     6cc:	8c e0       	ldi	r24, 0x0C	; 12
     6ce:	23 df       	rcall	.-442    	; 0x516 <lcd_init>
	lcd_clrscr();
     6d0:	ff de       	rcall	.-514    	; 0x4d0 <lcd_clrscr>
     6d2:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_top("Choose the floor");
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	8e df       	rcall	.-228    	; 0x5f4 <LCD_top>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
	LCD_bottom(0);
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	98 df       	rcall	.-208    	; 0x60e <LCD_bottom>
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	89 ef       	ldi	r24, 0xF9	; 249
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <setup+0x18>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <setup+0x22>
     6ee:	00 00       	nop
     6f0:	ce df       	rcall	.-100    	; 0x68e <UART_init>
	_delay_ms(20);
	// Initialize UART for debugging
	UART_init();
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	89 ef       	ldi	r24, 0xF9	; 249
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	90 40       	sbci	r25, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <setup+0x2c>
     700:	00 c0       	rjmp	.+0      	; 0x702 <setup+0x36>
     702:	00 00       	nop
	_delay_ms(20);
	UART_send_string("Elevator Master Program - NASA SERTIFIED PRODUCT\r\n");
     704:	8f e1       	ldi	r24, 0x1F	; 31
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	d5 df       	rcall	.-86     	; 0x6b4 <UART_send_string>
     70a:	b1 df       	rcall	.-158    	; 0x66e <TWI_init>

	// Initialize TWI as master
	TWI_init();
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	89 ef       	ldi	r24, 0xF9	; 249
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	21 50       	subi	r18, 0x01	; 1
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	90 40       	sbci	r25, 0x00	; 0
     718:	e1 f7       	brne	.-8      	; 0x712 <setup+0x46>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <setup+0x50>
     71c:	00 00       	nop
     71e:	93 dd       	rcall	.-1242   	; 0x246 <KEYPAD_Init>
	_delay_ms(20);
	// Init keypad
	KEYPAD_Init();
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	89 ef       	ldi	r24, 0xF9	; 249
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	21 50       	subi	r18, 0x01	; 1
     728:	80 40       	sbci	r24, 0x00	; 0
     72a:	90 40       	sbci	r25, 0x00	; 0
     72c:	e1 f7       	brne	.-8      	; 0x726 <setup+0x5a>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <setup+0x64>
     730:	00 00       	nop
     732:	8d b3       	in	r24, 0x1d	; 29
     734:	84 60       	ori	r24, 0x04	; 4
	_delay_ms(20);

	// Initialize interrupts for emergency button
	EIMSK |= (1 << INT2);      // Enable external interrupt INT2
     736:	8d bb       	out	0x1d, r24	; 29
     738:	e9 e6       	ldi	r30, 0x69	; 105
     73a:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1 << ISC21);      // Falling edge generates interrupt request
     73c:	80 81       	ld	r24, Z
     73e:	80 62       	ori	r24, 0x20	; 32
     740:	80 83       	st	Z, r24
     742:	80 81       	ld	r24, Z
     744:	8f 7e       	andi	r24, 0xEF	; 239
	EICRA &= ~(1 << ISC20);
     746:	80 83       	st	Z, r24
     748:	8a b1       	in	r24, 0x0a	; 10
     74a:	8b 7f       	andi	r24, 0xFB	; 251
	DDRD &= ~(1 << EMERGENCY_BUTTON); // PD2 (INT2) as input
     74c:	8a b9       	out	0x0a, r24	; 10
     74e:	8b b1       	in	r24, 0x0b	; 11
     750:	84 60       	ori	r24, 0x04	; 4
	PORTD |= (1 << EMERGENCY_BUTTON);  // Enable pull-up resistor on PD2
     752:	8b b9       	out	0x0b, r24	; 11
     754:	78 94       	sei
     756:	08 95       	ret

00000758 <get_key_pressed>:
	sei();                      // Enable global interrupts
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
	for(uint8_t i=0; i < 16; i++)
	lcd_putc(' ');
	lcd_gotoxy(0,row);
}

uint8_t get_key_pressed(){
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	a0 97       	sbiw	r28, 0x20	; 32
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
	uint8_t key_index = 0;
	uint8_t floor_value = 0;
	
	char key[16];
	
	UART_send_string("Select floor between 0 - 99.");
     778:	82 e5       	ldi	r24, 0x52	; 82
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	9b df       	rcall	.-202    	; 0x6b4 <UART_send_string>
	UART_send_string ("\r\n");
     77e:	84 e1       	ldi	r24, 0x14	; 20
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	98 df       	rcall	.-208    	; 0x6b4 <UART_send_string>
	UART_send_string("'*' confirms floor.");
     784:	8f e6       	ldi	r24, 0x6F	; 111
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	95 df       	rcall	.-214    	; 0x6b4 <UART_send_string>
	UART_send_string ("\r\n");
     78a:	84 e1       	ldi	r24, 0x14	; 20
     78c:	94 e0       	ldi	r25, 0x04	; 4
     78e:	92 df       	rcall	.-220    	; 0x6b4 <UART_send_string>
     790:	00 e0       	ldi	r16, 0x00	; 0

uint8_t get_key_pressed(){


	uint8_t keypad_ready = 0;
	uint8_t key_index = 0;
     792:	f1 2c       	mov	r15, r1
}

uint8_t get_key_pressed(){


	uint8_t keypad_ready = 0;
     794:	e1 2c       	mov	r14, r1
	UART_send_string("Select floor between 0 - 99.");
	UART_send_string ("\r\n");
	UART_send_string("'*' confirms floor.");
	UART_send_string ("\r\n");
	
	while(keypad_ready == 0){
     796:	94 c0       	rjmp	.+296    	; 0x8c0 <get_key_pressed+0x168>
		
		// Read raw signal from keypad
		uint8_t key_signal = KEYPAD_GetKey();
     798:	88 dd       	rcall	.-1264   	; 0x2aa <KEYPAD_GetKey>
     79a:	2f ef       	ldi	r18, 0xFF	; 255
     79c:	31 ee       	ldi	r19, 0xE1	; 225
     79e:	94 e0       	ldi	r25, 0x04	; 4
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	30 40       	sbci	r19, 0x00	; 0
     7a4:	90 40       	sbci	r25, 0x00	; 0
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <get_key_pressed+0x48>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <get_key_pressed+0x52>
     7aa:	00 00       	nop
     7ac:	10 ed       	ldi	r17, 0xD0	; 208
		
		// Check for valid key press
		//if (key_signal != 0xFF) { // Assuming 0xFF means no key pressed

		// For numeric keys (0 to 9)
		if (key_signal >= '0' && key_signal <= '9') {
     7ae:	18 0f       	add	r17, r24
     7b0:	1a 30       	cpi	r17, 0x0A	; 10
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <get_key_pressed+0x5e>
     7b4:	5a c0       	rjmp	.+180    	; 0x86a <get_key_pressed+0x112>
     7b6:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	81 2f       	mov	r24, r17
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	d2 d2       	rcall	.+1444   	; 0xd68 <__itoa_ncheck>
			// Convert key to numeric value
			uint8_t key_value = key_signal - '0'; // Convert ASCII value to numeric value

			itoa(key_value, key, 10);
			UART_send_string("Pressed key: ");
     7c4:	83 e8       	ldi	r24, 0x83	; 131
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	75 df       	rcall	.-278    	; 0x6b4 <UART_send_string>
			UART_send_string(key);
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	72 df       	rcall	.-284    	; 0x6b4 <UART_send_string>
			UART_send_string(" -- ");
     7d0:	81 e9       	ldi	r24, 0x91	; 145
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	6f df       	rcall	.-290    	; 0x6b4 <UART_send_string>
     7d6:	86 e9       	ldi	r24, 0x96	; 150
			UART_send_string("Key index: ");
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	6c df       	rcall	.-296    	; 0x6b4 <UART_send_string>
     7dc:	4a e0       	ldi	r20, 0x0A	; 10
     7de:	be 01       	movw	r22, r28
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	8f 2d       	mov	r24, r15
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	bf d2       	rcall	.+1406   	; 0xd68 <__itoa_ncheck>
     7ea:	ce 01       	movw	r24, r28
			itoa(key_index, key, 10);
			UART_send_string(key);
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	62 df       	rcall	.-316    	; 0x6b4 <UART_send_string>
     7f0:	84 e1       	ldi	r24, 0x14	; 20
     7f2:	94 e0       	ldi	r25, 0x04	; 4
			UART_send_string ("\r\n");
     7f4:	5f df       	rcall	.-322    	; 0x6b4 <UART_send_string>
     7f6:	22 e0       	ldi	r18, 0x02	; 2
     7f8:	f2 12       	cpse	r15, r18
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <get_key_pressed+0xa8>

			// If two values are already given, reset the current input and start over
			if(key_index == 2){
     7fc:	00 e0       	ldi	r16, 0x00	; 0
     7fe:	f1 2c       	mov	r15, r1
     800:	f1 10       	cpse	r15, r1
				floor_value = 0;
     802:	03 c0       	rjmp	.+6      	; 0x80a <get_key_pressed+0xb2>
				key_index = 0;
     804:	f3 94       	inc	r15
			}
			
			// Add the First value "X + Y"
			if(key_index == 0){
     806:	01 2f       	mov	r16, r17
     808:	0a c0       	rjmp	.+20     	; 0x81e <get_key_pressed+0xc6>
				floor_value = key_value;
				key_index++;
     80a:	31 e0       	ldi	r19, 0x01	; 1
				key_index = 0;
			}
			
			// Add the First value "X + Y"
			if(key_index == 0){
				floor_value = key_value;
     80c:	f3 12       	cpse	r15, r19
     80e:	07 c0       	rjmp	.+14     	; 0x81e <get_key_pressed+0xc6>
				key_index++;
				
				// Add the Second value "X + Y"
				} else if (key_index == 1){
     810:	00 0f       	add	r16, r16
     812:	80 2f       	mov	r24, r16
     814:	88 0f       	add	r24, r24
				floor_value = floor_value*10 + key_value;
     816:	88 0f       	add	r24, r24
     818:	08 0f       	add	r16, r24
     81a:	01 0f       	add	r16, r17
     81c:	f3 94       	inc	r15
     81e:	4a e0       	ldi	r20, 0x0A	; 10
     820:	ce 01       	movw	r24, r28
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	6c 01       	movw	r12, r24
     826:	bc 01       	movw	r22, r24
     828:	80 2f       	mov	r24, r16
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	9d d2       	rcall	.+1338   	; 0xd68 <__itoa_ncheck>
     82e:	82 ea       	ldi	r24, 0xA2	; 162
				key_index++;
			}
			
			itoa(floor_value, key, 10);
			UART_send_string("Current floor: ");
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	40 df       	rcall	.-384    	; 0x6b4 <UART_send_string>
     834:	c6 01       	movw	r24, r12
			UART_send_string(key);
     836:	3e df       	rcall	.-388    	; 0x6b4 <UART_send_string>
     838:	df 92       	push	r13
			char lcd_msg[16];
			sprintf(lcd_msg, "Input: %s", key);
     83a:	cf 92       	push	r12
     83c:	82 eb       	ldi	r24, 0xB2	; 178
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	9f 93       	push	r25
     842:	8f 93       	push	r24
     844:	6e 01       	movw	r12, r28
     846:	91 e1       	ldi	r25, 0x11	; 17
     848:	c9 0e       	add	r12, r25
     84a:	d1 1c       	adc	r13, r1
     84c:	df 92       	push	r13
     84e:	cf 92       	push	r12
     850:	ae d2       	rcall	.+1372   	; 0xdae <sprintf>
     852:	c6 01       	movw	r24, r12
			LCD_top(lcd_msg);
     854:	cf de       	rcall	.-610    	; 0x5f4 <LCD_top>
     856:	84 e1       	ldi	r24, 0x14	; 20
     858:	94 e0       	ldi	r25, 0x04	; 4
			UART_send_string ("\r\n");
     85a:	2c df       	rcall	.-424    	; 0x6b4 <UART_send_string>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	2b c0       	rjmp	.+86     	; 0x8c0 <get_key_pressed+0x168>
		}
		
		// If key input is '*' we are ready with inputs.
		//}
		
		else if(key_signal == 42){
     86a:	8a 32       	cpi	r24, 0x2A	; 42
     86c:	99 f4       	brne	.+38     	; 0x894 <get_key_pressed+0x13c>
     86e:	4a e0       	ldi	r20, 0x0A	; 10
     870:	be 01       	movw	r22, r28
     872:	6f 5f       	subi	r22, 0xFF	; 255
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	80 2f       	mov	r24, r16
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	76 d2       	rcall	.+1260   	; 0xd68 <__itoa_ncheck>
			keypad_ready = 1;
			itoa(floor_value, key, 10);
			UART_send_string("Set floor: ");
     87c:	8c eb       	ldi	r24, 0xBC	; 188
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	19 df       	rcall	.-462    	; 0x6b4 <UART_send_string>
			UART_send_string(key);
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	16 df       	rcall	.-468    	; 0x6b4 <UART_send_string>
			UART_send_string ("\r\n");
     888:	84 e1       	ldi	r24, 0x14	; 20
     88a:	94 e0       	ldi	r25, 0x04	; 4
     88c:	13 df       	rcall	.-474    	; 0x6b4 <UART_send_string>
		
		// If key input is '*' we are ready with inputs.
		//}
		
		else if(key_signal == 42){
			keypad_ready = 1;
     88e:	ee 24       	eor	r14, r14
     890:	e3 94       	inc	r14
     892:	16 c0       	rjmp	.+44     	; 0x8c0 <get_key_pressed+0x168>
     894:	4a e0       	ldi	r20, 0x0A	; 10
     896:	be 01       	movw	r22, r28
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	80 2f       	mov	r24, r16
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	63 d2       	rcall	.+1222   	; 0xd68 <__itoa_ncheck>
			UART_send_string("Set floor: ");
			UART_send_string(key);
			UART_send_string ("\r\n");
			} else {
			itoa(floor_value, key, 10);
			UART_send_string("Key pressed: ");
     8a2:	88 ec       	ldi	r24, 0xC8	; 200
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	06 df       	rcall	.-500    	; 0x6b4 <UART_send_string>
     8a8:	ce 01       	movw	r24, r28
			UART_send_string(key);
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	03 df       	rcall	.-506    	; 0x6b4 <UART_send_string>
     8ae:	84 e1       	ldi	r24, 0x14	; 20
     8b0:	94 e0       	ldi	r25, 0x04	; 4
			UART_send_string ("\r\n");
     8b2:	00 df       	rcall	.-512    	; 0x6b4 <UART_send_string>
     8b4:	86 ed       	ldi	r24, 0xD6	; 214
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	fd de       	rcall	.-518    	; 0x6b4 <UART_send_string>
			UART_send_string("Give proper value between 0 - 9");
     8ba:	84 e1       	ldi	r24, 0x14	; 20
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	fa de       	rcall	.-524    	; 0x6b4 <UART_send_string>
     8c0:	ee 20       	and	r14, r14
			UART_send_string ("\r\n");
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <get_key_pressed+0x16e>
     8c4:	69 cf       	rjmp	.-302    	; 0x798 <get_key_pressed+0x40>
     8c6:	80 2f       	mov	r24, r16
     8c8:	a0 96       	adiw	r28, 0x20	; 32
	UART_send_string("Select floor between 0 - 99.");
	UART_send_string ("\r\n");
	UART_send_string("'*' confirms floor.");
	UART_send_string ("\r\n");
	
	while(keypad_ready == 0){
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
			UART_send_string("Give proper value between 0 - 9");
			UART_send_string ("\r\n");
		}
	}
	return floor_value;
}
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <get_any_key_press>:
     8e6:	86 ef       	ldi	r24, 0xF6	; 246
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	e4 de       	rcall	.-568    	; 0x6b4 <UART_send_string>
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <get_any_key_press+0x1e>

uint8_t get_any_key_press(){
	uint8_t key_signal = 0xFF;
	UART_send_string("Press any key to stop emergency melody.\r\n");
	while(key_signal == 0xFF){
		key_signal = KEYPAD_GetKey();
     8f0:	dc dc       	rcall	.-1608   	; 0x2aa <KEYPAD_GetKey>
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	31 ee       	ldi	r19, 0xE1	; 225
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	30 40       	sbci	r19, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <get_any_key_press+0x12>
     900:	00 c0       	rjmp	.+0      	; 0x902 <get_any_key_press+0x1c>
     902:	00 00       	nop
}

uint8_t get_any_key_press(){
	uint8_t key_signal = 0xFF;
	UART_send_string("Press any key to stop emergency melody.\r\n");
	while(key_signal == 0xFF){
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	a1 f3       	breq	.-24     	; 0x8f0 <get_any_key_press+0xa>
		key_signal = KEYPAD_GetKey();
		_delay_ms(100); // Debounce
	}
	return key_signal;
}
     908:	08 95       	ret

0000090a <TWI_start>:
	TWSR = 0;
}

// Start TWI transmission (remains the same)
uint8_t TWI_start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     90a:	84 ea       	ldi	r24, 0xA4	; 164
     90c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1 << TWINT)));
     910:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     914:	88 23       	and	r24, r24
     916:	e4 f7       	brge	.-8      	; 0x910 <TWI_start+0x6>
	if ((TWSR & 0xF8) != 0x08) {
     918:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     91c:	88 7f       	andi	r24, 0xF8	; 248
     91e:	88 30       	cpi	r24, 0x08	; 8
     920:	29 f0       	breq	.+10     	; 0x92c <TWI_start+0x22>
		UART_send_string("TWI start error\r\n");
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	c6 de       	rcall	.-628    	; 0x6b4 <UART_send_string>
		return 0;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret
	}
	return 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
}
     92e:	08 95       	ret

00000930 <TWI_write>:

// Write a byte to the TWI bus (remains the same)
uint8_t TWI_write(uint8_t data) {
	TWDR = data;
     930:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     934:	84 e8       	ldi	r24, 0x84	; 132
     936:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while (!(TWCR & (1 << TWINT)));
     93a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     93e:	88 23       	and	r24, r24
     940:	e4 f7       	brge	.-8      	; 0x93a <TWI_write+0xa>
	if ((TWSR & 0xF8) != 0x18 && (TWSR & 0xF8) != 0x28) {
     942:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     946:	88 7f       	andi	r24, 0xF8	; 248
     948:	88 31       	cpi	r24, 0x18	; 24
     94a:	51 f0       	breq	.+20     	; 0x960 <TWI_write+0x30>
     94c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     950:	88 7f       	andi	r24, 0xF8	; 248
     952:	88 32       	cpi	r24, 0x28	; 40
     954:	39 f0       	breq	.+14     	; 0x964 <TWI_write+0x34>
		UART_send_string("TWI write error\r\n");
     956:	82 e3       	ldi	r24, 0x32	; 50
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	ac de       	rcall	.-680    	; 0x6b4 <UART_send_string>
		return 0;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret
	}
	return 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret
     964:	81 e0       	ldi	r24, 0x01	; 1
}
     966:	08 95       	ret

00000968 <send_command>:
	}
	return key_signal;
}

// Send a command to the slave device
void send_command(char cmd) {
     968:	cf 93       	push	r28
     96a:	c8 2f       	mov	r28, r24
	UART_send_string("Sending command: ");
     96c:	84 e4       	ldi	r24, 0x44	; 68
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	a1 de       	rcall	.-702    	; 0x6b4 <UART_send_string>
	UART_send_char(cmd);
     972:	8c 2f       	mov	r24, r28
     974:	98 de       	rcall	.-720    	; 0x6a6 <UART_send_char>
	UART_send_string("\r\n");
     976:	84 e1       	ldi	r24, 0x14	; 20
     978:	94 e0       	ldi	r25, 0x04	; 4

	if (TWI_start()) {
     97a:	9c de       	rcall	.-712    	; 0x6b4 <UART_send_string>
     97c:	c6 df       	rcall	.-116    	; 0x90a <TWI_start>
     97e:	88 23       	and	r24, r24
		UART_send_string("TWI started\r\n");
     980:	51 f1       	breq	.+84     	; 0x9d6 <send_command+0x6e>
     982:	86 e5       	ldi	r24, 0x56	; 86
     984:	93 e0       	ldi	r25, 0x03	; 3

		if (TWI_write((SLAVE_ADDRESS << 1) | 0)) {  // SLA+W
     986:	96 de       	rcall	.-724    	; 0x6b4 <UART_send_string>
     988:	8e ea       	ldi	r24, 0xAE	; 174
     98a:	d2 df       	rcall	.-92     	; 0x930 <TWI_write>
     98c:	88 23       	and	r24, r24
			if (TWI_write(cmd)) {
     98e:	d9 f0       	breq	.+54     	; 0x9c6 <send_command+0x5e>
     990:	8c 2f       	mov	r24, r28
     992:	ce df       	rcall	.-100    	; 0x930 <TWI_write>
     994:	88 23       	and	r24, r24
				UART_send_string("Command sent successfully\r\n");
     996:	99 f0       	breq	.+38     	; 0x9be <send_command+0x56>
     998:	84 e6       	ldi	r24, 0x64	; 100
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	8b de       	rcall	.-746    	; 0x6b4 <UART_send_string>
				// Flash an indicator LED on the master (optional for debugging)
				PORTB |= (1 << PB7);  // Assuming LED on PB7 (adjust if needed)
     99e:	85 b1       	in	r24, 0x05	; 5
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	85 b9       	out	0x05, r24	; 5
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
     9a6:	81 ee       	ldi	r24, 0xE1	; 225
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	90 40       	sbci	r25, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <send_command+0x42>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <send_command+0x4c>
				_delay_ms(100);
				PORTB &= ~(1 << PB7);
     9b4:	00 00       	nop
     9b6:	85 b1       	in	r24, 0x05	; 5
     9b8:	8f 77       	andi	r24, 0x7F	; 127
				} else {
				UART_send_string("Failed to send command\r\n");
     9ba:	85 b9       	out	0x05, r24	; 5
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <send_command+0x64>
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	93 e0       	ldi	r25, 0x03	; 3
			}
			} else {
			UART_send_string("Slave not responding\r\n");
     9c2:	78 de       	rcall	.-784    	; 0x6b4 <UART_send_string>
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <send_command+0x64>
     9c6:	89 e9       	ldi	r24, 0x99	; 153
		}
		TWI_stop();
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	74 de       	rcall	.-792    	; 0x6b4 <UART_send_string>
		UART_send_string("TWI stopped\r\n");
     9cc:	56 de       	rcall	.-852    	; 0x67a <TWI_stop>
     9ce:	80 eb       	ldi	r24, 0xB0	; 176
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	70 de       	rcall	.-800    	; 0x6b4 <UART_send_string>
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <send_command+0x74>
		} else {
		UART_send_string("TWI start failed\r\n");
     9d6:	8e eb       	ldi	r24, 0xBE	; 190
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	6c de       	rcall	.-808    	; 0x6b4 <UART_send_string>
     9dc:	cf 91       	pop	r28
	}
}
     9de:	08 95       	ret

000009e0 <door_open_close>:
     9e0:	81 ed       	ldi	r24, 0xD1	; 209
	}
	return 0;
}

void door_open_close() {
	UART_send_string("Door open!\r\n");
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	67 de       	rcall	.-818    	; 0x6b4 <UART_send_string>
	send_command('O');
     9e6:	8f e4       	ldi	r24, 0x4F	; 79
     9e8:	bf df       	rcall	.-130    	; 0x968 <send_command>
	LCD_top("Door is open");
     9ea:	8e ed       	ldi	r24, 0xDE	; 222
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	02 de       	rcall	.-1020   	; 0x5f4 <LCD_top>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	83 e2       	ldi	r24, 0x23	; 35
     9f4:	94 ef       	ldi	r25, 0xF4	; 244
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <door_open_close+0x16>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <door_open_close+0x20>
	_delay_ms(5000);

	UART_send_string("Door close!\r\n");
     a00:	00 00       	nop
     a02:	8b ee       	ldi	r24, 0xEB	; 235
     a04:	93 e0       	ldi	r25, 0x03	; 3
	send_command('C');
     a06:	56 de       	rcall	.-852    	; 0x6b4 <UART_send_string>
     a08:	83 e4       	ldi	r24, 0x43	; 67
	LCD_top("Door is closed");
     a0a:	ae df       	rcall	.-164    	; 0x968 <send_command>
     a0c:	89 ef       	ldi	r24, 0xF9	; 249
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	f1 dd       	rcall	.-1054   	; 0x5f4 <LCD_top>
     a12:	2f ef       	ldi	r18, 0xFF	; 255
     a14:	83 ed       	ldi	r24, 0xD3	; 211
     a16:	90 e3       	ldi	r25, 0x30	; 48
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <door_open_close+0x38>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <door_open_close+0x42>
	_delay_ms(1000);
	LCD_top("Choose the floor");
     a22:	00 00       	nop
     a24:	8e e0       	ldi	r24, 0x0E	; 14
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	e5 cd       	rjmp	.-1078   	; 0x5f4 <LCD_top>
     a2a:	08 95       	ret

00000a2c <emergency_mode>:
		UART_send_string("TWI start failed\r\n");
	}
}

void emergency_mode() {
	emergency_sequence_active = true;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <emergency_sequence_active>
	UART_send_string("Emergency!!!\r\n");
     a32:	88 e0       	ldi	r24, 0x08	; 8
     a34:	94 e0       	ldi	r25, 0x04	; 4
     a36:	3e de       	rcall	.-900    	; 0x6b4 <UART_send_string>
	LCD_top("EMERGENCY!");
     a38:	87 e1       	ldi	r24, 0x17	; 23
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	db dd       	rcall	.-1098   	; 0x5f4 <LCD_top>
	clear_LCD_line(1);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	c6 dd       	rcall	.-1140   	; 0x5ce <clear_LCD_line>
	send_command('E');  // Send emergency command to slave (blinking LED)
     a42:	85 e4       	ldi	r24, 0x45	; 69
     a44:	91 df       	rcall	.-222    	; 0x968 <send_command>
	UART_send_string("Press any key on keypad to open door and start emergency melody.\r\n");
     a46:	82 e2       	ldi	r24, 0x22	; 34
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	34 de       	rcall	.-920    	; 0x6b4 <UART_send_string>
	get_any_key_press(); // Wait for any key press
     a4c:	4c df       	rcall	.-360    	; 0x8e6 <get_any_key_press>
	send_command('P');  // Send command to open door and start melody on slave
     a4e:	80 e5       	ldi	r24, 0x50	; 80
     a50:	8b df       	rcall	.-234    	; 0x968 <send_command>
     a52:	85 e6       	ldi	r24, 0x65	; 101
	LCD_top("Door is open!");
     a54:	94 e0       	ldi	r25, 0x04	; 4
     a56:	ce cd       	rjmp	.-1124   	; 0x5f4 <LCD_top>
     a58:	08 95       	ret

00000a5a <stop_emergency_melody>:
     a5a:	88 e5       	ldi	r24, 0x58	; 88
     a5c:	85 df       	rcall	.-246    	; 0x968 <send_command>
}

void stop_emergency_melody() {
	send_command('X');  // Send command to stop melody on slave
	UART_send_string("Emergency melody stopped. Door will close.\r\n");
     a5e:	83 e7       	ldi	r24, 0x73	; 115
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	28 de       	rcall	.-944    	; 0x6b4 <UART_send_string>
	LCD_top("EMERGENCY - Melody OFF");
     a64:	80 ea       	ldi	r24, 0xA0	; 160
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	c5 dd       	rcall	.-1142   	; 0x5f4 <LCD_top>
	// Slave will handle door closing automatically after melody stop
	LCD_bottom(current_floor); // Update the displayed floor
     a6a:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     a6e:	90 e0       	ldi	r25, 0x00	; 0
	LCD_top("Choose the floor"); // Go back to idle message
     a70:	ce dd       	rcall	.-1124   	; 0x60e <LCD_bottom>
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	be cd       	rjmp	.-1156   	; 0x5f4 <LCD_top>
     a78:	08 95       	ret

00000a7a <main>:
	if (elevator_moving) { // Check if the elevator is moving
		emergency_stop_requested = true;
	}
}

int main(void) {
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	6e 97       	sbiw	r28, 0x1e	; 30
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
	setup();
     a8e:	1e de       	rcall	.-964    	; 0x6cc <setup>

	char str[30];

	while (1) {
		if (emergency_stop_requested) {
     a90:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <emergency_stop_requested>
     a94:	88 23       	and	r24, r24
     a96:	31 f0       	breq	.+12     	; 0xaa4 <main+0x2a>
			cli();
     a98:	f8 94       	cli
			emergency_stop_requested = false;
     a9a:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <emergency_stop_requested>
			emergency_mode();
     a9e:	c6 df       	rcall	.-116    	; 0xa2c <emergency_mode>
			sei();
     aa0:	78 94       	sei
			continue;
     aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <main+0x16>
		}

		if (!emergency_sequence_active) {
     aa4:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <emergency_sequence_active>
     aa8:	81 11       	cpse	r24, r1
			key_input = get_key_pressed();
     aaa:	3a c1       	rjmp	.+628    	; 0xd20 <main+0x2a6>
     aac:	55 de       	rcall	.-854    	; 0x758 <get_key_pressed>
     aae:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <__data_end>
     ab2:	4a e0       	ldi	r20, 0x0A	; 10
     ab4:	be 01       	movw	r22, r28
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	90 e0       	ldi	r25, 0x00	; 0

			itoa(key_input, str, 10);
			UART_send_string("Pressed key: ");
     abc:	55 d1       	rcall	.+682    	; 0xd68 <__itoa_ncheck>
     abe:	83 e8       	ldi	r24, 0x83	; 131
     ac0:	92 e0       	ldi	r25, 0x02	; 2
			UART_send_string(str);
     ac2:	f8 dd       	rcall	.-1040   	; 0x6b4 <UART_send_string>
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
			UART_send_string("\r\n");
     ac8:	f5 dd       	rcall	.-1046   	; 0x6b4 <UART_send_string>
     aca:	84 e1       	ldi	r24, 0x14	; 20
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	f2 dd       	rcall	.-1052   	; 0x6b4 <UART_send_string>

			// Define next state
			if (current_floor < key_input) {
     ad0:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     ad4:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <__data_end>
     ad8:	82 17       	cp	r24, r18
     ada:	18 f4       	brcc	.+6      	; 0xae2 <main+0x68>
				current_state = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <current_state>
			}
			if (current_floor == key_input) {
     ae2:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     ae6:	28 13       	cpse	r18, r24
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <main+0x76>
				current_state = 2;
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <current_state>
			}
			if (current_floor > key_input) {
     af0:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     af4:	28 17       	cp	r18, r24
     af6:	18 f4       	brcc	.+6      	; 0xafe <main+0x84>
				current_state = 3;
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <current_state>
			}

			floors_to_travel = abs(current_floor - key_input);
     afe:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	82 1b       	sub	r24, r18
     b06:	91 09       	sbc	r25, r1
     b08:	9c 01       	movw	r18, r24
     b0a:	22 f4       	brpl	.+8      	; 0xb14 <main+0x9a>
     b0c:	22 27       	eor	r18, r18
     b0e:	33 27       	eor	r19, r19
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	20 93 4a 05 	sts	0x054A, r18	; 0x80054a <floors_to_travel>

			// Debug:
			UART_send_string("Current floor: ");
     b18:	82 ea       	ldi	r24, 0xA2	; 162
     b1a:	92 e0       	ldi	r25, 0x02	; 2
			itoa(current_floor, str, 10);
     b1c:	cb dd       	rcall	.-1130   	; 0x6b4 <UART_send_string>
     b1e:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     b22:	4a e0       	ldi	r20, 0x0A	; 10
     b24:	be 01       	movw	r22, r28
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
			UART_send_string(str);
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	1d d1       	rcall	.+570    	; 0xd68 <__itoa_ncheck>
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
			UART_send_string(", Floors to travel: ");
     b32:	c0 dd       	rcall	.-1152   	; 0x6b4 <UART_send_string>
     b34:	87 eb       	ldi	r24, 0xB7	; 183
     b36:	94 e0       	ldi	r25, 0x04	; 4
			itoa(floors_to_travel, str, 10);
     b38:	bd dd       	rcall	.-1158   	; 0x6b4 <UART_send_string>
     b3a:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <floors_to_travel>
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	be 01       	movw	r22, r28
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0f d1       	rcall	.+542    	; 0xd68 <__itoa_ncheck>
			UART_send_string("\r\n");
     b4a:	84 e1       	ldi	r24, 0x14	; 20
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	b2 dd       	rcall	.-1180   	; 0x6b4 <UART_send_string>
     b50:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <current_state>

			switch (current_state) {
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	09 f4       	brne	.+2      	; 0xb5a <main+0xe0>
     b58:	61 c0       	rjmp	.+194    	; 0xc1c <main+0x1a2>
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	09 f4       	brne	.+2      	; 0xb60 <main+0xe6>
     b5e:	85 c0       	rjmp	.+266    	; 0xc6a <main+0x1f0>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f0       	breq	.+2      	; 0xb66 <main+0xec>
     b64:	f2 c0       	rjmp	.+484    	; 0xd4a <main+0x2d0>
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	89 ef       	ldi	r24, 0xF9	; 249
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	80 40       	sbci	r24, 0x00	; 0
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <main+0xf2>
				case 1: // GO UP
				_delay_ms(20);
				UART_send_string("Going up!\r\n");
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <main+0xfc>
     b76:	00 00       	nop
     b78:	8c ec       	ldi	r24, 0xCC	; 204
     b7a:	94 e0       	ldi	r25, 0x04	; 4
				send_command('M');
     b7c:	9b dd       	rcall	.-1226   	; 0x6b4 <UART_send_string>
     b7e:	8d e4       	ldi	r24, 0x4D	; 77
     b80:	f3 de       	rcall	.-538    	; 0x968 <send_command>
				LCD_top("Going up");
     b82:	88 ed       	ldi	r24, 0xD8	; 216
     b84:	94 e0       	ldi	r25, 0x04	; 4
     b86:	36 dd       	rcall	.-1428   	; 0x5f4 <LCD_top>
				elevator_moving = true; // Set moving flag
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <elevator_moving>
				for (int i = 0; i < floors_to_travel; i++) {
     b8e:	00 e0       	ldi	r16, 0x00	; 0
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	2f c0       	rjmp	.+94     	; 0xbf2 <main+0x178>
					if (emergency_stop_requested) {
     b94:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <emergency_stop_requested>
     b98:	88 23       	and	r24, r24
						cli();
     b9a:	31 f0       	breq	.+12     	; 0xba8 <main+0x12e>
						emergency_stop_requested = false;
     b9c:	f8 94       	cli
     b9e:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <emergency_stop_requested>
						emergency_mode();
     ba2:	44 df       	rcall	.-376    	; 0xa2c <emergency_mode>
						sei();
						goto idle_state;
     ba4:	78 94       	sei
					}
					current_floor++;
     ba6:	d1 c0       	rjmp	.+418    	; 0xd4a <main+0x2d0>
     ba8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     bac:	8f 5f       	subi	r24, 0xFF	; 255
					UART_send_string("Moving to floor: ");
     bae:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <current_floor>
     bb2:	81 ee       	ldi	r24, 0xE1	; 225
					itoa(current_floor, str, 10);
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	7e dd       	rcall	.-1284   	; 0x6b4 <UART_send_string>
     bb8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     bbc:	4a e0       	ldi	r20, 0x0A	; 10
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
     bc6:	d0 d0       	rcall	.+416    	; 0xd68 <__itoa_ncheck>
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	73 dd       	rcall	.-1306   	; 0x6b4 <UART_send_string>
					UART_send_string("\r\n");
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	70 dd       	rcall	.-1312   	; 0x6b4 <UART_send_string>
     bd4:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
					LCD_bottom(current_floor);
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	19 dd       	rcall	.-1486   	; 0x60e <LCD_bottom>
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	81 ee       	ldi	r24, 0xE1	; 225
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <main+0x168>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <main+0x172>
     bec:	00 00       	nop
     bee:	0f 5f       	subi	r16, 0xFF	; 255
				_delay_ms(20);
				UART_send_string("Going up!\r\n");
				send_command('M');
				LCD_top("Going up");
				elevator_moving = true; // Set moving flag
				for (int i = 0; i < floors_to_travel; i++) {
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <floors_to_travel>
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	08 17       	cp	r16, r24
     bfa:	19 07       	cpc	r17, r25
     bfc:	5c f2       	brlt	.-106    	; 0xb94 <main+0x11a>
     bfe:	83 e5       	ldi	r24, 0x53	; 83
					UART_send_string(str);
					UART_send_string("\r\n");
					LCD_bottom(current_floor);
					_delay_ms(100);
				}
				send_command('S');
     c00:	b3 de       	rcall	.-666    	; 0x968 <send_command>
     c02:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <elevator_moving>
				elevator_moving = false; // Clear moving flag
     c06:	ec de       	rcall	.-552    	; 0x9e0 <door_open_close>
				door_open_close();
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	83 ec       	ldi	r24, 0xC3	; 195
     c0c:	99 e0       	ldi	r25, 0x09	; 9
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	80 40       	sbci	r24, 0x00	; 0
     c12:	90 40       	sbci	r25, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <main+0x194>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <main+0x19e>
     c18:	00 00       	nop
     c1a:	97 c0       	rjmp	.+302    	; 0xd4a <main+0x2d0>
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	89 ef       	ldi	r24, 0xF9	; 249
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	80 40       	sbci	r24, 0x00	; 0
     c26:	90 40       	sbci	r25, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0x1a8>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <main+0x1b2>
				_delay_ms(200);
				break;

				case 2: // SAME FLOOR -> Fault state
				_delay_ms(20);
				UART_send_string("Fault state.\r\n");
     c2c:	00 00       	nop
     c2e:	83 ef       	ldi	r24, 0xF3	; 243
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	40 dd       	rcall	.-1408   	; 0x6b4 <UART_send_string>
				LCD_top("Same Floor");
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	dd dc       	rcall	.-1606   	; 0x5f4 <LCD_top>
     c3a:	86 e4       	ldi	r24, 0x46	; 70
				send_command('F');
     c3c:	95 de       	rcall	.-726    	; 0x968 <send_command>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	87 e9       	ldi	r24, 0x97	; 151
     c42:	9a e3       	ldi	r25, 0x3A	; 58
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <main+0x1ca>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <main+0x1d4>
     c4e:	00 00       	nop
     c50:	8e e0       	ldi	r24, 0x0E	; 14
				_delay_ms(1200);
				LCD_top("Choose the floor");
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	cf dc       	rcall	.-1634   	; 0x5f4 <LCD_top>
     c56:	2f ef       	ldi	r18, 0xFF	; 255
     c58:	83 ec       	ldi	r24, 0xC3	; 195
     c5a:	99 e0       	ldi	r25, 0x09	; 9
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	90 40       	sbci	r25, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <main+0x1e2>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <main+0x1ec>
     c66:	00 00       	nop
     c68:	70 c0       	rjmp	.+224    	; 0xd4a <main+0x2d0>
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	89 ef       	ldi	r24, 0xF9	; 249
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	21 50       	subi	r18, 0x01	; 1
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	90 40       	sbci	r25, 0x00	; 0
     c76:	e1 f7       	brne	.-8      	; 0xc70 <main+0x1f6>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <main+0x200>
     c7a:	00 00       	nop
				_delay_ms(200);
				break;

				case 3: // GO DOWN
				_delay_ms(20);
				UART_send_string("Going down!\r\n");
     c7c:	8d e0       	ldi	r24, 0x0D	; 13
     c7e:	95 e0       	ldi	r25, 0x05	; 5
     c80:	19 dd       	rcall	.-1486   	; 0x6b4 <UART_send_string>
				send_command('M');
     c82:	8d e4       	ldi	r24, 0x4D	; 77
     c84:	71 de       	rcall	.-798    	; 0x968 <send_command>
     c86:	8b e1       	ldi	r24, 0x1B	; 27
				LCD_top("Going down");
     c88:	95 e0       	ldi	r25, 0x05	; 5
     c8a:	b4 dc       	rcall	.-1688   	; 0x5f4 <LCD_top>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <elevator_moving>
				elevator_moving = true; // Set moving flag
     c92:	00 e0       	ldi	r16, 0x00	; 0
				for (int i = 0; i < floors_to_travel; i++) {
     c94:	10 e0       	ldi	r17, 0x00	; 0
     c96:	2f c0       	rjmp	.+94     	; 0xcf6 <main+0x27c>
					if (emergency_stop_requested) {
     c98:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <emergency_stop_requested>
     c9c:	88 23       	and	r24, r24
						cli();
						emergency_stop_requested = false;
     c9e:	31 f0       	breq	.+12     	; 0xcac <main+0x232>
     ca0:	f8 94       	cli
						emergency_mode();
     ca2:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <emergency_stop_requested>
						sei();
     ca6:	c2 de       	rcall	.-636    	; 0xa2c <emergency_mode>
						goto idle_state;
     ca8:	78 94       	sei
					}
					current_floor--;
     caa:	4f c0       	rjmp	.+158    	; 0xd4a <main+0x2d0>
     cac:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     cb0:	81 50       	subi	r24, 0x01	; 1
     cb2:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <current_floor>
					UART_send_string("Moving to floor: ");
     cb6:	81 ee       	ldi	r24, 0xE1	; 225
     cb8:	94 e0       	ldi	r25, 0x04	; 4
     cba:	fc dc       	rcall	.-1544   	; 0x6b4 <UART_send_string>
					itoa(current_floor, str, 10);
     cbc:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
     cc0:	4a e0       	ldi	r20, 0x0A	; 10
     cc2:	be 01       	movw	r22, r28
     cc4:	6f 5f       	subi	r22, 0xFF	; 255
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
     cca:	4e d0       	rcall	.+156    	; 0xd68 <__itoa_ncheck>
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	f1 dc       	rcall	.-1566   	; 0x6b4 <UART_send_string>
					UART_send_string("\r\n");
     cd2:	84 e1       	ldi	r24, 0x14	; 20
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	ee dc       	rcall	.-1572   	; 0x6b4 <UART_send_string>
     cd8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <current_floor>
					LCD_bottom(current_floor);
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	97 dc       	rcall	.-1746   	; 0x60e <LCD_bottom>
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	81 ee       	ldi	r24, 0xE1	; 225
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <main+0x26c>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <main+0x276>
     cf0:	00 00       	nop
				_delay_ms(20);
				UART_send_string("Going down!\r\n");
				send_command('M');
				LCD_top("Going down");
				elevator_moving = true; // Set moving flag
				for (int i = 0; i < floors_to_travel; i++) {
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <floors_to_travel>
     cfa:	90 e0       	ldi	r25, 0x00	; 0
					UART_send_string(str);
					UART_send_string("\r\n");
					LCD_bottom(current_floor);
					_delay_ms(100);
				}
				send_command('S');
     cfc:	08 17       	cp	r16, r24
     cfe:	19 07       	cpc	r17, r25
     d00:	5c f2       	brlt	.-106    	; 0xc98 <main+0x21e>
				elevator_moving = false; // Clear moving flag
     d02:	83 e5       	ldi	r24, 0x53	; 83
     d04:	31 de       	rcall	.-926    	; 0x968 <send_command>
				door_open_close();
     d06:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <elevator_moving>
     d0a:	6a de       	rcall	.-812    	; 0x9e0 <door_open_close>
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	83 ec       	ldi	r24, 0xC3	; 195
     d10:	99 e0       	ldi	r25, 0x09	; 9
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <main+0x298>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <main+0x2a2>
     d1c:	00 00       	nop
				_delay_ms(200);
				break;
			}
			} else {
			uint8_t stop_key = get_any_key_press();
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <main+0x2d0>
     d20:	e2 dd       	rcall	.-1084   	; 0x8e6 <get_any_key_press>
     d22:	18 2f       	mov	r17, r24
			UART_send_string("Key pressed during emergency: ");
     d24:	86 e2       	ldi	r24, 0x26	; 38
     d26:	95 e0       	ldi	r25, 0x05	; 5
     d28:	c5 dc       	rcall	.-1654   	; 0x6b4 <UART_send_string>
     d2a:	4a e0       	ldi	r20, 0x0A	; 10
     d2c:	be 01       	movw	r22, r28
     d2e:	6f 5f       	subi	r22, 0xFF	; 255
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	81 2f       	mov	r24, r17
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	18 d0       	rcall	.+48     	; 0xd68 <__itoa_ncheck>
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
			itoa(stop_key, str, 10);
			UART_send_string(str);
     d3c:	bb dc       	rcall	.-1674   	; 0x6b4 <UART_send_string>
     d3e:	84 e1       	ldi	r24, 0x14	; 20
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	b8 dc       	rcall	.-1680   	; 0x6b4 <UART_send_string>
			UART_send_string("\r\n");
     d44:	8a de       	rcall	.-748    	; 0xa5a <stop_emergency_melody>
     d46:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <emergency_sequence_active>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
			stop_emergency_melody();
     d4c:	9c e9       	ldi	r25, 0x9C	; 156
     d4e:	01 97       	sbiw	r24, 0x01	; 1
			emergency_sequence_active = false;
     d50:	f1 f7       	brne	.-4      	; 0xd4e <main+0x2d4>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <main+0x2da>
     d54:	00 00       	nop
     d56:	9c ce       	rjmp	.-712    	; 0xa90 <main+0x16>

00000d58 <__tablejump2__>:
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	88 1f       	adc	r24, r24
     d5e:	8b bf       	out	0x3b, r24	; 59
     d60:	07 90       	elpm	r0, Z+
     d62:	f6 91       	elpm	r31, Z
     d64:	e0 2d       	mov	r30, r0
     d66:	19 94       	eijmp

00000d68 <__itoa_ncheck>:
     d68:	bb 27       	eor	r27, r27
     d6a:	4a 30       	cpi	r20, 0x0A	; 10
     d6c:	31 f4       	brne	.+12     	; 0xd7a <__itoa_ncheck+0x12>
     d6e:	99 23       	and	r25, r25
     d70:	22 f4       	brpl	.+8      	; 0xd7a <__itoa_ncheck+0x12>
     d72:	bd e2       	ldi	r27, 0x2D	; 45
     d74:	90 95       	com	r25
     d76:	81 95       	neg	r24
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <__utoa_common>

00000d7c <__utoa_ncheck>:
     d7c:	bb 27       	eor	r27, r27

00000d7e <__utoa_common>:
     d7e:	fb 01       	movw	r30, r22
     d80:	55 27       	eor	r21, r21
     d82:	aa 27       	eor	r26, r26
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	aa 1f       	adc	r26, r26
     d8a:	a4 17       	cp	r26, r20
     d8c:	10 f0       	brcs	.+4      	; 0xd92 <__utoa_common+0x14>
     d8e:	a4 1b       	sub	r26, r20
     d90:	83 95       	inc	r24
     d92:	50 51       	subi	r21, 0x10	; 16
     d94:	b9 f7       	brne	.-18     	; 0xd84 <__utoa_common+0x6>
     d96:	a0 5d       	subi	r26, 0xD0	; 208
     d98:	aa 33       	cpi	r26, 0x3A	; 58
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <__utoa_common+0x20>
     d9c:	a9 5d       	subi	r26, 0xD9	; 217
     d9e:	a1 93       	st	Z+, r26
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	79 f7       	brne	.-34     	; 0xd82 <__utoa_common+0x4>
     da4:	b1 11       	cpse	r27, r1
     da6:	b1 93       	st	Z+, r27
     da8:	11 92       	st	Z+, r1
     daa:	cb 01       	movw	r24, r22
     dac:	41 c2       	rjmp	.+1154   	; 0x1230 <strrev>

00000dae <sprintf>:
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	2e 97       	sbiw	r28, 0x0e	; 14
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	0e 89       	ldd	r16, Y+22	; 0x16
     dc8:	1f 89       	ldd	r17, Y+23	; 0x17
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	8c 83       	std	Y+4, r24	; 0x04
     dce:	1a 83       	std	Y+2, r17	; 0x02
     dd0:	09 83       	std	Y+1, r16	; 0x01
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	9f e7       	ldi	r25, 0x7F	; 127
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	ae 01       	movw	r20, r28
     ddc:	46 5e       	subi	r20, 0xE6	; 230
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	68 8d       	ldd	r22, Y+24	; 0x18
     de2:	79 8d       	ldd	r23, Y+25	; 0x19
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	10 d0       	rcall	.+32     	; 0xe0a <vfprintf>
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	e0 0f       	add	r30, r16
     df0:	f1 1f       	adc	r31, r17
     df2:	10 82       	st	Z, r1
     df4:	2e 96       	adiw	r28, 0x0e	; 14
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <vfprintf>:
     e0a:	2f 92       	push	r2
     e0c:	3f 92       	push	r3
     e0e:	4f 92       	push	r4
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	7f 92       	push	r7
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	2b 97       	sbiw	r28, 0x0b	; 11
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	6c 01       	movw	r12, r24
     e40:	7b 01       	movw	r14, r22
     e42:	8a 01       	movw	r16, r20
     e44:	fc 01       	movw	r30, r24
     e46:	17 82       	std	Z+7, r1	; 0x07
     e48:	16 82       	std	Z+6, r1	; 0x06
     e4a:	83 81       	ldd	r24, Z+3	; 0x03
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	bf c1       	rjmp	.+894    	; 0x11ce <__EEPROM_REGION_LENGTH__+0x1ce>
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	3c 01       	movw	r6, r24
     e56:	f6 01       	movw	r30, r12
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	f7 01       	movw	r30, r14
     e5c:	93 fd       	sbrc	r25, 3
     e5e:	85 91       	lpm	r24, Z+
     e60:	93 ff       	sbrs	r25, 3
     e62:	81 91       	ld	r24, Z+
     e64:	7f 01       	movw	r14, r30
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <vfprintf+0x62>
     e6a:	ad c1       	rjmp	.+858    	; 0x11c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     e6c:	85 32       	cpi	r24, 0x25	; 37
     e6e:	39 f4       	brne	.+14     	; 0xe7e <vfprintf+0x74>
     e70:	93 fd       	sbrc	r25, 3
     e72:	85 91       	lpm	r24, Z+
     e74:	93 ff       	sbrs	r25, 3
     e76:	81 91       	ld	r24, Z+
     e78:	7f 01       	movw	r14, r30
     e7a:	85 32       	cpi	r24, 0x25	; 37
     e7c:	21 f4       	brne	.+8      	; 0xe86 <vfprintf+0x7c>
     e7e:	b6 01       	movw	r22, r12
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	e6 d1       	rcall	.+972    	; 0x1250 <fputc>
     e84:	e8 cf       	rjmp	.-48     	; 0xe56 <vfprintf+0x4c>
     e86:	91 2c       	mov	r9, r1
     e88:	21 2c       	mov	r2, r1
     e8a:	31 2c       	mov	r3, r1
     e8c:	ff e1       	ldi	r31, 0x1F	; 31
     e8e:	f3 15       	cp	r31, r3
     e90:	d8 f0       	brcs	.+54     	; 0xec8 <vfprintf+0xbe>
     e92:	8b 32       	cpi	r24, 0x2B	; 43
     e94:	79 f0       	breq	.+30     	; 0xeb4 <vfprintf+0xaa>
     e96:	38 f4       	brcc	.+14     	; 0xea6 <vfprintf+0x9c>
     e98:	80 32       	cpi	r24, 0x20	; 32
     e9a:	79 f0       	breq	.+30     	; 0xeba <vfprintf+0xb0>
     e9c:	83 32       	cpi	r24, 0x23	; 35
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <vfprintf+0xbe>
     ea0:	23 2d       	mov	r18, r3
     ea2:	20 61       	ori	r18, 0x10	; 16
     ea4:	1d c0       	rjmp	.+58     	; 0xee0 <vfprintf+0xd6>
     ea6:	8d 32       	cpi	r24, 0x2D	; 45
     ea8:	61 f0       	breq	.+24     	; 0xec2 <vfprintf+0xb8>
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	69 f4       	brne	.+26     	; 0xec8 <vfprintf+0xbe>
     eae:	23 2d       	mov	r18, r3
     eb0:	21 60       	ori	r18, 0x01	; 1
     eb2:	16 c0       	rjmp	.+44     	; 0xee0 <vfprintf+0xd6>
     eb4:	83 2d       	mov	r24, r3
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	38 2e       	mov	r3, r24
     eba:	e3 2d       	mov	r30, r3
     ebc:	e4 60       	ori	r30, 0x04	; 4
     ebe:	3e 2e       	mov	r3, r30
     ec0:	2a c0       	rjmp	.+84     	; 0xf16 <vfprintf+0x10c>
     ec2:	f3 2d       	mov	r31, r3
     ec4:	f8 60       	ori	r31, 0x08	; 8
     ec6:	1d c0       	rjmp	.+58     	; 0xf02 <vfprintf+0xf8>
     ec8:	37 fc       	sbrc	r3, 7
     eca:	2d c0       	rjmp	.+90     	; 0xf26 <vfprintf+0x11c>
     ecc:	20 ed       	ldi	r18, 0xD0	; 208
     ece:	28 0f       	add	r18, r24
     ed0:	2a 30       	cpi	r18, 0x0A	; 10
     ed2:	40 f0       	brcs	.+16     	; 0xee4 <vfprintf+0xda>
     ed4:	8e 32       	cpi	r24, 0x2E	; 46
     ed6:	b9 f4       	brne	.+46     	; 0xf06 <vfprintf+0xfc>
     ed8:	36 fc       	sbrc	r3, 6
     eda:	75 c1       	rjmp	.+746    	; 0x11c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     edc:	23 2d       	mov	r18, r3
     ede:	20 64       	ori	r18, 0x40	; 64
     ee0:	32 2e       	mov	r3, r18
     ee2:	19 c0       	rjmp	.+50     	; 0xf16 <vfprintf+0x10c>
     ee4:	36 fe       	sbrs	r3, 6
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0xea>
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	98 9e       	mul	r9, r24
     eec:	20 0d       	add	r18, r0
     eee:	11 24       	eor	r1, r1
     ef0:	92 2e       	mov	r9, r18
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <vfprintf+0x10c>
     ef4:	ea e0       	ldi	r30, 0x0A	; 10
     ef6:	2e 9e       	mul	r2, r30
     ef8:	20 0d       	add	r18, r0
     efa:	11 24       	eor	r1, r1
     efc:	22 2e       	mov	r2, r18
     efe:	f3 2d       	mov	r31, r3
     f00:	f0 62       	ori	r31, 0x20	; 32
     f02:	3f 2e       	mov	r3, r31
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <vfprintf+0x10c>
     f06:	8c 36       	cpi	r24, 0x6C	; 108
     f08:	21 f4       	brne	.+8      	; 0xf12 <vfprintf+0x108>
     f0a:	83 2d       	mov	r24, r3
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	38 2e       	mov	r3, r24
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x10c>
     f12:	88 36       	cpi	r24, 0x68	; 104
     f14:	41 f4       	brne	.+16     	; 0xf26 <vfprintf+0x11c>
     f16:	f7 01       	movw	r30, r14
     f18:	93 fd       	sbrc	r25, 3
     f1a:	85 91       	lpm	r24, Z+
     f1c:	93 ff       	sbrs	r25, 3
     f1e:	81 91       	ld	r24, Z+
     f20:	7f 01       	movw	r14, r30
     f22:	81 11       	cpse	r24, r1
     f24:	b3 cf       	rjmp	.-154    	; 0xe8c <vfprintf+0x82>
     f26:	98 2f       	mov	r25, r24
     f28:	9f 7d       	andi	r25, 0xDF	; 223
     f2a:	95 54       	subi	r25, 0x45	; 69
     f2c:	93 30       	cpi	r25, 0x03	; 3
     f2e:	28 f4       	brcc	.+10     	; 0xf3a <vfprintf+0x130>
     f30:	0c 5f       	subi	r16, 0xFC	; 252
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	9f e3       	ldi	r25, 0x3F	; 63
     f36:	99 83       	std	Y+1, r25	; 0x01
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <vfprintf+0x14a>
     f3a:	83 36       	cpi	r24, 0x63	; 99
     f3c:	31 f0       	breq	.+12     	; 0xf4a <vfprintf+0x140>
     f3e:	83 37       	cpi	r24, 0x73	; 115
     f40:	71 f0       	breq	.+28     	; 0xf5e <vfprintf+0x154>
     f42:	83 35       	cpi	r24, 0x53	; 83
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x13e>
     f46:	55 c0       	rjmp	.+170    	; 0xff2 <vfprintf+0x1e8>
     f48:	20 c0       	rjmp	.+64     	; 0xf8a <vfprintf+0x180>
     f4a:	f8 01       	movw	r30, r16
     f4c:	80 81       	ld	r24, Z
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	88 24       	eor	r8, r8
     f56:	83 94       	inc	r8
     f58:	91 2c       	mov	r9, r1
     f5a:	53 01       	movw	r10, r6
     f5c:	12 c0       	rjmp	.+36     	; 0xf82 <vfprintf+0x178>
     f5e:	28 01       	movw	r4, r16
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	4f 0e       	add	r4, r31
     f64:	51 1c       	adc	r5, r1
     f66:	f8 01       	movw	r30, r16
     f68:	a0 80       	ld	r10, Z
     f6a:	b1 80       	ldd	r11, Z+1	; 0x01
     f6c:	36 fe       	sbrs	r3, 6
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <vfprintf+0x16c>
     f70:	69 2d       	mov	r22, r9
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x170>
     f76:	6f ef       	ldi	r22, 0xFF	; 255
     f78:	7f ef       	ldi	r23, 0xFF	; 255
     f7a:	c5 01       	movw	r24, r10
     f7c:	4e d1       	rcall	.+668    	; 0x121a <strnlen>
     f7e:	4c 01       	movw	r8, r24
     f80:	82 01       	movw	r16, r4
     f82:	f3 2d       	mov	r31, r3
     f84:	ff 77       	andi	r31, 0x7F	; 127
     f86:	3f 2e       	mov	r3, r31
     f88:	15 c0       	rjmp	.+42     	; 0xfb4 <vfprintf+0x1aa>
     f8a:	28 01       	movw	r4, r16
     f8c:	22 e0       	ldi	r18, 0x02	; 2
     f8e:	42 0e       	add	r4, r18
     f90:	51 1c       	adc	r5, r1
     f92:	f8 01       	movw	r30, r16
     f94:	a0 80       	ld	r10, Z
     f96:	b1 80       	ldd	r11, Z+1	; 0x01
     f98:	36 fe       	sbrs	r3, 6
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <vfprintf+0x198>
     f9c:	69 2d       	mov	r22, r9
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <vfprintf+0x19c>
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	c5 01       	movw	r24, r10
     fa8:	2d d1       	rcall	.+602    	; 0x1204 <strnlen_P>
     faa:	4c 01       	movw	r8, r24
     fac:	f3 2d       	mov	r31, r3
     fae:	f0 68       	ori	r31, 0x80	; 128
     fb0:	3f 2e       	mov	r3, r31
     fb2:	82 01       	movw	r16, r4
     fb4:	33 fc       	sbrc	r3, 3
     fb6:	19 c0       	rjmp	.+50     	; 0xfea <vfprintf+0x1e0>
     fb8:	82 2d       	mov	r24, r2
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	88 16       	cp	r8, r24
     fbe:	99 06       	cpc	r9, r25
     fc0:	a0 f4       	brcc	.+40     	; 0xfea <vfprintf+0x1e0>
     fc2:	b6 01       	movw	r22, r12
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	43 d1       	rcall	.+646    	; 0x1250 <fputc>
     fca:	2a 94       	dec	r2
     fcc:	f5 cf       	rjmp	.-22     	; 0xfb8 <vfprintf+0x1ae>
     fce:	f5 01       	movw	r30, r10
     fd0:	37 fc       	sbrc	r3, 7
     fd2:	85 91       	lpm	r24, Z+
     fd4:	37 fe       	sbrs	r3, 7
     fd6:	81 91       	ld	r24, Z+
     fd8:	5f 01       	movw	r10, r30
     fda:	b6 01       	movw	r22, r12
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	38 d1       	rcall	.+624    	; 0x1250 <fputc>
     fe0:	21 10       	cpse	r2, r1
     fe2:	2a 94       	dec	r2
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	82 1a       	sub	r8, r18
     fe8:	91 08       	sbc	r9, r1
     fea:	81 14       	cp	r8, r1
     fec:	91 04       	cpc	r9, r1
     fee:	79 f7       	brne	.-34     	; 0xfce <vfprintf+0x1c4>
     ff0:	e1 c0       	rjmp	.+450    	; 0x11b4 <__EEPROM_REGION_LENGTH__+0x1b4>
     ff2:	84 36       	cpi	r24, 0x64	; 100
     ff4:	11 f0       	breq	.+4      	; 0xffa <vfprintf+0x1f0>
     ff6:	89 36       	cpi	r24, 0x69	; 105
     ff8:	39 f5       	brne	.+78     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     ffa:	f8 01       	movw	r30, r16
     ffc:	37 fe       	sbrs	r3, 7
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	0c 5f       	subi	r16, 0xFC	; 252
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	08 c0       	rjmp	.+16     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	07 2e       	mov	r0, r23
    1014:	00 0c       	add	r0, r0
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 5f       	subi	r16, 0xFE	; 254
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	f3 2d       	mov	r31, r3
    1020:	ff 76       	andi	r31, 0x6F	; 111
    1022:	3f 2e       	mov	r3, r31
    1024:	97 ff       	sbrs	r25, 7
    1026:	09 c0       	rjmp	.+18     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1028:	90 95       	com	r25
    102a:	80 95       	com	r24
    102c:	70 95       	com	r23
    102e:	61 95       	neg	r22
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	f0 68       	ori	r31, 0x80	; 128
    1038:	3f 2e       	mov	r3, r31
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	a3 01       	movw	r20, r6
    1040:	43 d1       	rcall	.+646    	; 0x12c8 <__ultoa_invert>
    1042:	88 2e       	mov	r8, r24
    1044:	86 18       	sub	r8, r6
    1046:	44 c0       	rjmp	.+136    	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1048:	85 37       	cpi	r24, 0x75	; 117
    104a:	31 f4       	brne	.+12     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    104c:	23 2d       	mov	r18, r3
    104e:	2f 7e       	andi	r18, 0xEF	; 239
    1050:	b2 2e       	mov	r11, r18
    1052:	2a e0       	ldi	r18, 0x0A	; 10
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	25 c0       	rjmp	.+74     	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
    1058:	93 2d       	mov	r25, r3
    105a:	99 7f       	andi	r25, 0xF9	; 249
    105c:	b9 2e       	mov	r11, r25
    105e:	8f 36       	cpi	r24, 0x6F	; 111
    1060:	c1 f0       	breq	.+48     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    1062:	18 f4       	brcc	.+6      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1064:	88 35       	cpi	r24, 0x58	; 88
    1066:	79 f0       	breq	.+30     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    1068:	ae c0       	rjmp	.+348    	; 0x11c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    106a:	80 37       	cpi	r24, 0x70	; 112
    106c:	19 f0       	breq	.+6      	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    106e:	88 37       	cpi	r24, 0x78	; 120
    1070:	21 f0       	breq	.+8      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1072:	a9 c0       	rjmp	.+338    	; 0x11c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    1074:	e9 2f       	mov	r30, r25
    1076:	e0 61       	ori	r30, 0x10	; 16
    1078:	be 2e       	mov	r11, r30
    107a:	b4 fe       	sbrs	r11, 4
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    107e:	fb 2d       	mov	r31, r11
    1080:	f4 60       	ori	r31, 0x04	; 4
    1082:	bf 2e       	mov	r11, r31
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1086:	34 fe       	sbrs	r3, 4
    1088:	0a c0       	rjmp	.+20     	; 0x109e <__EEPROM_REGION_LENGTH__+0x9e>
    108a:	29 2f       	mov	r18, r25
    108c:	26 60       	ori	r18, 0x06	; 6
    108e:	b2 2e       	mov	r11, r18
    1090:	06 c0       	rjmp	.+12     	; 0x109e <__EEPROM_REGION_LENGTH__+0x9e>
    1092:	28 e0       	ldi	r18, 0x08	; 8
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
    1098:	20 e1       	ldi	r18, 0x10	; 16
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
    109e:	20 e1       	ldi	r18, 0x10	; 16
    10a0:	32 e0       	ldi	r19, 0x02	; 2
    10a2:	f8 01       	movw	r30, r16
    10a4:	b7 fe       	sbrs	r11, 7
    10a6:	07 c0       	rjmp	.+14     	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	0c 5f       	subi	r16, 0xFC	; 252
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <__EEPROM_REGION_LENGTH__+0xc2>
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 5f       	subi	r16, 0xFE	; 254
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	a3 01       	movw	r20, r6
    10c4:	01 d1       	rcall	.+514    	; 0x12c8 <__ultoa_invert>
    10c6:	88 2e       	mov	r8, r24
    10c8:	86 18       	sub	r8, r6
    10ca:	fb 2d       	mov	r31, r11
    10cc:	ff 77       	andi	r31, 0x7F	; 127
    10ce:	3f 2e       	mov	r3, r31
    10d0:	36 fe       	sbrs	r3, 6
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    10d4:	23 2d       	mov	r18, r3
    10d6:	2e 7f       	andi	r18, 0xFE	; 254
    10d8:	a2 2e       	mov	r10, r18
    10da:	89 14       	cp	r8, r9
    10dc:	58 f4       	brcc	.+22     	; 0x10f4 <__EEPROM_REGION_LENGTH__+0xf4>
    10de:	34 fe       	sbrs	r3, 4
    10e0:	0b c0       	rjmp	.+22     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10e2:	32 fc       	sbrc	r3, 2
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10e6:	83 2d       	mov	r24, r3
    10e8:	8e 7e       	andi	r24, 0xEE	; 238
    10ea:	a8 2e       	mov	r10, r24
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
    10ee:	b8 2c       	mov	r11, r8
    10f0:	a3 2c       	mov	r10, r3
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
    10f4:	b8 2c       	mov	r11, r8
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
    10f8:	b9 2c       	mov	r11, r9
    10fa:	a4 fe       	sbrs	r10, 4
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <__EEPROM_REGION_LENGTH__+0x11c>
    10fe:	fe 01       	movw	r30, r28
    1100:	e8 0d       	add	r30, r8
    1102:	f1 1d       	adc	r31, r1
    1104:	80 81       	ld	r24, Z
    1106:	80 33       	cpi	r24, 0x30	; 48
    1108:	21 f4       	brne	.+8      	; 0x1112 <__EEPROM_REGION_LENGTH__+0x112>
    110a:	9a 2d       	mov	r25, r10
    110c:	99 7e       	andi	r25, 0xE9	; 233
    110e:	a9 2e       	mov	r10, r25
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <__EEPROM_REGION_LENGTH__+0x124>
    1112:	a2 fe       	sbrs	r10, 2
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <__EEPROM_REGION_LENGTH__+0x122>
    1116:	b3 94       	inc	r11
    1118:	b3 94       	inc	r11
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__EEPROM_REGION_LENGTH__+0x124>
    111c:	8a 2d       	mov	r24, r10
    111e:	86 78       	andi	r24, 0x86	; 134
    1120:	09 f0       	breq	.+2      	; 0x1124 <__EEPROM_REGION_LENGTH__+0x124>
    1122:	b3 94       	inc	r11
    1124:	a3 fc       	sbrc	r10, 3
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <__EEPROM_REGION_LENGTH__+0x148>
    1128:	a0 fe       	sbrs	r10, 0
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <__EEPROM_REGION_LENGTH__+0x138>
    112c:	b2 14       	cp	r11, r2
    112e:	80 f4       	brcc	.+32     	; 0x1150 <__EEPROM_REGION_LENGTH__+0x150>
    1130:	28 0c       	add	r2, r8
    1132:	92 2c       	mov	r9, r2
    1134:	9b 18       	sub	r9, r11
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <__EEPROM_REGION_LENGTH__+0x152>
    1138:	b2 14       	cp	r11, r2
    113a:	58 f4       	brcc	.+22     	; 0x1152 <__EEPROM_REGION_LENGTH__+0x152>
    113c:	b6 01       	movw	r22, r12
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	86 d0       	rcall	.+268    	; 0x1250 <fputc>
    1144:	b3 94       	inc	r11
    1146:	f8 cf       	rjmp	.-16     	; 0x1138 <__EEPROM_REGION_LENGTH__+0x138>
    1148:	b2 14       	cp	r11, r2
    114a:	18 f4       	brcc	.+6      	; 0x1152 <__EEPROM_REGION_LENGTH__+0x152>
    114c:	2b 18       	sub	r2, r11
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
    1150:	98 2c       	mov	r9, r8
    1152:	21 2c       	mov	r2, r1
    1154:	a4 fe       	sbrs	r10, 4
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <__EEPROM_REGION_LENGTH__+0x176>
    1158:	b6 01       	movw	r22, r12
    115a:	80 e3       	ldi	r24, 0x30	; 48
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	78 d0       	rcall	.+240    	; 0x1250 <fputc>
    1160:	a2 fe       	sbrs	r10, 2
    1162:	16 c0       	rjmp	.+44     	; 0x1190 <__EEPROM_REGION_LENGTH__+0x190>
    1164:	a1 fc       	sbrc	r10, 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <__EEPROM_REGION_LENGTH__+0x16e>
    1168:	88 e7       	ldi	r24, 0x78	; 120
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <__EEPROM_REGION_LENGTH__+0x172>
    116e:	88 e5       	ldi	r24, 0x58	; 88
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	b6 01       	movw	r22, r12
    1174:	0c c0       	rjmp	.+24     	; 0x118e <__EEPROM_REGION_LENGTH__+0x18e>
    1176:	8a 2d       	mov	r24, r10
    1178:	86 78       	andi	r24, 0x86	; 134
    117a:	51 f0       	breq	.+20     	; 0x1190 <__EEPROM_REGION_LENGTH__+0x190>
    117c:	a1 fe       	sbrs	r10, 1
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <__EEPROM_REGION_LENGTH__+0x184>
    1180:	8b e2       	ldi	r24, 0x2B	; 43
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <__EEPROM_REGION_LENGTH__+0x186>
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	a7 fc       	sbrc	r10, 7
    1188:	8d e2       	ldi	r24, 0x2D	; 45
    118a:	b6 01       	movw	r22, r12
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	60 d0       	rcall	.+192    	; 0x1250 <fputc>
    1190:	89 14       	cp	r8, r9
    1192:	30 f4       	brcc	.+12     	; 0x11a0 <__EEPROM_REGION_LENGTH__+0x1a0>
    1194:	b6 01       	movw	r22, r12
    1196:	80 e3       	ldi	r24, 0x30	; 48
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	5a d0       	rcall	.+180    	; 0x1250 <fputc>
    119c:	9a 94       	dec	r9
    119e:	f8 cf       	rjmp	.-16     	; 0x1190 <__EEPROM_REGION_LENGTH__+0x190>
    11a0:	8a 94       	dec	r8
    11a2:	f3 01       	movw	r30, r6
    11a4:	e8 0d       	add	r30, r8
    11a6:	f1 1d       	adc	r31, r1
    11a8:	80 81       	ld	r24, Z
    11aa:	b6 01       	movw	r22, r12
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	50 d0       	rcall	.+160    	; 0x1250 <fputc>
    11b0:	81 10       	cpse	r8, r1
    11b2:	f6 cf       	rjmp	.-20     	; 0x11a0 <__EEPROM_REGION_LENGTH__+0x1a0>
    11b4:	22 20       	and	r2, r2
    11b6:	09 f4       	brne	.+2      	; 0x11ba <__EEPROM_REGION_LENGTH__+0x1ba>
    11b8:	4e ce       	rjmp	.-868    	; 0xe56 <vfprintf+0x4c>
    11ba:	b6 01       	movw	r22, r12
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	47 d0       	rcall	.+142    	; 0x1250 <fputc>
    11c2:	2a 94       	dec	r2
    11c4:	f7 cf       	rjmp	.-18     	; 0x11b4 <__EEPROM_REGION_LENGTH__+0x1b4>
    11c6:	f6 01       	movw	r30, r12
    11c8:	86 81       	ldd	r24, Z+6	; 0x06
    11ca:	97 81       	ldd	r25, Z+7	; 0x07
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <__EEPROM_REGION_LENGTH__+0x1d2>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	2b 96       	adiw	r28, 0x0b	; 11
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	5f 90       	pop	r5
    11fc:	4f 90       	pop	r4
    11fe:	3f 90       	pop	r3
    1200:	2f 90       	pop	r2
    1202:	08 95       	ret

00001204 <strnlen_P>:
    1204:	fc 01       	movw	r30, r24
    1206:	05 90       	lpm	r0, Z+
    1208:	61 50       	subi	r22, 0x01	; 1
    120a:	70 40       	sbci	r23, 0x00	; 0
    120c:	01 10       	cpse	r0, r1
    120e:	d8 f7       	brcc	.-10     	; 0x1206 <strnlen_P+0x2>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	8e 0f       	add	r24, r30
    1216:	9f 1f       	adc	r25, r31
    1218:	08 95       	ret

0000121a <strnlen>:
    121a:	fc 01       	movw	r30, r24
    121c:	61 50       	subi	r22, 0x01	; 1
    121e:	70 40       	sbci	r23, 0x00	; 0
    1220:	01 90       	ld	r0, Z+
    1222:	01 10       	cpse	r0, r1
    1224:	d8 f7       	brcc	.-10     	; 0x121c <strnlen+0x2>
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	8e 0f       	add	r24, r30
    122c:	9f 1f       	adc	r25, r31
    122e:	08 95       	ret

00001230 <strrev>:
    1230:	dc 01       	movw	r26, r24
    1232:	fc 01       	movw	r30, r24
    1234:	67 2f       	mov	r22, r23
    1236:	71 91       	ld	r23, Z+
    1238:	77 23       	and	r23, r23
    123a:	e1 f7       	brne	.-8      	; 0x1234 <strrev+0x4>
    123c:	32 97       	sbiw	r30, 0x02	; 2
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <strrev+0x18>
    1240:	7c 91       	ld	r23, X
    1242:	6d 93       	st	X+, r22
    1244:	70 83       	st	Z, r23
    1246:	62 91       	ld	r22, -Z
    1248:	ae 17       	cp	r26, r30
    124a:	bf 07       	cpc	r27, r31
    124c:	c8 f3       	brcs	.-14     	; 0x1240 <strrev+0x10>
    124e:	08 95       	ret

00001250 <fputc>:
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	fb 01       	movw	r30, r22
    125a:	23 81       	ldd	r18, Z+3	; 0x03
    125c:	21 fd       	sbrc	r18, 1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <fputc+0x16>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	2c c0       	rjmp	.+88     	; 0x12be <fputc+0x6e>
    1266:	22 ff       	sbrs	r18, 2
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <fputc+0x46>
    126a:	46 81       	ldd	r20, Z+6	; 0x06
    126c:	57 81       	ldd	r21, Z+7	; 0x07
    126e:	24 81       	ldd	r18, Z+4	; 0x04
    1270:	35 81       	ldd	r19, Z+5	; 0x05
    1272:	42 17       	cp	r20, r18
    1274:	53 07       	cpc	r21, r19
    1276:	44 f4       	brge	.+16     	; 0x1288 <fputc+0x38>
    1278:	a0 81       	ld	r26, Z
    127a:	b1 81       	ldd	r27, Z+1	; 0x01
    127c:	9d 01       	movw	r18, r26
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	31 83       	std	Z+1, r19	; 0x01
    1284:	20 83       	st	Z, r18
    1286:	8c 93       	st	X, r24
    1288:	26 81       	ldd	r18, Z+6	; 0x06
    128a:	37 81       	ldd	r19, Z+7	; 0x07
    128c:	2f 5f       	subi	r18, 0xFF	; 255
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	37 83       	std	Z+7, r19	; 0x07
    1292:	26 83       	std	Z+6, r18	; 0x06
    1294:	14 c0       	rjmp	.+40     	; 0x12be <fputc+0x6e>
    1296:	8b 01       	movw	r16, r22
    1298:	ec 01       	movw	r28, r24
    129a:	fb 01       	movw	r30, r22
    129c:	00 84       	ldd	r0, Z+8	; 0x08
    129e:	f1 85       	ldd	r31, Z+9	; 0x09
    12a0:	e0 2d       	mov	r30, r0
    12a2:	19 95       	eicall
    12a4:	89 2b       	or	r24, r25
    12a6:	e1 f6       	brne	.-72     	; 0x1260 <fputc+0x10>
    12a8:	d8 01       	movw	r26, r16
    12aa:	16 96       	adiw	r26, 0x06	; 6
    12ac:	8d 91       	ld	r24, X+
    12ae:	9c 91       	ld	r25, X
    12b0:	17 97       	sbiw	r26, 0x07	; 7
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	17 96       	adiw	r26, 0x07	; 7
    12b6:	9c 93       	st	X, r25
    12b8:	8e 93       	st	-X, r24
    12ba:	16 97       	sbiw	r26, 0x06	; 6
    12bc:	ce 01       	movw	r24, r28
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <__ultoa_invert>:
    12c8:	fa 01       	movw	r30, r20
    12ca:	aa 27       	eor	r26, r26
    12cc:	28 30       	cpi	r18, 0x08	; 8
    12ce:	51 f1       	breq	.+84     	; 0x1324 <__ultoa_invert+0x5c>
    12d0:	20 31       	cpi	r18, 0x10	; 16
    12d2:	81 f1       	breq	.+96     	; 0x1334 <__ultoa_invert+0x6c>
    12d4:	e8 94       	clt
    12d6:	6f 93       	push	r22
    12d8:	6e 7f       	andi	r22, 0xFE	; 254
    12da:	6e 5f       	subi	r22, 0xFE	; 254
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	af 4f       	sbci	r26, 0xFF	; 255
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	3e d0       	rcall	.+124    	; 0x1364 <__ultoa_invert+0x9c>
    12e8:	b4 e0       	ldi	r27, 0x04	; 4
    12ea:	3c d0       	rcall	.+120    	; 0x1364 <__ultoa_invert+0x9c>
    12ec:	67 0f       	add	r22, r23
    12ee:	78 1f       	adc	r23, r24
    12f0:	89 1f       	adc	r24, r25
    12f2:	9a 1f       	adc	r25, r26
    12f4:	a1 1d       	adc	r26, r1
    12f6:	68 0f       	add	r22, r24
    12f8:	79 1f       	adc	r23, r25
    12fa:	8a 1f       	adc	r24, r26
    12fc:	91 1d       	adc	r25, r1
    12fe:	a1 1d       	adc	r26, r1
    1300:	6a 0f       	add	r22, r26
    1302:	71 1d       	adc	r23, r1
    1304:	81 1d       	adc	r24, r1
    1306:	91 1d       	adc	r25, r1
    1308:	a1 1d       	adc	r26, r1
    130a:	20 d0       	rcall	.+64     	; 0x134c <__ultoa_invert+0x84>
    130c:	09 f4       	brne	.+2      	; 0x1310 <__ultoa_invert+0x48>
    130e:	68 94       	set
    1310:	3f 91       	pop	r19
    1312:	2a e0       	ldi	r18, 0x0A	; 10
    1314:	26 9f       	mul	r18, r22
    1316:	11 24       	eor	r1, r1
    1318:	30 19       	sub	r19, r0
    131a:	30 5d       	subi	r19, 0xD0	; 208
    131c:	31 93       	st	Z+, r19
    131e:	de f6       	brtc	.-74     	; 0x12d6 <__ultoa_invert+0xe>
    1320:	cf 01       	movw	r24, r30
    1322:	08 95       	ret
    1324:	46 2f       	mov	r20, r22
    1326:	47 70       	andi	r20, 0x07	; 7
    1328:	40 5d       	subi	r20, 0xD0	; 208
    132a:	41 93       	st	Z+, r20
    132c:	b3 e0       	ldi	r27, 0x03	; 3
    132e:	0f d0       	rcall	.+30     	; 0x134e <__ultoa_invert+0x86>
    1330:	c9 f7       	brne	.-14     	; 0x1324 <__ultoa_invert+0x5c>
    1332:	f6 cf       	rjmp	.-20     	; 0x1320 <__ultoa_invert+0x58>
    1334:	46 2f       	mov	r20, r22
    1336:	4f 70       	andi	r20, 0x0F	; 15
    1338:	40 5d       	subi	r20, 0xD0	; 208
    133a:	4a 33       	cpi	r20, 0x3A	; 58
    133c:	18 f0       	brcs	.+6      	; 0x1344 <__ultoa_invert+0x7c>
    133e:	49 5d       	subi	r20, 0xD9	; 217
    1340:	31 fd       	sbrc	r19, 1
    1342:	40 52       	subi	r20, 0x20	; 32
    1344:	41 93       	st	Z+, r20
    1346:	02 d0       	rcall	.+4      	; 0x134c <__ultoa_invert+0x84>
    1348:	a9 f7       	brne	.-22     	; 0x1334 <__ultoa_invert+0x6c>
    134a:	ea cf       	rjmp	.-44     	; 0x1320 <__ultoa_invert+0x58>
    134c:	b4 e0       	ldi	r27, 0x04	; 4
    134e:	a6 95       	lsr	r26
    1350:	97 95       	ror	r25
    1352:	87 95       	ror	r24
    1354:	77 95       	ror	r23
    1356:	67 95       	ror	r22
    1358:	ba 95       	dec	r27
    135a:	c9 f7       	brne	.-14     	; 0x134e <__ultoa_invert+0x86>
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 05       	cpc	r22, r1
    1360:	71 05       	cpc	r23, r1
    1362:	08 95       	ret
    1364:	9b 01       	movw	r18, r22
    1366:	ac 01       	movw	r20, r24
    1368:	0a 2e       	mov	r0, r26
    136a:	06 94       	lsr	r0
    136c:	57 95       	ror	r21
    136e:	47 95       	ror	r20
    1370:	37 95       	ror	r19
    1372:	27 95       	ror	r18
    1374:	ba 95       	dec	r27
    1376:	c9 f7       	brne	.-14     	; 0x136a <__ultoa_invert+0xa2>
    1378:	62 0f       	add	r22, r18
    137a:	73 1f       	adc	r23, r19
    137c:	84 1f       	adc	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	a0 1d       	adc	r26, r0
    1382:	08 95       	ret

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
