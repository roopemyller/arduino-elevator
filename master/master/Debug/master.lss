
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800200  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008003a6  008003a6  000012b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000266b  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000121d  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a2  00000000  00000000  00004d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00005dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000855  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011eb  00000000  00000000  000068cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
       6:	00 00       	nop
       8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
       a:	00 00       	nop
       c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
       e:	00 00       	nop
      10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
      12:	00 00       	nop
      14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
      16:	00 00       	nop
      18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
      22:	00 00       	nop
      24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
      26:	00 00       	nop
      28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
      32:	00 00       	nop
      34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
      36:	00 00       	nop
      38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
      42:	00 00       	nop
      44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
      46:	00 00       	nop
      48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
      52:	00 00       	nop
      54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
      56:	00 00       	nop
      58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
      62:	00 00       	nop
      64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
      66:	00 00       	nop
      68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
      72:	00 00       	nop
      74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
      76:	00 00       	nop
      78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
      82:	00 00       	nop
      84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
      86:	00 00       	nop
      88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
      92:	00 00       	nop
      94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
      96:	00 00       	nop
      98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
      de:	00 00       	nop
      e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7f 01       	movw	r14, r30
      e6:	87 01       	movw	r16, r14
      e8:	87 01       	movw	r16, r14
      ea:	87 01       	movw	r16, r14
      ec:	81 01       	movw	r16, r2
      ee:	87 01       	movw	r16, r14
      f0:	83 01       	movw	r16, r6
      f2:	85 01       	movw	r16, r10
      f4:	87 01       	movw	r16, r14
      f6:	87 01       	movw	r16, r14
      f8:	87 01       	movw	r16, r14
      fa:	87 01       	movw	r16, r14
      fc:	87 01       	movw	r16, r14
      fe:	87 01       	movw	r16, r14
     100:	87 01       	movw	r16, r14
     102:	87 01       	movw	r16, r14
     104:	87 01       	movw	r16, r14
     106:	87 01       	movw	r16, r14
     108:	87 01       	movw	r16, r14
     10a:	87 01       	movw	r16, r14
     10c:	87 01       	movw	r16, r14
     10e:	87 01       	movw	r16, r14
     110:	87 01       	movw	r16, r14
     112:	87 01       	movw	r16, r14
     114:	87 01       	movw	r16, r14
     116:	87 01       	movw	r16, r14
     118:	87 01       	movw	r16, r14
     11a:	87 01       	movw	r16, r14
     11c:	87 01       	movw	r16, r14
     11e:	87 01       	movw	r16, r14
     120:	87 01       	movw	r16, r14
     122:	87 01       	movw	r16, r14
     124:	87 01       	movw	r16, r14
     126:	87 01       	movw	r16, r14
     128:	87 01       	movw	r16, r14
     12a:	87 01       	movw	r16, r14
     12c:	87 01       	movw	r16, r14
     12e:	87 01       	movw	r16, r14
     130:	87 01       	movw	r16, r14
     132:	87 01       	movw	r16, r14
     134:	87 01       	movw	r16, r14
     136:	87 01       	movw	r16, r14
     138:	87 01       	movw	r16, r14
     13a:	87 01       	movw	r16, r14
     13c:	87 01       	movw	r16, r14
     13e:	87 01       	movw	r16, r14
     140:	87 01       	movw	r16, r14
     142:	87 01       	movw	r16, r14
     144:	87 01       	movw	r16, r14
     146:	87 01       	movw	r16, r14
     148:	87 01       	movw	r16, r14
     14a:	87 01       	movw	r16, r14
     14c:	87 01       	movw	r16, r14
     14e:	87 01       	movw	r16, r14
     150:	87 01       	movw	r16, r14
     152:	87 01       	movw	r16, r14
     154:	87 01       	movw	r16, r14
     156:	87 01       	movw	r16, r14
     158:	87 01       	movw	r16, r14
     15a:	87 01       	movw	r16, r14
     15c:	87 01       	movw	r16, r14
     15e:	87 01       	movw	r16, r14
     160:	87 01       	movw	r16, r14
     162:	87 01       	movw	r16, r14
     164:	77 01       	movw	r14, r14
     166:	87 01       	movw	r16, r14
     168:	87 01       	movw	r16, r14
     16a:	87 01       	movw	r16, r14
     16c:	79 01       	movw	r14, r18
     16e:	87 01       	movw	r16, r14
     170:	7b 01       	movw	r14, r22
     172:	7d 01       	movw	r14, r26
     174:	87 01       	movw	r16, r14
     176:	87 01       	movw	r16, r14
     178:	87 01       	movw	r16, r14
     17a:	87 01       	movw	r16, r14
     17c:	87 01       	movw	r16, r14
     17e:	87 01       	movw	r16, r14
     180:	87 01       	movw	r16, r14
     182:	87 01       	movw	r16, r14
     184:	87 01       	movw	r16, r14
     186:	87 01       	movw	r16, r14
     188:	87 01       	movw	r16, r14
     18a:	87 01       	movw	r16, r14
     18c:	87 01       	movw	r16, r14
     18e:	87 01       	movw	r16, r14
     190:	87 01       	movw	r16, r14
     192:	87 01       	movw	r16, r14
     194:	87 01       	movw	r16, r14
     196:	87 01       	movw	r16, r14
     198:	87 01       	movw	r16, r14
     19a:	87 01       	movw	r16, r14
     19c:	87 01       	movw	r16, r14
     19e:	87 01       	movw	r16, r14
     1a0:	87 01       	movw	r16, r14
     1a2:	87 01       	movw	r16, r14
     1a4:	6f 01       	movw	r12, r30
     1a6:	87 01       	movw	r16, r14
     1a8:	87 01       	movw	r16, r14
     1aa:	87 01       	movw	r16, r14
     1ac:	71 01       	movw	r14, r2
     1ae:	87 01       	movw	r16, r14
     1b0:	73 01       	movw	r14, r6
     1b2:	75 01       	movw	r14, r10
     1b4:	87 01       	movw	r16, r14
     1b6:	87 01       	movw	r16, r14
     1b8:	87 01       	movw	r16, r14
     1ba:	87 01       	movw	r16, r14
     1bc:	87 01       	movw	r16, r14
     1be:	87 01       	movw	r16, r14
     1c0:	87 01       	movw	r16, r14
     1c2:	87 01       	movw	r16, r14
     1c4:	69 01       	movw	r12, r18
     1c6:	87 01       	movw	r16, r14
     1c8:	87 01       	movw	r16, r14
     1ca:	87 01       	movw	r16, r14
     1cc:	89 01       	movw	r16, r18
     1ce:	87 01       	movw	r16, r14
     1d0:	6b 01       	movw	r12, r22
     1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	13 e0       	ldi	r17, 0x03	; 3
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	ee e7       	ldi	r30, 0x7E	; 126
     1ec:	f0 e1       	ldi	r31, 0x10	; 16
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a6 3a       	cpi	r26, 0xA6	; 166
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	23 e0       	ldi	r18, 0x03	; 3
     200:	a6 ea       	ldi	r26, 0xA6	; 166
     202:	b3 e0       	ldi	r27, 0x03	; 3
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a9 3a       	cpi	r26, 0xA9	; 169
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	d7 d2       	rcall	.+1454   	; 0x7be <main>
     210:	34 c7       	rjmp	.+3688   	; 0x107a <_exit>

00000212 <__bad_interrupt>:
     212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
     216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
     21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	e9 ef       	ldi	r30, 0xF9	; 249
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
     226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
     228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
     22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
     230:	8f 30       	cpi	r24, 0x0F	; 15
     232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
     234:	99 0f       	add	r25, r25
     236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     238:	2f 5f       	subi	r18, 0xFF	; 255
     23a:	24 30       	cpi	r18, 0x04	; 4
     23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
     23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
     240:	89 0f       	add	r24, r25
     242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
     244:	80 ef       	ldi	r24, 0xF0	; 240
     246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     24c:	8f e0       	ldi	r24, 0x0F	; 15
     24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
     252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
     258:	8f 30       	cpi	r24, 0x0F	; 15
     25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
     25c:	89 ef       	ldi	r24, 0xF9	; 249
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
     264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
     266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     268:	8f e0       	ldi	r24, 0x0F	; 15
     26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
     26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
     274:	8f 30       	cpi	r24, 0x0F	; 15
     276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
     278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
     27a:	8f e0       	ldi	r24, 0x0F	; 15
     27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
     280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
     286:	8f 30       	cpi	r24, 0x0F	; 15
     288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
     28a:	89 ef       	ldi	r24, 0xF9	; 249
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
     292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
     294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
     296:	8f e0       	ldi	r24, 0x0F	; 15
     298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
     29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
     2a2:	8f 30       	cpi	r24, 0x0F	; 15
     2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
     2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
     2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
     2aa:	89 ef       	ldi	r24, 0xF9	; 249
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
     2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
     2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
     2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	e7 57       	subi	r30, 0x77	; 119
     2c0:	f1 09       	sbc	r31, r1
     2c2:	e8 37       	cpi	r30, 0x78	; 120
     2c4:	f1 05       	cpc	r31, r1
     2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
     2c8:	88 27       	eor	r24, r24
     2ca:	ee 58       	subi	r30, 0x8E	; 142
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	8f 4f       	sbci	r24, 0xFF	; 255
     2d0:	be c3       	rjmp	.+1916   	; 0xa4e <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
     2d2:	8a e2       	ldi	r24, 0x2A	; 42
     2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
     2d6:	84 e3       	ldi	r24, 0x34	; 52
     2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
     2da:	81 e3       	ldi	r24, 0x31	; 49
     2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
     2de:	80 e3       	ldi	r24, 0x30	; 48
     2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
     2e2:	88 e3       	ldi	r24, 0x38	; 56
     2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
     2e6:	85 e3       	ldi	r24, 0x35	; 53
     2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
     2ea:	82 e3       	ldi	r24, 0x32	; 50
     2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
     2ee:	83 e2       	ldi	r24, 0x23	; 35
     2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
     2f2:	89 e3       	ldi	r24, 0x39	; 57
     2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
     2f6:	86 e3       	ldi	r24, 0x36	; 54
     2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
     2fa:	83 e3       	ldi	r24, 0x33	; 51
     2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
     2fe:	84 e4       	ldi	r24, 0x44	; 68
     300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
     302:	83 e4       	ldi	r24, 0x43	; 67
     304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
     306:	82 e4       	ldi	r24, 0x42	; 66
     308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
     30a:	81 e4       	ldi	r24, 0x41	; 65
     30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
     30e:	8a e7       	ldi	r24, 0x7A	; 122
     310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
     312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
     314:	08 95       	ret

00000316 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     316:	85 b1       	in	r24, 0x05	; 5
     318:	80 62       	ori	r24, 0x20	; 32
     31a:	85 b9       	out	0x05, r24	; 5
     31c:	00 00       	nop
     31e:	85 b1       	in	r24, 0x05	; 5
     320:	8f 7d       	andi	r24, 0xDF	; 223
     322:	85 b9       	out	0x05, r24	; 5
     324:	08 95       	ret

00000326 <lcd_write>:
     326:	cf 93       	push	r28
     328:	c8 2f       	mov	r28, r24
     32a:	66 23       	and	r22, r22
     32c:	31 f0       	breq	.+12     	; 0x33a <lcd_write+0x14>
     32e:	e2 e0       	ldi	r30, 0x02	; 2
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	80 81       	ld	r24, Z
     334:	80 64       	ori	r24, 0x40	; 64
     336:	80 83       	st	Z, r24
     338:	05 c0       	rjmp	.+10     	; 0x344 <lcd_write+0x1e>
     33a:	e2 e0       	ldi	r30, 0x02	; 2
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	80 81       	ld	r24, Z
     340:	8f 7b       	andi	r24, 0xBF	; 191
     342:	80 83       	st	Z, r24
     344:	85 b1       	in	r24, 0x05	; 5
     346:	8f 7e       	andi	r24, 0xEF	; 239
     348:	85 b9       	out	0x05, r24	; 5
     34a:	8d b1       	in	r24, 0x0d	; 13
     34c:	80 62       	ori	r24, 0x20	; 32
     34e:	8d b9       	out	0x0d, r24	; 13
     350:	83 b3       	in	r24, 0x13	; 19
     352:	80 62       	ori	r24, 0x20	; 32
     354:	83 bb       	out	0x13, r24	; 19
     356:	8d b1       	in	r24, 0x0d	; 13
     358:	88 60       	ori	r24, 0x08	; 8
     35a:	8d b9       	out	0x0d, r24	; 13
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	80 83       	st	Z, r24
     366:	e2 e0       	ldi	r30, 0x02	; 2
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	80 81       	ld	r24, Z
     36c:	87 7f       	andi	r24, 0xF7	; 247
     36e:	80 83       	st	Z, r24
     370:	8e b1       	in	r24, 0x0e	; 14
     372:	87 7f       	andi	r24, 0xF7	; 247
     374:	8e b9       	out	0x0e, r24	; 14
     376:	84 b3       	in	r24, 0x14	; 20
     378:	8f 7d       	andi	r24, 0xDF	; 223
     37a:	84 bb       	out	0x14, r24	; 20
     37c:	8e b1       	in	r24, 0x0e	; 14
     37e:	8f 7d       	andi	r24, 0xDF	; 223
     380:	8e b9       	out	0x0e, r24	; 14
     382:	cc 23       	and	r28, r28
     384:	1c f4       	brge	.+6      	; 0x38c <lcd_write+0x66>
     386:	80 81       	ld	r24, Z
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	80 83       	st	Z, r24
     38c:	c6 ff       	sbrs	r28, 6
     38e:	03 c0       	rjmp	.+6      	; 0x396 <lcd_write+0x70>
     390:	8e b1       	in	r24, 0x0e	; 14
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8e b9       	out	0x0e, r24	; 14
     396:	c5 ff       	sbrs	r28, 5
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_write+0x7a>
     39a:	84 b3       	in	r24, 0x14	; 20
     39c:	80 62       	ori	r24, 0x20	; 32
     39e:	84 bb       	out	0x14, r24	; 20
     3a0:	c4 ff       	sbrs	r28, 4
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <lcd_write+0x84>
     3a4:	8e b1       	in	r24, 0x0e	; 14
     3a6:	80 62       	ori	r24, 0x20	; 32
     3a8:	8e b9       	out	0x0e, r24	; 14
     3aa:	b5 df       	rcall	.-150    	; 0x316 <toggle_e>
     3ac:	e2 e0       	ldi	r30, 0x02	; 2
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	80 81       	ld	r24, Z
     3b2:	87 7f       	andi	r24, 0xF7	; 247
     3b4:	80 83       	st	Z, r24
     3b6:	8e b1       	in	r24, 0x0e	; 14
     3b8:	87 7f       	andi	r24, 0xF7	; 247
     3ba:	8e b9       	out	0x0e, r24	; 14
     3bc:	84 b3       	in	r24, 0x14	; 20
     3be:	8f 7d       	andi	r24, 0xDF	; 223
     3c0:	84 bb       	out	0x14, r24	; 20
     3c2:	8e b1       	in	r24, 0x0e	; 14
     3c4:	8f 7d       	andi	r24, 0xDF	; 223
     3c6:	8e b9       	out	0x0e, r24	; 14
     3c8:	c3 ff       	sbrs	r28, 3
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <lcd_write+0xac>
     3cc:	80 81       	ld	r24, Z
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 83       	st	Z, r24
     3d2:	c2 ff       	sbrs	r28, 2
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <lcd_write+0xb6>
     3d6:	8e b1       	in	r24, 0x0e	; 14
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	8e b9       	out	0x0e, r24	; 14
     3dc:	c1 ff       	sbrs	r28, 1
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <lcd_write+0xc0>
     3e0:	84 b3       	in	r24, 0x14	; 20
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	84 bb       	out	0x14, r24	; 20
     3e6:	c0 ff       	sbrs	r28, 0
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_write+0xca>
     3ea:	8e b1       	in	r24, 0x0e	; 14
     3ec:	80 62       	ori	r24, 0x20	; 32
     3ee:	8e b9       	out	0x0e, r24	; 14
     3f0:	92 df       	rcall	.-220    	; 0x316 <toggle_e>
     3f2:	8e b1       	in	r24, 0x0e	; 14
     3f4:	80 62       	ori	r24, 0x20	; 32
     3f6:	8e b9       	out	0x0e, r24	; 14
     3f8:	84 b3       	in	r24, 0x14	; 20
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	84 bb       	out	0x14, r24	; 20
     3fe:	8e b1       	in	r24, 0x0e	; 14
     400:	88 60       	ori	r24, 0x08	; 8
     402:	8e b9       	out	0x0e, r24	; 14
     404:	e2 e0       	ldi	r30, 0x02	; 2
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	80 81       	ld	r24, Z
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	80 83       	st	Z, r24
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <lcd_read>:
     412:	88 23       	and	r24, r24
     414:	31 f0       	breq	.+12     	; 0x422 <lcd_read+0x10>
     416:	e2 e0       	ldi	r30, 0x02	; 2
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	80 81       	ld	r24, Z
     41c:	80 64       	ori	r24, 0x40	; 64
     41e:	80 83       	st	Z, r24
     420:	05 c0       	rjmp	.+10     	; 0x42c <lcd_read+0x1a>
     422:	e2 e0       	ldi	r30, 0x02	; 2
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	80 81       	ld	r24, Z
     428:	8f 7b       	andi	r24, 0xBF	; 191
     42a:	80 83       	st	Z, r24
     42c:	85 b1       	in	r24, 0x05	; 5
     42e:	80 61       	ori	r24, 0x10	; 16
     430:	85 b9       	out	0x05, r24	; 5
     432:	8d b1       	in	r24, 0x0d	; 13
     434:	8f 7d       	andi	r24, 0xDF	; 223
     436:	8d b9       	out	0x0d, r24	; 13
     438:	83 b3       	in	r24, 0x13	; 19
     43a:	8f 7d       	andi	r24, 0xDF	; 223
     43c:	83 bb       	out	0x13, r24	; 19
     43e:	8d b1       	in	r24, 0x0d	; 13
     440:	87 7f       	andi	r24, 0xF7	; 247
     442:	8d b9       	out	0x0d, r24	; 13
     444:	e1 e0       	ldi	r30, 0x01	; 1
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	80 81       	ld	r24, Z
     44a:	87 7f       	andi	r24, 0xF7	; 247
     44c:	80 83       	st	Z, r24
     44e:	85 b1       	in	r24, 0x05	; 5
     450:	80 62       	ori	r24, 0x20	; 32
     452:	85 b9       	out	0x05, r24	; 5
     454:	00 00       	nop
     456:	65 99       	sbic	0x0c, 5	; 12
     458:	02 c0       	rjmp	.+4      	; 0x45e <lcd_read+0x4c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	01 c0       	rjmp	.+2      	; 0x460 <lcd_read+0x4e>
     45e:	80 e1       	ldi	r24, 0x10	; 16
     460:	95 99       	sbic	0x12, 5	; 18
     462:	80 62       	ori	r24, 0x20	; 32
     464:	63 99       	sbic	0x0c, 3	; 12
     466:	80 64       	ori	r24, 0x40	; 64
     468:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     46c:	93 fd       	sbrc	r25, 3
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	95 b1       	in	r25, 0x05	; 5
     472:	9f 7d       	andi	r25, 0xDF	; 223
     474:	95 b9       	out	0x05, r25	; 5
     476:	00 00       	nop
     478:	95 b1       	in	r25, 0x05	; 5
     47a:	90 62       	ori	r25, 0x20	; 32
     47c:	95 b9       	out	0x05, r25	; 5
     47e:	00 00       	nop
     480:	65 99       	sbic	0x0c, 5	; 12
     482:	81 60       	ori	r24, 0x01	; 1
     484:	95 99       	sbic	0x12, 5	; 18
     486:	82 60       	ori	r24, 0x02	; 2
     488:	63 99       	sbic	0x0c, 3	; 12
     48a:	84 60       	ori	r24, 0x04	; 4
     48c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     490:	93 fd       	sbrc	r25, 3
     492:	88 60       	ori	r24, 0x08	; 8
     494:	95 b1       	in	r25, 0x05	; 5
     496:	9f 7d       	andi	r25, 0xDF	; 223
     498:	95 b9       	out	0x05, r25	; 5
     49a:	08 95       	ret

0000049c <lcd_waitbusy>:
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	b9 df       	rcall	.-142    	; 0x412 <lcd_read>
     4a0:	88 23       	and	r24, r24
     4a2:	e4 f3       	brlt	.-8      	; 0x49c <lcd_waitbusy>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <lcd_waitbusy+0xa>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_waitbusy+0xc>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	b3 cf       	rjmp	.-154    	; 0x412 <lcd_read>
     4ac:	08 95       	ret

000004ae <lcd_command>:
     4ae:	cf 93       	push	r28
     4b0:	c8 2f       	mov	r28, r24
     4b2:	f4 df       	rcall	.-24     	; 0x49c <lcd_waitbusy>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	8c 2f       	mov	r24, r28
     4b8:	36 df       	rcall	.-404    	; 0x326 <lcd_write>
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <lcd_clrscr>:
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	f6 cf       	rjmp	.-20     	; 0x4ae <lcd_command>
     4c2:	08 95       	ret

000004c4 <lcd_putc>:
     4c4:	cf 93       	push	r28
     4c6:	c8 2f       	mov	r28, r24
     4c8:	e9 df       	rcall	.-46     	; 0x49c <lcd_waitbusy>
     4ca:	ca 30       	cpi	r28, 0x0A	; 10
     4cc:	41 f4       	brne	.+16     	; 0x4de <lcd_putc+0x1a>
     4ce:	80 34       	cpi	r24, 0x40	; 64
     4d0:	10 f4       	brcc	.+4      	; 0x4d6 <lcd_putc+0x12>
     4d2:	80 e4       	ldi	r24, 0x40	; 64
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <lcd_putc+0x14>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	80 58       	subi	r24, 0x80	; 128
     4da:	e9 df       	rcall	.-46     	; 0x4ae <lcd_command>
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <lcd_putc+0x20>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	8c 2f       	mov	r24, r28
     4e2:	21 df       	rcall	.-446    	; 0x326 <lcd_write>
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <lcd_puts>:
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	fc 01       	movw	r30, r24
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <lcd_puts+0xc>
     4f0:	e9 df       	rcall	.-46     	; 0x4c4 <lcd_putc>
     4f2:	fe 01       	movw	r30, r28
     4f4:	ef 01       	movw	r28, r30
     4f6:	21 96       	adiw	r28, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	81 11       	cpse	r24, r1
     4fc:	f9 cf       	rjmp	.-14     	; 0x4f0 <lcd_puts+0x8>
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     504:	cf 93       	push	r28
     506:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     508:	e1 e0       	ldi	r30, 0x01	; 1
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	80 81       	ld	r24, Z
     50e:	80 64       	ori	r24, 0x40	; 64
     510:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     512:	84 b1       	in	r24, 0x04	; 4
     514:	80 61       	ori	r24, 0x10	; 16
     516:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     518:	84 b1       	in	r24, 0x04	; 4
     51a:	80 62       	ori	r24, 0x20	; 32
     51c:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     51e:	8d b1       	in	r24, 0x0d	; 13
     520:	80 62       	ori	r24, 0x20	; 32
     522:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     524:	83 b3       	in	r24, 0x13	; 19
     526:	80 62       	ori	r24, 0x20	; 32
     528:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     52a:	8d b1       	in	r24, 0x0d	; 13
     52c:	88 60       	ori	r24, 0x08	; 8
     52e:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     530:	80 81       	ld	r24, Z
     532:	88 60       	ori	r24, 0x08	; 8
     534:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     536:	8f e9       	ldi	r24, 0x9F	; 159
     538:	9f e0       	ldi	r25, 0x0F	; 15
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_init+0x36>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_init+0x3c>
     540:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     542:	84 b3       	in	r24, 0x14	; 20
     544:	80 62       	ori	r24, 0x20	; 32
     546:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     548:	8e b1       	in	r24, 0x0e	; 14
     54a:	80 62       	ori	r24, 0x20	; 32
     54c:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
     54e:	e3 de       	rcall	.-570    	; 0x316 <toggle_e>
     550:	81 ee       	ldi	r24, 0xE1	; 225
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <lcd_init+0x50>
     558:	00 c0       	rjmp	.+0      	; 0x55a <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     55a:	00 00       	nop
     55c:	dc de       	rcall	.-584    	; 0x316 <toggle_e>
     55e:	95 e1       	ldi	r25, 0x15	; 21
     560:	9a 95       	dec	r25
     562:	f1 f7       	brne	.-4      	; 0x560 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     564:	00 00       	nop
     566:	d7 de       	rcall	.-594    	; 0x316 <toggle_e>
     568:	85 e1       	ldi	r24, 0x15	; 21
     56a:	8a 95       	dec	r24
     56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_init+0x66>
     56e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     570:	8e b1       	in	r24, 0x0e	; 14
     572:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
     574:	8e b9       	out	0x0e, r24	; 14
     576:	cf de       	rcall	.-610    	; 0x316 <toggle_e>
     578:	95 e1       	ldi	r25, 0x15	; 21
     57a:	9a 95       	dec	r25
     57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     57e:	00 00       	nop
     580:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     582:	95 df       	rcall	.-214    	; 0x4ae <lcd_command>
     584:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
     586:	93 df       	rcall	.-218    	; 0x4ae <lcd_command>
     588:	9a df       	rcall	.-204    	; 0x4be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     58a:	86 e0       	ldi	r24, 0x06	; 6
     58c:	90 df       	rcall	.-224    	; 0x4ae <lcd_command>
     58e:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
     590:	8e df       	rcall	.-228    	; 0x4ae <lcd_command>
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <TWI_init>:

}/* lcd_init */
     596:	88 e4       	ldi	r24, 0x48	; 72
     598:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
// Initialize TWI as master
void TWI_init(void) {
	// Set SCL frequency: TWBR = ((F_CPU / SCL_freq) - 16) / (2 * prescaler)
	// For 100kHz with 16MHz CPU and prescaler=1: TWBR = ((16000000/100000)-16)/2 = 72
	TWBR = 72;  // Set bit rate register
	TWSR = 0;   // Prescaler = 1
     59c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     5a0:	08 95       	ret

000005a2 <TWI_stop>:
}

// Stop TWI transmission
void TWI_stop(void) {
	// Send STOP condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     5a2:	84 e9       	ldi	r24, 0x94	; 148
     5a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a8:	8f e9       	ldi	r24, 0x9F	; 159
     5aa:	9f e0       	ldi	r25, 0x0F	; 15
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <TWI_stop+0xa>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <TWI_stop+0x10>
     5b2:	00 00       	nop
     5b4:	08 95       	ret

000005b6 <UART_init>:
}

// Initialize UART for debugging
void UART_init(void) {
	// Set baud rate to 9600 for 16MHz: UBRR = (F_CPU/(16*BAUD))-1 = 103
	UBRR0H = 0;
     5b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = 103;
     5ba:	87 e6       	ldi	r24, 0x67	; 103
     5bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	// Enable transmitter
	UCSR0B = (1 << TXEN0);
     5c0:	88 e0       	ldi	r24, 0x08	; 8
     5c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	
	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
     5cc:	08 95       	ret

000005ce <UART_send_char>:
}

// Send a character through UART
void UART_send_char(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
     5ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     5d2:	95 ff       	sbrs	r25, 5
     5d4:	fc cf       	rjmp	.-8      	; 0x5ce <UART_send_char>
	
	// Put data into buffer
	UDR0 = data;
     5d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     5da:	08 95       	ret

000005dc <UART_send_string>:
}

// Send a string through UART
void UART_send_string(char* str) {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	// Send each character until null terminator
	while (*str) {
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <UART_send_string+0xc>
		UART_send_char(*str++);
     5e4:	21 96       	adiw	r28, 0x01	; 1
     5e6:	f3 df       	rcall	.-26     	; 0x5ce <UART_send_char>
}

// Send a string through UART
void UART_send_string(char* str) {
	// Send each character until null terminator
	while (*str) {
     5e8:	88 81       	ld	r24, Y
     5ea:	81 11       	cpse	r24, r1
     5ec:	fb cf       	rjmp	.-10     	; 0x5e4 <UART_send_string+0x8>
		UART_send_char(*str++);
	}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <setup>:
	lcd_puts("Choose the floor");
}

void setup(){
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
     5f4:	8c e0       	ldi	r24, 0x0C	; 12
     5f6:	86 df       	rcall	.-244    	; 0x504 <lcd_init>
	lcd_clrscr();
     5f8:	62 df       	rcall	.-316    	; 0x4be <lcd_clrscr>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
	lcd_puts("Choose the floor");
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	74 df       	rcall	.-280    	; 0x4e8 <lcd_puts>
     600:	2f ef       	ldi	r18, 0xFF	; 255
     602:	89 ef       	ldi	r24, 0xF9	; 249
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <setup+0x12>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <setup+0x1c>
     610:	00 00       	nop
	_delay_ms(20);
	// Initialize UART for debugging
	UART_init();
     612:	d1 df       	rcall	.-94     	; 0x5b6 <UART_init>
     614:	2f ef       	ldi	r18, 0xFF	; 255
     616:	89 ef       	ldi	r24, 0xF9	; 249
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	21 50       	subi	r18, 0x01	; 1
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	90 40       	sbci	r25, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <setup+0x26>
     622:	00 c0       	rjmp	.+0      	; 0x624 <setup+0x30>
     624:	00 00       	nop
	_delay_ms(20);
	UART_send_string("Elevator Master Program - NASA SERTIFIED PRODUCT\r\n");
     626:	81 e1       	ldi	r24, 0x11	; 17
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	d8 df       	rcall	.-80     	; 0x5dc <UART_send_string>
     62c:	b4 df       	rcall	.-152    	; 0x596 <TWI_init>
	
	// Initialize TWI as master
	TWI_init();
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	89 ef       	ldi	r24, 0xF9	; 249
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	21 50       	subi	r18, 0x01	; 1
     636:	80 40       	sbci	r24, 0x00	; 0
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <setup+0x40>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <setup+0x4a>
     63e:	00 00       	nop
     640:	01 de       	rcall	.-1022   	; 0x244 <KEYPAD_Init>
	_delay_ms(20);    
	// Init keypad
	KEYPAD_Init();
     642:	2f ef       	ldi	r18, 0xFF	; 255
     644:	89 ef       	ldi	r24, 0xF9	; 249
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	21 50       	subi	r18, 0x01	; 1
     64a:	80 40       	sbci	r24, 0x00	; 0
     64c:	90 40       	sbci	r25, 0x00	; 0
     64e:	e1 f7       	brne	.-8      	; 0x648 <setup+0x54>
     650:	00 c0       	rjmp	.+0      	; 0x652 <setup+0x5e>
     652:	00 00       	nop
     654:	08 95       	ret

00000656 <TWI_start>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
}

// Start TWI transmission
uint8_t TWI_start(void) {
	// Send START condition
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     65a:	84 ea       	ldi	r24, 0xA4	; 164
     65c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
     660:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     664:	88 23       	and	r24, r24
     666:	e4 f7       	brge	.-8      	; 0x660 <TWI_start+0xa>
	
	// Check if START was sent successfully (status code 0x08)
	if ((TWSR & 0xF8) != 0x08) {
     668:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     66c:	88 7f       	andi	r24, 0xF8	; 248
     66e:	88 30       	cpi	r24, 0x08	; 8
     670:	99 f0       	breq	.+38     	; 0x698 <TWI_start+0x42>
		UART_send_string("TWI start error: 0x");
     672:	84 e4       	ldi	r24, 0x44	; 68
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	b2 df       	rcall	.-156    	; 0x5dc <UART_send_string>
		UART_send_char('0' + ((TWSR & 0xF8) >> 4));
     678:	c9 eb       	ldi	r28, 0xB9	; 185
     67a:	d0 e0       	ldi	r29, 0x00	; 0
     67c:	88 81       	ld	r24, Y
     67e:	82 95       	swap	r24
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	80 5d       	subi	r24, 0xD0	; 208
     684:	a4 df       	rcall	.-184    	; 0x5ce <UART_send_char>
		UART_send_char('0' + (TWSR & 0x0F));
     686:	88 81       	ld	r24, Y
     688:	8f 70       	andi	r24, 0x0F	; 15
     68a:	80 5d       	subi	r24, 0xD0	; 208
     68c:	a0 df       	rcall	.-192    	; 0x5ce <UART_send_char>
		UART_send_string("\r\n");
     68e:	8e e1       	ldi	r24, 0x1E	; 30
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	a4 df       	rcall	.-184    	; 0x5dc <UART_send_string>
     694:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error: START not acknowledged
     696:	01 c0       	rjmp	.+2      	; 0x69a <TWI_start+0x44>
     698:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
     69a:	df 91       	pop	r29
}
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <TWI_write>:
     6a0:	cf 93       	push	r28

// Write a byte to the TWI bus
uint8_t TWI_write(uint8_t data) {
     6a2:	df 93       	push	r29
	// Load data into TWDR register
	TWDR = data;
     6a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	
	// Start transmission
	TWCR = (1 << TWINT) | (1 << TWEN);
     6a8:	84 e8       	ldi	r24, 0x84	; 132
     6aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// Wait for TWINT flag to be set
	while (!(TWCR & (1 << TWINT)));
     6ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     6b2:	88 23       	and	r24, r24
     6b4:	e4 f7       	brge	.-8      	; 0x6ae <TWI_write+0xe>
	
	// Check status
	uint8_t status = TWSR & 0xF8;
     6b6:	d0 91 b9 00 	lds	r29, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     6ba:	cd 2f       	mov	r28, r29
     6bc:	c8 7f       	andi	r28, 0xF8	; 248
	
	// For SLA+W, we expect 0x18 (ACK) or 0x20 (NACK)
	// For data byte, we expect 0x28 (ACK) or 0x30 (NACK)
	if (status != 0x18 && status != 0x28) {
     6be:	c8 31       	cpi	r28, 0x18	; 24
     6c0:	99 f0       	breq	.+38     	; 0x6e8 <TWI_write+0x48>
     6c2:	c8 32       	cpi	r28, 0x28	; 40
     6c4:	99 f0       	breq	.+38     	; 0x6ec <TWI_write+0x4c>
		UART_send_string("TWI write error: 0x");
     6c6:	88 e5       	ldi	r24, 0x58	; 88
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	88 df       	rcall	.-240    	; 0x5dc <UART_send_string>
		UART_send_char('0' + (status >> 4));
     6cc:	8c 2f       	mov	r24, r28
     6ce:	82 95       	swap	r24
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	80 5d       	subi	r24, 0xD0	; 208
     6d4:	7c df       	rcall	.-264    	; 0x5ce <UART_send_char>
		UART_send_char('0' + (status & 0x0F));
     6d6:	8d 2f       	mov	r24, r29
     6d8:	88 70       	andi	r24, 0x08	; 8
     6da:	80 5d       	subi	r24, 0xD0	; 208
     6dc:	78 df       	rcall	.-272    	; 0x5ce <UART_send_char>
		UART_send_string("\r\n");
     6de:	8e e1       	ldi	r24, 0x1E	; 30
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	7c df       	rcall	.-264    	; 0x5dc <UART_send_string>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
		return 0;  // Error
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <TWI_write+0x4e>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 1;  // Success
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <TWI_write+0x4e>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	df 91       	pop	r29
}
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <send_command>:
     6f4:	cf 93       	push	r28
	}
	return ptr;
}

// Send a command to the slave device
void send_command(char cmd) {
     6f6:	c8 2f       	mov	r28, r24
	UART_send_string("Sending command: ");
     6f8:	8c e6       	ldi	r24, 0x6C	; 108
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	6f df       	rcall	.-290    	; 0x5dc <UART_send_string>
	UART_send_char(cmd);
     6fe:	8c 2f       	mov	r24, r28
     700:	66 df       	rcall	.-308    	; 0x5ce <UART_send_char>
	UART_send_string("\r\n");
     702:	8e e1       	ldi	r24, 0x1E	; 30
     704:	93 e0       	ldi	r25, 0x03	; 3
	
	if (TWI_start()) {
     706:	6a df       	rcall	.-300    	; 0x5dc <UART_send_string>
     708:	a6 df       	rcall	.-180    	; 0x656 <TWI_start>
     70a:	88 23       	and	r24, r24
		UART_send_string("TWI started\r\n");
     70c:	51 f1       	breq	.+84     	; 0x762 <send_command+0x6e>
     70e:	8e e7       	ldi	r24, 0x7E	; 126
     710:	92 e0       	ldi	r25, 0x02	; 2
		
		if (TWI_write((SLAVE_ADDRESS << 1) | 0)) {  // SLA+W
     712:	64 df       	rcall	.-312    	; 0x5dc <UART_send_string>
     714:	8e ea       	ldi	r24, 0xAE	; 174
     716:	c4 df       	rcall	.-120    	; 0x6a0 <TWI_write>
     718:	88 23       	and	r24, r24
			if (TWI_write(cmd)) {
     71a:	d9 f0       	breq	.+54     	; 0x752 <send_command+0x5e>
     71c:	8c 2f       	mov	r24, r28
     71e:	c0 df       	rcall	.-128    	; 0x6a0 <TWI_write>
     720:	88 23       	and	r24, r24
				UART_send_string("Command sent successfully\r\n");
     722:	99 f0       	breq	.+38     	; 0x74a <send_command+0x56>
     724:	8c e8       	ldi	r24, 0x8C	; 140
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	59 df       	rcall	.-334    	; 0x5dc <UART_send_string>
				// Flash an indicator LED on the master
				PORTB |= (1 << PB7);  // Turn on LED on pin 13
     72a:	85 b1       	in	r24, 0x05	; 5
     72c:	80 68       	ori	r24, 0x80	; 128
     72e:	85 b9       	out	0x05, r24	; 5
     730:	2f ef       	ldi	r18, 0xFF	; 255
     732:	81 ee       	ldi	r24, 0xE1	; 225
     734:	94 e0       	ldi	r25, 0x04	; 4
     736:	21 50       	subi	r18, 0x01	; 1
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	90 40       	sbci	r25, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <send_command+0x42>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <send_command+0x4c>
				_delay_ms(100);
				PORTB &= ~(1 << PB7); // Turn off LED
     740:	00 00       	nop
     742:	85 b1       	in	r24, 0x05	; 5
     744:	8f 77       	andi	r24, 0x7F	; 127
			} else {
				UART_send_string("Failed to send command\r\n");
     746:	85 b9       	out	0x05, r24	; 5
     748:	07 c0       	rjmp	.+14     	; 0x758 <send_command+0x64>
     74a:	88 ea       	ldi	r24, 0xA8	; 168
     74c:	92 e0       	ldi	r25, 0x02	; 2
			}
		} else {
			UART_send_string("Slave not responding\r\n");
     74e:	46 df       	rcall	.-372    	; 0x5dc <UART_send_string>
     750:	03 c0       	rjmp	.+6      	; 0x758 <send_command+0x64>
     752:	81 ec       	ldi	r24, 0xC1	; 193
		}		
		TWI_stop();
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	42 df       	rcall	.-380    	; 0x5dc <UART_send_string>
		UART_send_string("TWI stopped\r\n");
     758:	24 df       	rcall	.-440    	; 0x5a2 <TWI_stop>
     75a:	88 ed       	ldi	r24, 0xD8	; 216
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	3e df       	rcall	.-388    	; 0x5dc <UART_send_string>
     760:	03 c0       	rjmp	.+6      	; 0x768 <send_command+0x74>
	} else {
		UART_send_string("TWI start failed\r\n");
     762:	86 ee       	ldi	r24, 0xE6	; 230
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	3a df       	rcall	.-396    	; 0x5dc <UART_send_string>
     768:	cf 91       	pop	r28
	}
}
     76a:	08 95       	ret

0000076c <door_open_close>:
     76c:	89 ef       	ldi	r24, 0xF9	; 249
	}
	return 0;
}

void door_open_close(){
	UART_send_string("Door open!\r\n");
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	35 df       	rcall	.-406    	; 0x5dc <UART_send_string>
	send_command('O');
     772:	8f e4       	ldi	r24, 0x4F	; 79
	// Update LCD to show door opening message for 5 seconds
	lcd_clrscr();
     774:	bf df       	rcall	.-130    	; 0x6f4 <send_command>
	lcd_puts("Door is open");
     776:	a3 de       	rcall	.-698    	; 0x4be <lcd_clrscr>
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	93 e0       	ldi	r25, 0x03	; 3
     77c:	b5 de       	rcall	.-662    	; 0x4e8 <lcd_puts>
     77e:	2f ef       	ldi	r18, 0xFF	; 255
     780:	83 e2       	ldi	r24, 0x23	; 35
     782:	94 ef       	ldi	r25, 0xF4	; 244
     784:	21 50       	subi	r18, 0x01	; 1
     786:	80 40       	sbci	r24, 0x00	; 0
     788:	90 40       	sbci	r25, 0x00	; 0
     78a:	e1 f7       	brne	.-8      	; 0x784 <door_open_close+0x18>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <door_open_close+0x22>
	_delay_ms(5000);
	UART_send_string("Door close!\r\n");
     78e:	00 00       	nop
     790:	83 e1       	ldi	r24, 0x13	; 19
	send_command('C');
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	23 df       	rcall	.-442    	; 0x5dc <UART_send_string>
	// Update LCD to door closed for 1 second and return to idle
	lcd_clrscr();
     796:	83 e4       	ldi	r24, 0x43	; 67
     798:	ad df       	rcall	.-166    	; 0x6f4 <send_command>
	lcd_puts("Door is closed");
     79a:	91 de       	rcall	.-734    	; 0x4be <lcd_clrscr>
     79c:	81 e2       	ldi	r24, 0x21	; 33
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	a3 de       	rcall	.-698    	; 0x4e8 <lcd_puts>
     7a2:	2f ef       	ldi	r18, 0xFF	; 255
     7a4:	83 ed       	ldi	r24, 0xD3	; 211
     7a6:	90 e3       	ldi	r25, 0x30	; 48
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	80 40       	sbci	r24, 0x00	; 0
     7ac:	90 40       	sbci	r25, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <door_open_close+0x3c>
	_delay_ms(1000);
	lcd_clrscr();
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <door_open_close+0x46>
     7b2:	00 00       	nop
	lcd_puts("Choose the floor");
     7b4:	84 de       	rcall	.-760    	; 0x4be <lcd_clrscr>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	96 ce       	rjmp	.-724    	; 0x4e8 <lcd_puts>
     7bc:	08 95       	ret

000007be <main>:

char key_str[4];
char* ptr;


int main(void) {
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	a8 97       	sbiw	r28, 0x28	; 40
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
	
	setup();
     7d2:	10 df       	rcall	.-480    	; 0x5f4 <setup>
	// char *str_ptr;        // Luodaan apumuuttuja pointerille stringiin.
	// str_ptr = str;
	
    while (1) {
  	
		uint8_t key_input = KEYPAD_GetKey();
     7d4:	69 dd       	rcall	.-1326   	; 0x2a8 <KEYPAD_GetKey>
     7d6:	88 23       	and	r24, r24
		
		// Tallennetaan	kaapattu keypad painallus int ja str pointer muodossa	
		if(key_input != 0){ // Jos painiketta on painettu (ei ole 0)
     7d8:	e9 f3       	breq	.-6      	; 0x7d4 <main+0x16>
     7da:	10 ed       	ldi	r17, 0xD0	; 208

			key_input = key_input - '0';
     7dc:	18 0f       	add	r17, r24
     7de:	e1 2e       	mov	r14, r17
			itoa(key_input, str, 20);
     7e0:	f1 2c       	mov	r15, r1
     7e2:	44 e1       	ldi	r20, 0x14	; 20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	c7 01       	movw	r24, r14
     7ec:	38 d1       	rcall	.+624    	; 0xa5e <__itoa_ncheck>
     7ee:	80 e3       	ldi	r24, 0x30	; 48
			UART_send_string("Pressed key: ");
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	f4 de       	rcall	.-536    	; 0x5dc <UART_send_string>
     7f4:	ce 01       	movw	r24, r28
			UART_send_string(str);
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	f1 de       	rcall	.-542    	; 0x5dc <UART_send_string>
     7fa:	8e e1       	ldi	r24, 0x1E	; 30
			UART_send_string ("\r\n");
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	ee de       	rcall	.-548    	; 0x5dc <UART_send_string>
     800:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
			
		} else continue;
		
		// Define next state
		if(current_floor < key_input)	{ current_state = 1; }
     804:	81 17       	cp	r24, r17
     806:	18 f4       	brcc	.+6      	; 0x80e <main+0x50>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <current_state>
     80e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
		if(current_floor == key_input)	{ current_state = 2; }
     812:	18 13       	cpse	r17, r24
     814:	03 c0       	rjmp	.+6      	; 0x81c <main+0x5e>
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <current_state>
     81c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
		if(current_floor > key_input)	{ current_state = 3; }
     820:	18 17       	cp	r17, r24
     822:	18 f4       	brcc	.+6      	; 0x82a <main+0x6c>
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <current_state>
     82a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
		
		floors_to_travel = abs(current_floor - key_input);
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	8e 19       	sub	r24, r14
     832:	9f 09       	sbc	r25, r15
     834:	9c 01       	movw	r18, r24
     836:	22 f4       	brpl	.+8      	; 0x840 <main+0x82>
     838:	22 27       	eor	r18, r18
     83a:	33 27       	eor	r19, r19
     83c:	28 1b       	sub	r18, r24
     83e:	39 0b       	sbc	r19, r25
     840:	20 93 a6 03 	sts	0x03A6, r18	; 0x8003a6 <__data_end>
     844:	8e e3       	ldi	r24, 0x3E	; 62
		
		// Debug:
		
		UART_send_string("Current floor: ");
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	c9 de       	rcall	.-622    	; 0x5dc <UART_send_string>
     84a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
		itoa(current_floor, str, 20);
     84e:	44 e1       	ldi	r20, 0x14	; 20
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 d1       	rcall	.+516    	; 0xa5e <__itoa_ncheck>
		UART_send_string(str);
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	be de       	rcall	.-644    	; 0x5dc <UART_send_string>
     860:	8e e4       	ldi	r24, 0x4E	; 78
		UART_send_string(", Floors to travel: ");
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	bb de       	rcall	.-650    	; 0x5dc <UART_send_string>
     866:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <__data_end>
     86a:	44 e1       	ldi	r20, 0x14	; 20
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	f4 d0       	rcall	.+488    	; 0xa5e <__itoa_ncheck>
		itoa(floors_to_travel, str, 20);
		UART_send_string(str);
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	b0 de       	rcall	.-672    	; 0x5dc <UART_send_string>
     87c:	8e e1       	ldi	r24, 0x1E	; 30
		UART_send_string("\r\n");
     87e:	93 e0       	ldi	r25, 0x03	; 3
     880:	ad de       	rcall	.-678    	; 0x5dc <UART_send_string>
     882:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <current_state>
		
		switch(current_state){
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	09 f4       	brne	.+2      	; 0x88c <main+0xce>
     88a:	64 c0       	rjmp	.+200    	; 0x954 <main+0x196>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	09 f4       	brne	.+2      	; 0x892 <main+0xd4>
     890:	7a c0       	rjmp	.+244    	; 0x986 <main+0x1c8>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	09 f0       	breq	.+2      	; 0x898 <main+0xda>
     896:	d4 c0       	rjmp	.+424    	; 0xa40 <main+0x282>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	89 ef       	ldi	r24, 0xF9	; 249
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	80 40       	sbci	r24, 0x00	; 0
     8a2:	90 40       	sbci	r25, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <main+0xe0>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <main+0xea>
     8a8:	00 00       	nop
			case 1: // GO UP
			
				_delay_ms(20);  // Debounce
    
				UART_send_string("Going up!\r\n");
     8aa:	83 e6       	ldi	r24, 0x63	; 99
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	96 de       	rcall	.-724    	; 0x5dc <UART_send_string>
				send_command('M');
     8b0:	8d e4       	ldi	r24, 0x4D	; 77
     8b2:	20 df       	rcall	.-448    	; 0x6f4 <send_command>
     8b4:	e1 2c       	mov	r14, r1
				
				for(int i = 0; i < floors_to_travel; i++){
     8b6:	f1 2c       	mov	r15, r1
     8b8:	39 c0       	rjmp	.+114    	; 0x92c <main+0x16e>
     8ba:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
					current_floor++;
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <current_floor>
					// Update LCD to display current floor
					lcd_clrscr();
     8c4:	fc dd       	rcall	.-1032   	; 0x4be <lcd_clrscr>
					//lcd_puts("Floor: %d", current_floor);
					char lcd_str[20];
					sprintf(lcd_str, "Floor: %d", current_floor);
     8c6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
     8ca:	1f 92       	push	r1
     8cc:	8f 93       	push	r24
     8ce:	8f e6       	ldi	r24, 0x6F	; 111
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	8e 01       	movw	r16, r28
     8d8:	0b 5e       	subi	r16, 0xEB	; 235
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	1f 93       	push	r17
     8de:	0f 93       	push	r16
					lcd_puts(lcd_str);
     8e0:	e1 d0       	rcall	.+450    	; 0xaa4 <sprintf>
     8e2:	c8 01       	movw	r24, r16
					
					
					UART_send_string("Moving to floor: ");
     8e4:	01 de       	rcall	.-1022   	; 0x4e8 <lcd_puts>
     8e6:	89 e7       	ldi	r24, 0x79	; 121
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	78 de       	rcall	.-784    	; 0x5dc <UART_send_string>
					itoa(current_floor, str, 10);
     8ec:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
     8f0:	4a e0       	ldi	r20, 0x0A	; 10
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	b1 d0       	rcall	.+354    	; 0xa5e <__itoa_ncheck>
     8fc:	ce 01       	movw	r24, r28
					UART_send_string(str);
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	6d de       	rcall	.-806    	; 0x5dc <UART_send_string>
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	93 e0       	ldi	r25, 0x03	; 3
					UART_send_string("\r\n");
     906:	6a de       	rcall	.-812    	; 0x5dc <UART_send_string>
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	83 ec       	ldi	r24, 0xC3	; 195
     90c:	99 e0       	ldi	r25, 0x09	; 9
     90e:	21 50       	subi	r18, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <main+0x150>
     916:	00 c0       	rjmp	.+0      	; 0x918 <main+0x15a>
     918:	00 00       	nop
     91a:	2f ef       	ldi	r18, 0xFF	; 255
				_delay_ms(20);  // Debounce
    
				UART_send_string("Going up!\r\n");
				send_command('M');
				
				for(int i = 0; i < floors_to_travel; i++){
     91c:	e2 1a       	sub	r14, r18
     91e:	f2 0a       	sbc	r15, r18
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <__data_end>
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	e8 16       	cp	r14, r24
     934:	f9 06       	cpc	r15, r25
     936:	0c f4       	brge	.+2      	; 0x93a <main+0x17c>
     938:	c0 cf       	rjmp	.-128    	; 0x8ba <main+0xfc>
     93a:	83 e5       	ldi	r24, 0x53	; 83
					itoa(current_floor, str, 10);
					UART_send_string(str);
					UART_send_string("\r\n");
					_delay_ms(200);
				}
				send_command('S');
     93c:	db de       	rcall	.-586    	; 0x6f4 <send_command>
     93e:	16 df       	rcall	.-468    	; 0x76c <door_open_close>
				
				// Door open-close sequence
				door_open_close();
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	93 ec       	ldi	r25, 0xC3	; 195
     944:	29 e0       	ldi	r18, 0x09	; 9
     946:	81 50       	subi	r24, 0x01	; 1
     948:	90 40       	sbci	r25, 0x00	; 0
     94a:	20 40       	sbci	r18, 0x00	; 0
     94c:	e1 f7       	brne	.-8      	; 0x946 <main+0x188>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <main+0x192>
     950:	00 00       	nop
     952:	76 c0       	rjmp	.+236    	; 0xa40 <main+0x282>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	99 ef       	ldi	r25, 0xF9	; 249
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	81 50       	subi	r24, 0x01	; 1
     95c:	90 40       	sbci	r25, 0x00	; 0
     95e:	20 40       	sbci	r18, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <main+0x19c>
     962:	00 c0       	rjmp	.+0      	; 0x964 <main+0x1a6>
     964:	00 00       	nop
			
			case 2: // SAME FLOOR
			
				_delay_ms(20);  // Debounce
			
				UART_send_string("No action.\r\n");
     966:	8b e8       	ldi	r24, 0x8B	; 139
     968:	93 e0       	ldi	r25, 0x03	; 3
     96a:	38 de       	rcall	.-912    	; 0x5dc <UART_send_string>
				send_command('S');
     96c:	83 e5       	ldi	r24, 0x53	; 83
     96e:	c2 de       	rcall	.-636    	; 0x6f4 <send_command>
				
				// Door open-close sequence
				door_open_close();
     970:	fd de       	rcall	.-518    	; 0x76c <door_open_close>
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	93 ec       	ldi	r25, 0xC3	; 195
     976:	29 e0       	ldi	r18, 0x09	; 9
     978:	81 50       	subi	r24, 0x01	; 1
     97a:	90 40       	sbci	r25, 0x00	; 0
     97c:	20 40       	sbci	r18, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <main+0x1ba>
     980:	00 c0       	rjmp	.+0      	; 0x982 <main+0x1c4>
     982:	00 00       	nop
     984:	5d c0       	rjmp	.+186    	; 0xa40 <main+0x282>
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	99 ef       	ldi	r25, 0xF9	; 249
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	20 40       	sbci	r18, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <main+0x1ce>
     994:	00 c0       	rjmp	.+0      	; 0x996 <main+0x1d8>
     996:	00 00       	nop
				break;
				
			case 3: // GO DOWN
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
     998:	88 e9       	ldi	r24, 0x98	; 152
     99a:	93 e0       	ldi	r25, 0x03	; 3
				send_command('M');
     99c:	1f de       	rcall	.-962    	; 0x5dc <UART_send_string>
     99e:	8d e4       	ldi	r24, 0x4D	; 77
				for(int i = 0; i < floors_to_travel; i++){
     9a0:	a9 de       	rcall	.-686    	; 0x6f4 <send_command>
     9a2:	e1 2c       	mov	r14, r1
     9a4:	f1 2c       	mov	r15, r1
					current_floor--;
     9a6:	39 c0       	rjmp	.+114    	; 0xa1a <main+0x25c>
     9a8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
     9ac:	81 50       	subi	r24, 0x01	; 1
					// Update LCD to display current floor
					lcd_clrscr();
     9ae:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <current_floor>
					//lcd_puts("Floor: %d", current_floor);
					char lcd_str[20];
					sprintf(lcd_str, "Floor: %d", current_floor);
     9b2:	85 dd       	rcall	.-1270   	; 0x4be <lcd_clrscr>
     9b4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
     9b8:	1f 92       	push	r1
     9ba:	8f 93       	push	r24
     9bc:	8f e6       	ldi	r24, 0x6F	; 111
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	8e 01       	movw	r16, r28
     9c6:	0b 5e       	subi	r16, 0xEB	; 235
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	1f 93       	push	r17
					lcd_puts(lcd_str);
     9cc:	0f 93       	push	r16
     9ce:	6a d0       	rcall	.+212    	; 0xaa4 <sprintf>
     9d0:	c8 01       	movw	r24, r16
					
					UART_send_string("Moving to floor: ");
     9d2:	8a dd       	rcall	.-1260   	; 0x4e8 <lcd_puts>
     9d4:	89 e7       	ldi	r24, 0x79	; 121
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	01 de       	rcall	.-1022   	; 0x5dc <UART_send_string>
					itoa(current_floor, str, 10);
     9da:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_floor>
     9de:	4a e0       	ldi	r20, 0x0A	; 10
     9e0:	be 01       	movw	r22, r28
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	3a d0       	rcall	.+116    	; 0xa5e <__itoa_ncheck>
					UART_send_string(str);
     9ea:	ce 01       	movw	r24, r28
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	f6 dd       	rcall	.-1044   	; 0x5dc <UART_send_string>
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
					UART_send_string("\r\n");
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	f3 dd       	rcall	.-1050   	; 0x5dc <UART_send_string>
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	93 ec       	ldi	r25, 0xC3	; 195
     9fa:	29 e0       	ldi	r18, 0x09	; 9
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	20 40       	sbci	r18, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0x23e>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <main+0x248>
     a06:	00 00       	nop
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	e8 1a       	sub	r14, r24
			case 3: // GO DOWN
			
	            _delay_ms(20);  // Debounce
	            UART_send_string("Going down!\r\n");
				send_command('M');
				for(int i = 0; i < floors_to_travel; i++){
     a0c:	f8 0a       	sbc	r15, r24
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <__data_end>
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	e8 16       	cp	r14, r24
     a22:	f9 06       	cpc	r15, r25
     a24:	0c f4       	brge	.+2      	; 0xa28 <main+0x26a>
     a26:	c0 cf       	rjmp	.-128    	; 0x9a8 <main+0x1ea>
     a28:	83 e5       	ldi	r24, 0x53	; 83
     a2a:	64 de       	rcall	.-824    	; 0x6f4 <send_command>
					UART_send_string(str);
					UART_send_string("\r\n");
					_delay_ms(200);						
				}
				
				send_command('S');
     a2c:	9f de       	rcall	.-706    	; 0x76c <door_open_close>
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	23 ec       	ldi	r18, 0xC3	; 195
				
				// Door open-close sequence
				door_open_close();
     a32:	89 e0       	ldi	r24, 0x09	; 9
     a34:	91 50       	subi	r25, 0x01	; 1
     a36:	20 40       	sbci	r18, 0x00	; 0
     a38:	80 40       	sbci	r24, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <main+0x276>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <main+0x280>
     a3e:	00 00       	nop
     a40:	8f e3       	ldi	r24, 0x3F	; 63
     a42:	9c e9       	ldi	r25, 0x9C	; 156
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <main+0x286>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <main+0x28c>
     a4a:	00 00       	nop
     a4c:	c3 ce       	rjmp	.-634    	; 0x7d4 <main+0x16>

00000a4e <__tablejump2__>:
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	88 1f       	adc	r24, r24
     a54:	8b bf       	out	0x3b, r24	; 59
     a56:	07 90       	elpm	r0, Z+
     a58:	f6 91       	elpm	r31, Z
     a5a:	e0 2d       	mov	r30, r0
     a5c:	19 94       	eijmp

00000a5e <__itoa_ncheck>:
     a5e:	bb 27       	eor	r27, r27
     a60:	4a 30       	cpi	r20, 0x0A	; 10
     a62:	31 f4       	brne	.+12     	; 0xa70 <__itoa_ncheck+0x12>
     a64:	99 23       	and	r25, r25
     a66:	22 f4       	brpl	.+8      	; 0xa70 <__itoa_ncheck+0x12>
     a68:	bd e2       	ldi	r27, 0x2D	; 45
     a6a:	90 95       	com	r25
     a6c:	81 95       	neg	r24
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <__utoa_common>

00000a72 <__utoa_ncheck>:
     a72:	bb 27       	eor	r27, r27

00000a74 <__utoa_common>:
     a74:	fb 01       	movw	r30, r22
     a76:	55 27       	eor	r21, r21
     a78:	aa 27       	eor	r26, r26
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	aa 1f       	adc	r26, r26
     a80:	a4 17       	cp	r26, r20
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__utoa_common+0x14>
     a84:	a4 1b       	sub	r26, r20
     a86:	83 95       	inc	r24
     a88:	50 51       	subi	r21, 0x10	; 16
     a8a:	b9 f7       	brne	.-18     	; 0xa7a <__utoa_common+0x6>
     a8c:	a0 5d       	subi	r26, 0xD0	; 208
     a8e:	aa 33       	cpi	r26, 0x3A	; 58
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__utoa_common+0x20>
     a92:	a9 5d       	subi	r26, 0xD9	; 217
     a94:	a1 93       	st	Z+, r26
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	79 f7       	brne	.-34     	; 0xa78 <__utoa_common+0x4>
     a9a:	b1 11       	cpse	r27, r1
     a9c:	b1 93       	st	Z+, r27
     a9e:	11 92       	st	Z+, r1
     aa0:	cb 01       	movw	r24, r22
     aa2:	41 c2       	rjmp	.+1154   	; 0xf26 <strrev>

00000aa4 <sprintf>:
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	2e 97       	sbiw	r28, 0x0e	; 14
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	0e 89       	ldd	r16, Y+22	; 0x16
     abe:	1f 89       	ldd	r17, Y+23	; 0x17
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	8c 83       	std	Y+4, r24	; 0x04
     ac4:	1a 83       	std	Y+2, r17	; 0x02
     ac6:	09 83       	std	Y+1, r16	; 0x01
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	9f e7       	ldi	r25, 0x7F	; 127
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	ae 01       	movw	r20, r28
     ad2:	46 5e       	subi	r20, 0xE6	; 230
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	68 8d       	ldd	r22, Y+24	; 0x18
     ad8:	79 8d       	ldd	r23, Y+25	; 0x19
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	10 d0       	rcall	.+32     	; 0xb00 <vfprintf>
     ae0:	ef 81       	ldd	r30, Y+7	; 0x07
     ae2:	f8 85       	ldd	r31, Y+8	; 0x08
     ae4:	e0 0f       	add	r30, r16
     ae6:	f1 1f       	adc	r31, r17
     ae8:	10 82       	st	Z, r1
     aea:	2e 96       	adiw	r28, 0x0e	; 14
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <vfprintf>:
     b00:	2f 92       	push	r2
     b02:	3f 92       	push	r3
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	6f 92       	push	r6
     b0a:	7f 92       	push	r7
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	2b 97       	sbiw	r28, 0x0b	; 11
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	6c 01       	movw	r12, r24
     b36:	7b 01       	movw	r14, r22
     b38:	8a 01       	movw	r16, r20
     b3a:	fc 01       	movw	r30, r24
     b3c:	17 82       	std	Z+7, r1	; 0x07
     b3e:	16 82       	std	Z+6, r1	; 0x06
     b40:	83 81       	ldd	r24, Z+3	; 0x03
     b42:	81 ff       	sbrs	r24, 1
     b44:	bf c1       	rjmp	.+894    	; 0xec4 <vfprintf+0x3c4>
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	3c 01       	movw	r6, r24
     b4c:	f6 01       	movw	r30, r12
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	f7 01       	movw	r30, r14
     b52:	93 fd       	sbrc	r25, 3
     b54:	85 91       	lpm	r24, Z+
     b56:	93 ff       	sbrs	r25, 3
     b58:	81 91       	ld	r24, Z+
     b5a:	7f 01       	movw	r14, r30
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <vfprintf+0x62>
     b60:	ad c1       	rjmp	.+858    	; 0xebc <vfprintf+0x3bc>
     b62:	85 32       	cpi	r24, 0x25	; 37
     b64:	39 f4       	brne	.+14     	; 0xb74 <vfprintf+0x74>
     b66:	93 fd       	sbrc	r25, 3
     b68:	85 91       	lpm	r24, Z+
     b6a:	93 ff       	sbrs	r25, 3
     b6c:	81 91       	ld	r24, Z+
     b6e:	7f 01       	movw	r14, r30
     b70:	85 32       	cpi	r24, 0x25	; 37
     b72:	21 f4       	brne	.+8      	; 0xb7c <vfprintf+0x7c>
     b74:	b6 01       	movw	r22, r12
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	e6 d1       	rcall	.+972    	; 0xf46 <fputc>
     b7a:	e8 cf       	rjmp	.-48     	; 0xb4c <vfprintf+0x4c>
     b7c:	91 2c       	mov	r9, r1
     b7e:	21 2c       	mov	r2, r1
     b80:	31 2c       	mov	r3, r1
     b82:	ff e1       	ldi	r31, 0x1F	; 31
     b84:	f3 15       	cp	r31, r3
     b86:	d8 f0       	brcs	.+54     	; 0xbbe <vfprintf+0xbe>
     b88:	8b 32       	cpi	r24, 0x2B	; 43
     b8a:	79 f0       	breq	.+30     	; 0xbaa <vfprintf+0xaa>
     b8c:	38 f4       	brcc	.+14     	; 0xb9c <vfprintf+0x9c>
     b8e:	80 32       	cpi	r24, 0x20	; 32
     b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0xb0>
     b92:	83 32       	cpi	r24, 0x23	; 35
     b94:	a1 f4       	brne	.+40     	; 0xbbe <vfprintf+0xbe>
     b96:	23 2d       	mov	r18, r3
     b98:	20 61       	ori	r18, 0x10	; 16
     b9a:	1d c0       	rjmp	.+58     	; 0xbd6 <vfprintf+0xd6>
     b9c:	8d 32       	cpi	r24, 0x2D	; 45
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <vfprintf+0xb8>
     ba0:	80 33       	cpi	r24, 0x30	; 48
     ba2:	69 f4       	brne	.+26     	; 0xbbe <vfprintf+0xbe>
     ba4:	23 2d       	mov	r18, r3
     ba6:	21 60       	ori	r18, 0x01	; 1
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <vfprintf+0xd6>
     baa:	83 2d       	mov	r24, r3
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	38 2e       	mov	r3, r24
     bb0:	e3 2d       	mov	r30, r3
     bb2:	e4 60       	ori	r30, 0x04	; 4
     bb4:	3e 2e       	mov	r3, r30
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <vfprintf+0x10c>
     bb8:	f3 2d       	mov	r31, r3
     bba:	f8 60       	ori	r31, 0x08	; 8
     bbc:	1d c0       	rjmp	.+58     	; 0xbf8 <vfprintf+0xf8>
     bbe:	37 fc       	sbrc	r3, 7
     bc0:	2d c0       	rjmp	.+90     	; 0xc1c <vfprintf+0x11c>
     bc2:	20 ed       	ldi	r18, 0xD0	; 208
     bc4:	28 0f       	add	r18, r24
     bc6:	2a 30       	cpi	r18, 0x0A	; 10
     bc8:	40 f0       	brcs	.+16     	; 0xbda <vfprintf+0xda>
     bca:	8e 32       	cpi	r24, 0x2E	; 46
     bcc:	b9 f4       	brne	.+46     	; 0xbfc <vfprintf+0xfc>
     bce:	36 fc       	sbrc	r3, 6
     bd0:	75 c1       	rjmp	.+746    	; 0xebc <vfprintf+0x3bc>
     bd2:	23 2d       	mov	r18, r3
     bd4:	20 64       	ori	r18, 0x40	; 64
     bd6:	32 2e       	mov	r3, r18
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <vfprintf+0x10c>
     bda:	36 fe       	sbrs	r3, 6
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0xea>
     bde:	8a e0       	ldi	r24, 0x0A	; 10
     be0:	98 9e       	mul	r9, r24
     be2:	20 0d       	add	r18, r0
     be4:	11 24       	eor	r1, r1
     be6:	92 2e       	mov	r9, r18
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <vfprintf+0x10c>
     bea:	ea e0       	ldi	r30, 0x0A	; 10
     bec:	2e 9e       	mul	r2, r30
     bee:	20 0d       	add	r18, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	22 2e       	mov	r2, r18
     bf4:	f3 2d       	mov	r31, r3
     bf6:	f0 62       	ori	r31, 0x20	; 32
     bf8:	3f 2e       	mov	r3, r31
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <vfprintf+0x10c>
     bfc:	8c 36       	cpi	r24, 0x6C	; 108
     bfe:	21 f4       	brne	.+8      	; 0xc08 <vfprintf+0x108>
     c00:	83 2d       	mov	r24, r3
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	38 2e       	mov	r3, r24
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x10c>
     c08:	88 36       	cpi	r24, 0x68	; 104
     c0a:	41 f4       	brne	.+16     	; 0xc1c <vfprintf+0x11c>
     c0c:	f7 01       	movw	r30, r14
     c0e:	93 fd       	sbrc	r25, 3
     c10:	85 91       	lpm	r24, Z+
     c12:	93 ff       	sbrs	r25, 3
     c14:	81 91       	ld	r24, Z+
     c16:	7f 01       	movw	r14, r30
     c18:	81 11       	cpse	r24, r1
     c1a:	b3 cf       	rjmp	.-154    	; 0xb82 <vfprintf+0x82>
     c1c:	98 2f       	mov	r25, r24
     c1e:	9f 7d       	andi	r25, 0xDF	; 223
     c20:	95 54       	subi	r25, 0x45	; 69
     c22:	93 30       	cpi	r25, 0x03	; 3
     c24:	28 f4       	brcc	.+10     	; 0xc30 <vfprintf+0x130>
     c26:	0c 5f       	subi	r16, 0xFC	; 252
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	99 83       	std	Y+1, r25	; 0x01
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <vfprintf+0x14a>
     c30:	83 36       	cpi	r24, 0x63	; 99
     c32:	31 f0       	breq	.+12     	; 0xc40 <vfprintf+0x140>
     c34:	83 37       	cpi	r24, 0x73	; 115
     c36:	71 f0       	breq	.+28     	; 0xc54 <vfprintf+0x154>
     c38:	83 35       	cpi	r24, 0x53	; 83
     c3a:	09 f0       	breq	.+2      	; 0xc3e <vfprintf+0x13e>
     c3c:	55 c0       	rjmp	.+170    	; 0xce8 <vfprintf+0x1e8>
     c3e:	20 c0       	rjmp	.+64     	; 0xc80 <vfprintf+0x180>
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	0e 5f       	subi	r16, 0xFE	; 254
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	88 24       	eor	r8, r8
     c4c:	83 94       	inc	r8
     c4e:	91 2c       	mov	r9, r1
     c50:	53 01       	movw	r10, r6
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <vfprintf+0x178>
     c54:	28 01       	movw	r4, r16
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	4f 0e       	add	r4, r31
     c5a:	51 1c       	adc	r5, r1
     c5c:	f8 01       	movw	r30, r16
     c5e:	a0 80       	ld	r10, Z
     c60:	b1 80       	ldd	r11, Z+1	; 0x01
     c62:	36 fe       	sbrs	r3, 6
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <vfprintf+0x16c>
     c66:	69 2d       	mov	r22, r9
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x170>
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	7f ef       	ldi	r23, 0xFF	; 255
     c70:	c5 01       	movw	r24, r10
     c72:	4e d1       	rcall	.+668    	; 0xf10 <strnlen>
     c74:	4c 01       	movw	r8, r24
     c76:	82 01       	movw	r16, r4
     c78:	f3 2d       	mov	r31, r3
     c7a:	ff 77       	andi	r31, 0x7F	; 127
     c7c:	3f 2e       	mov	r3, r31
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <vfprintf+0x1aa>
     c80:	28 01       	movw	r4, r16
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	42 0e       	add	r4, r18
     c86:	51 1c       	adc	r5, r1
     c88:	f8 01       	movw	r30, r16
     c8a:	a0 80       	ld	r10, Z
     c8c:	b1 80       	ldd	r11, Z+1	; 0x01
     c8e:	36 fe       	sbrs	r3, 6
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x198>
     c92:	69 2d       	mov	r22, r9
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x19c>
     c98:	6f ef       	ldi	r22, 0xFF	; 255
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	c5 01       	movw	r24, r10
     c9e:	2d d1       	rcall	.+602    	; 0xefa <strnlen_P>
     ca0:	4c 01       	movw	r8, r24
     ca2:	f3 2d       	mov	r31, r3
     ca4:	f0 68       	ori	r31, 0x80	; 128
     ca6:	3f 2e       	mov	r3, r31
     ca8:	82 01       	movw	r16, r4
     caa:	33 fc       	sbrc	r3, 3
     cac:	19 c0       	rjmp	.+50     	; 0xce0 <vfprintf+0x1e0>
     cae:	82 2d       	mov	r24, r2
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	88 16       	cp	r8, r24
     cb4:	99 06       	cpc	r9, r25
     cb6:	a0 f4       	brcc	.+40     	; 0xce0 <vfprintf+0x1e0>
     cb8:	b6 01       	movw	r22, r12
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	43 d1       	rcall	.+646    	; 0xf46 <fputc>
     cc0:	2a 94       	dec	r2
     cc2:	f5 cf       	rjmp	.-22     	; 0xcae <vfprintf+0x1ae>
     cc4:	f5 01       	movw	r30, r10
     cc6:	37 fc       	sbrc	r3, 7
     cc8:	85 91       	lpm	r24, Z+
     cca:	37 fe       	sbrs	r3, 7
     ccc:	81 91       	ld	r24, Z+
     cce:	5f 01       	movw	r10, r30
     cd0:	b6 01       	movw	r22, r12
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	38 d1       	rcall	.+624    	; 0xf46 <fputc>
     cd6:	21 10       	cpse	r2, r1
     cd8:	2a 94       	dec	r2
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	82 1a       	sub	r8, r18
     cde:	91 08       	sbc	r9, r1
     ce0:	81 14       	cp	r8, r1
     ce2:	91 04       	cpc	r9, r1
     ce4:	79 f7       	brne	.-34     	; 0xcc4 <vfprintf+0x1c4>
     ce6:	e1 c0       	rjmp	.+450    	; 0xeaa <vfprintf+0x3aa>
     ce8:	84 36       	cpi	r24, 0x64	; 100
     cea:	11 f0       	breq	.+4      	; 0xcf0 <vfprintf+0x1f0>
     cec:	89 36       	cpi	r24, 0x69	; 105
     cee:	39 f5       	brne	.+78     	; 0xd3e <vfprintf+0x23e>
     cf0:	f8 01       	movw	r30, r16
     cf2:	37 fe       	sbrs	r3, 7
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <vfprintf+0x204>
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0c 5f       	subi	r16, 0xFC	; 252
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0x214>
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	0e 5f       	subi	r16, 0xFE	; 254
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	f3 2d       	mov	r31, r3
     d16:	ff 76       	andi	r31, 0x6F	; 111
     d18:	3f 2e       	mov	r3, r31
     d1a:	97 ff       	sbrs	r25, 7
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <vfprintf+0x230>
     d1e:	90 95       	com	r25
     d20:	80 95       	com	r24
     d22:	70 95       	com	r23
     d24:	61 95       	neg	r22
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	f0 68       	ori	r31, 0x80	; 128
     d2e:	3f 2e       	mov	r3, r31
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	a3 01       	movw	r20, r6
     d36:	43 d1       	rcall	.+646    	; 0xfbe <__ultoa_invert>
     d38:	88 2e       	mov	r8, r24
     d3a:	86 18       	sub	r8, r6
     d3c:	44 c0       	rjmp	.+136    	; 0xdc6 <vfprintf+0x2c6>
     d3e:	85 37       	cpi	r24, 0x75	; 117
     d40:	31 f4       	brne	.+12     	; 0xd4e <vfprintf+0x24e>
     d42:	23 2d       	mov	r18, r3
     d44:	2f 7e       	andi	r18, 0xEF	; 239
     d46:	b2 2e       	mov	r11, r18
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	25 c0       	rjmp	.+74     	; 0xd98 <vfprintf+0x298>
     d4e:	93 2d       	mov	r25, r3
     d50:	99 7f       	andi	r25, 0xF9	; 249
     d52:	b9 2e       	mov	r11, r25
     d54:	8f 36       	cpi	r24, 0x6F	; 111
     d56:	c1 f0       	breq	.+48     	; 0xd88 <vfprintf+0x288>
     d58:	18 f4       	brcc	.+6      	; 0xd60 <vfprintf+0x260>
     d5a:	88 35       	cpi	r24, 0x58	; 88
     d5c:	79 f0       	breq	.+30     	; 0xd7c <vfprintf+0x27c>
     d5e:	ae c0       	rjmp	.+348    	; 0xebc <vfprintf+0x3bc>
     d60:	80 37       	cpi	r24, 0x70	; 112
     d62:	19 f0       	breq	.+6      	; 0xd6a <vfprintf+0x26a>
     d64:	88 37       	cpi	r24, 0x78	; 120
     d66:	21 f0       	breq	.+8      	; 0xd70 <vfprintf+0x270>
     d68:	a9 c0       	rjmp	.+338    	; 0xebc <vfprintf+0x3bc>
     d6a:	e9 2f       	mov	r30, r25
     d6c:	e0 61       	ori	r30, 0x10	; 16
     d6e:	be 2e       	mov	r11, r30
     d70:	b4 fe       	sbrs	r11, 4
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <vfprintf+0x28e>
     d74:	fb 2d       	mov	r31, r11
     d76:	f4 60       	ori	r31, 0x04	; 4
     d78:	bf 2e       	mov	r11, r31
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <vfprintf+0x28e>
     d7c:	34 fe       	sbrs	r3, 4
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <vfprintf+0x294>
     d80:	29 2f       	mov	r18, r25
     d82:	26 60       	ori	r18, 0x06	; 6
     d84:	b2 2e       	mov	r11, r18
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x294>
     d88:	28 e0       	ldi	r18, 0x08	; 8
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <vfprintf+0x298>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x298>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	f8 01       	movw	r30, r16
     d9a:	b7 fe       	sbrs	r11, 7
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <vfprintf+0x2ac>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	0c 5f       	subi	r16, 0xFC	; 252
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x2b8>
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	a3 01       	movw	r20, r6
     dba:	01 d1       	rcall	.+514    	; 0xfbe <__ultoa_invert>
     dbc:	88 2e       	mov	r8, r24
     dbe:	86 18       	sub	r8, r6
     dc0:	fb 2d       	mov	r31, r11
     dc2:	ff 77       	andi	r31, 0x7F	; 127
     dc4:	3f 2e       	mov	r3, r31
     dc6:	36 fe       	sbrs	r3, 6
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <vfprintf+0x2e4>
     dca:	23 2d       	mov	r18, r3
     dcc:	2e 7f       	andi	r18, 0xFE	; 254
     dce:	a2 2e       	mov	r10, r18
     dd0:	89 14       	cp	r8, r9
     dd2:	58 f4       	brcc	.+22     	; 0xdea <vfprintf+0x2ea>
     dd4:	34 fe       	sbrs	r3, 4
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <vfprintf+0x2ee>
     dd8:	32 fc       	sbrc	r3, 2
     dda:	09 c0       	rjmp	.+18     	; 0xdee <vfprintf+0x2ee>
     ddc:	83 2d       	mov	r24, r3
     dde:	8e 7e       	andi	r24, 0xEE	; 238
     de0:	a8 2e       	mov	r10, r24
     de2:	05 c0       	rjmp	.+10     	; 0xdee <vfprintf+0x2ee>
     de4:	b8 2c       	mov	r11, r8
     de6:	a3 2c       	mov	r10, r3
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x2f0>
     dea:	b8 2c       	mov	r11, r8
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <vfprintf+0x2f0>
     dee:	b9 2c       	mov	r11, r9
     df0:	a4 fe       	sbrs	r10, 4
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <vfprintf+0x312>
     df4:	fe 01       	movw	r30, r28
     df6:	e8 0d       	add	r30, r8
     df8:	f1 1d       	adc	r31, r1
     dfa:	80 81       	ld	r24, Z
     dfc:	80 33       	cpi	r24, 0x30	; 48
     dfe:	21 f4       	brne	.+8      	; 0xe08 <vfprintf+0x308>
     e00:	9a 2d       	mov	r25, r10
     e02:	99 7e       	andi	r25, 0xE9	; 233
     e04:	a9 2e       	mov	r10, r25
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x31a>
     e08:	a2 fe       	sbrs	r10, 2
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <vfprintf+0x318>
     e0c:	b3 94       	inc	r11
     e0e:	b3 94       	inc	r11
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <vfprintf+0x31a>
     e12:	8a 2d       	mov	r24, r10
     e14:	86 78       	andi	r24, 0x86	; 134
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x31a>
     e18:	b3 94       	inc	r11
     e1a:	a3 fc       	sbrc	r10, 3
     e1c:	10 c0       	rjmp	.+32     	; 0xe3e <vfprintf+0x33e>
     e1e:	a0 fe       	sbrs	r10, 0
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x32e>
     e22:	b2 14       	cp	r11, r2
     e24:	80 f4       	brcc	.+32     	; 0xe46 <vfprintf+0x346>
     e26:	28 0c       	add	r2, r8
     e28:	92 2c       	mov	r9, r2
     e2a:	9b 18       	sub	r9, r11
     e2c:	0d c0       	rjmp	.+26     	; 0xe48 <vfprintf+0x348>
     e2e:	b2 14       	cp	r11, r2
     e30:	58 f4       	brcc	.+22     	; 0xe48 <vfprintf+0x348>
     e32:	b6 01       	movw	r22, r12
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	86 d0       	rcall	.+268    	; 0xf46 <fputc>
     e3a:	b3 94       	inc	r11
     e3c:	f8 cf       	rjmp	.-16     	; 0xe2e <vfprintf+0x32e>
     e3e:	b2 14       	cp	r11, r2
     e40:	18 f4       	brcc	.+6      	; 0xe48 <vfprintf+0x348>
     e42:	2b 18       	sub	r2, r11
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x34a>
     e46:	98 2c       	mov	r9, r8
     e48:	21 2c       	mov	r2, r1
     e4a:	a4 fe       	sbrs	r10, 4
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <vfprintf+0x36c>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e3       	ldi	r24, 0x30	; 48
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	78 d0       	rcall	.+240    	; 0xf46 <fputc>
     e56:	a2 fe       	sbrs	r10, 2
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <vfprintf+0x386>
     e5a:	a1 fc       	sbrc	r10, 1
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x364>
     e5e:	88 e7       	ldi	r24, 0x78	; 120
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x368>
     e64:	88 e5       	ldi	r24, 0x58	; 88
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b6 01       	movw	r22, r12
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <vfprintf+0x384>
     e6c:	8a 2d       	mov	r24, r10
     e6e:	86 78       	andi	r24, 0x86	; 134
     e70:	51 f0       	breq	.+20     	; 0xe86 <vfprintf+0x386>
     e72:	a1 fe       	sbrs	r10, 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x37a>
     e76:	8b e2       	ldi	r24, 0x2B	; 43
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x37c>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	a7 fc       	sbrc	r10, 7
     e7e:	8d e2       	ldi	r24, 0x2D	; 45
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	60 d0       	rcall	.+192    	; 0xf46 <fputc>
     e86:	89 14       	cp	r8, r9
     e88:	30 f4       	brcc	.+12     	; 0xe96 <vfprintf+0x396>
     e8a:	b6 01       	movw	r22, r12
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	5a d0       	rcall	.+180    	; 0xf46 <fputc>
     e92:	9a 94       	dec	r9
     e94:	f8 cf       	rjmp	.-16     	; 0xe86 <vfprintf+0x386>
     e96:	8a 94       	dec	r8
     e98:	f3 01       	movw	r30, r6
     e9a:	e8 0d       	add	r30, r8
     e9c:	f1 1d       	adc	r31, r1
     e9e:	80 81       	ld	r24, Z
     ea0:	b6 01       	movw	r22, r12
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	50 d0       	rcall	.+160    	; 0xf46 <fputc>
     ea6:	81 10       	cpse	r8, r1
     ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <vfprintf+0x396>
     eaa:	22 20       	and	r2, r2
     eac:	09 f4       	brne	.+2      	; 0xeb0 <vfprintf+0x3b0>
     eae:	4e ce       	rjmp	.-868    	; 0xb4c <vfprintf+0x4c>
     eb0:	b6 01       	movw	r22, r12
     eb2:	80 e2       	ldi	r24, 0x20	; 32
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	47 d0       	rcall	.+142    	; 0xf46 <fputc>
     eb8:	2a 94       	dec	r2
     eba:	f7 cf       	rjmp	.-18     	; 0xeaa <vfprintf+0x3aa>
     ebc:	f6 01       	movw	r30, r12
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <vfprintf+0x3c8>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	2b 96       	adiw	r28, 0x0b	; 11
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	08 95       	ret

00000efa <strnlen_P>:
     efa:	fc 01       	movw	r30, r24
     efc:	05 90       	lpm	r0, Z+
     efe:	61 50       	subi	r22, 0x01	; 1
     f00:	70 40       	sbci	r23, 0x00	; 0
     f02:	01 10       	cpse	r0, r1
     f04:	d8 f7       	brcc	.-10     	; 0xefc <strnlen_P+0x2>
     f06:	80 95       	com	r24
     f08:	90 95       	com	r25
     f0a:	8e 0f       	add	r24, r30
     f0c:	9f 1f       	adc	r25, r31
     f0e:	08 95       	ret

00000f10 <strnlen>:
     f10:	fc 01       	movw	r30, r24
     f12:	61 50       	subi	r22, 0x01	; 1
     f14:	70 40       	sbci	r23, 0x00	; 0
     f16:	01 90       	ld	r0, Z+
     f18:	01 10       	cpse	r0, r1
     f1a:	d8 f7       	brcc	.-10     	; 0xf12 <strnlen+0x2>
     f1c:	80 95       	com	r24
     f1e:	90 95       	com	r25
     f20:	8e 0f       	add	r24, r30
     f22:	9f 1f       	adc	r25, r31
     f24:	08 95       	ret

00000f26 <strrev>:
     f26:	dc 01       	movw	r26, r24
     f28:	fc 01       	movw	r30, r24
     f2a:	67 2f       	mov	r22, r23
     f2c:	71 91       	ld	r23, Z+
     f2e:	77 23       	and	r23, r23
     f30:	e1 f7       	brne	.-8      	; 0xf2a <strrev+0x4>
     f32:	32 97       	sbiw	r30, 0x02	; 2
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <strrev+0x18>
     f36:	7c 91       	ld	r23, X
     f38:	6d 93       	st	X+, r22
     f3a:	70 83       	st	Z, r23
     f3c:	62 91       	ld	r22, -Z
     f3e:	ae 17       	cp	r26, r30
     f40:	bf 07       	cpc	r27, r31
     f42:	c8 f3       	brcs	.-14     	; 0xf36 <strrev+0x10>
     f44:	08 95       	ret

00000f46 <fputc>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	fb 01       	movw	r30, r22
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	21 fd       	sbrc	r18, 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <fputc+0x16>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	2c c0       	rjmp	.+88     	; 0xfb4 <fputc+0x6e>
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <fputc+0x46>
     f60:	46 81       	ldd	r20, Z+6	; 0x06
     f62:	57 81       	ldd	r21, Z+7	; 0x07
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	42 17       	cp	r20, r18
     f6a:	53 07       	cpc	r21, r19
     f6c:	44 f4       	brge	.+16     	; 0xf7e <fputc+0x38>
     f6e:	a0 81       	ld	r26, Z
     f70:	b1 81       	ldd	r27, Z+1	; 0x01
     f72:	9d 01       	movw	r18, r26
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	31 83       	std	Z+1, r19	; 0x01
     f7a:	20 83       	st	Z, r18
     f7c:	8c 93       	st	X, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	37 83       	std	Z+7, r19	; 0x07
     f88:	26 83       	std	Z+6, r18	; 0x06
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <fputc+0x6e>
     f8c:	8b 01       	movw	r16, r22
     f8e:	ec 01       	movw	r28, r24
     f90:	fb 01       	movw	r30, r22
     f92:	00 84       	ldd	r0, Z+8	; 0x08
     f94:	f1 85       	ldd	r31, Z+9	; 0x09
     f96:	e0 2d       	mov	r30, r0
     f98:	19 95       	eicall
     f9a:	89 2b       	or	r24, r25
     f9c:	e1 f6       	brne	.-72     	; 0xf56 <fputc+0x10>
     f9e:	d8 01       	movw	r26, r16
     fa0:	16 96       	adiw	r26, 0x06	; 6
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	17 97       	sbiw	r26, 0x07	; 7
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	17 96       	adiw	r26, 0x07	; 7
     fac:	9c 93       	st	X, r25
     fae:	8e 93       	st	-X, r24
     fb0:	16 97       	sbiw	r26, 0x06	; 6
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__ultoa_invert>:
     fbe:	fa 01       	movw	r30, r20
     fc0:	aa 27       	eor	r26, r26
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	51 f1       	breq	.+84     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	81 f1       	breq	.+96     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
     fca:	e8 94       	clt
     fcc:	6f 93       	push	r22
     fce:	6e 7f       	andi	r22, 0xFE	; 254
     fd0:	6e 5f       	subi	r22, 0xFE	; 254
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	af 4f       	sbci	r26, 0xFF	; 255
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	3e d0       	rcall	.+124    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	3c d0       	rcall	.+120    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     fe2:	67 0f       	add	r22, r23
     fe4:	78 1f       	adc	r23, r24
     fe6:	89 1f       	adc	r24, r25
     fe8:	9a 1f       	adc	r25, r26
     fea:	a1 1d       	adc	r26, r1
     fec:	68 0f       	add	r22, r24
     fee:	79 1f       	adc	r23, r25
     ff0:	8a 1f       	adc	r24, r26
     ff2:	91 1d       	adc	r25, r1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	6a 0f       	add	r22, r26
     ff8:	71 1d       	adc	r23, r1
     ffa:	81 1d       	adc	r24, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	20 d0       	rcall	.+64     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    1002:	09 f4       	brne	.+2      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1004:	68 94       	set
    1006:	3f 91       	pop	r19
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	26 9f       	mul	r18, r22
    100c:	11 24       	eor	r1, r1
    100e:	30 19       	sub	r19, r0
    1010:	30 5d       	subi	r19, 0xD0	; 208
    1012:	31 93       	st	Z+, r19
    1014:	de f6       	brtc	.-74     	; 0xfcc <__ultoa_invert+0xe>
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret
    101a:	46 2f       	mov	r20, r22
    101c:	47 70       	andi	r20, 0x07	; 7
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	41 93       	st	Z+, r20
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0f d0       	rcall	.+30     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1026:	c9 f7       	brne	.-14     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1028:	f6 cf       	rjmp	.-20     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    102a:	46 2f       	mov	r20, r22
    102c:	4f 70       	andi	r20, 0x0F	; 15
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	4a 33       	cpi	r20, 0x3A	; 58
    1032:	18 f0       	brcs	.+6      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1034:	49 5d       	subi	r20, 0xD9	; 217
    1036:	31 fd       	sbrc	r19, 1
    1038:	40 52       	subi	r20, 0x20	; 32
    103a:	41 93       	st	Z+, r20
    103c:	02 d0       	rcall	.+4      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    103e:	a9 f7       	brne	.-22     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1040:	ea cf       	rjmp	.-44     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1042:	b4 e0       	ldi	r27, 0x04	; 4
    1044:	a6 95       	lsr	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 05       	cpc	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	08 95       	ret
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	0a 2e       	mov	r0, r26
    1060:	06 94       	lsr	r0
    1062:	57 95       	ror	r21
    1064:	47 95       	ror	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	a0 1d       	adc	r26, r0
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
